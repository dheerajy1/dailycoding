<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
<title>
<![CDATA[ dheerajy blog ]]>
</title>
<description>
<![CDATA[ dheerajy blog ]]>
</description>
<link>https://dheerajy1.hashnode.dev</link>
<generator>RSS for Node</generator>
<lastBuildDate>Mon, 09 Jan 2023 17:15:22 GMT</lastBuildDate>
<atom:link href="https://dheerajy1.hashnode.dev/rss.xml" rel="self" type="application/rss+xml"/>
<language>
<![CDATA[ en ]]>
</language>
<ttl>60</ttl>
<atom:link rel="next" href="https://dheerajy1.hashnode.dev/rss.xml?page=1"/>
<item>
<title>
<![CDATA[ Learning JS Promises Day84 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day84 of #100DaysOfCode, I am Learning JS promises with an example ' sending invites people' and Interview Questions.</p> <h1 id="heading-1-learning-js-promises">1. Learning JS Promises</h1> <p>A few Days back when I wanted to teach myself promises with the help of an example if I really understand JS promises then I thought of designing a party invite to people and then the outcomes are 1 or 0 or ignored.</p> <p>Also I wanted to use an array to scale the party invites and I used object methods to call these functions.</p> <p>It took some days as I wanted to use minimal variable declaration, except the i variable which I used to loop through the responses in order to fill the ignored responses in the response array.</p> <p>storing party invites in array</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> party = { <span class="hljs-attr">members</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">r</span>) </span>{ <span class="hljs-built_in">this</span>.members = r; }, } party.members([<span class="hljs-string">"Ross"</span>, <span class="hljs-string">`Rachel`</span>, <span class="hljs-string">`Monica`</span>, <span class="hljs-string">`Chandler`</span>, <span class="hljs-string">`Joey`</span>, <span class="hljs-string">`Phoebe`</span>]); </code></pre> <p>Now, to send invites</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> party = { <span class="hljs-attr">sendInvite</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">this</span>.sendInvite = <span class="hljs-built_in">this</span>.members; <span class="hljs-built_in">this</span>.sendInvite.forEach(<span class="hljs-function">(<span class="hljs-params">eachInvite</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Invite sent to <span class="hljs-subst">${eachInvite}</span>`</span>); }); }, } party.sendInvite(); </code></pre> <p>Then, responses</p> <p>I used for loop to the get the missing slots in the responses sparse array,</p> <pre><code class="lang-javascript">party.recievedResponse([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]); <span class="hljs-keyword">let</span> party = { <span class="hljs-attr">recievedResponse</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">responses</span>) </span>{ <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; responses.length; i++) { <span class="hljs-keyword">if</span> (!responses[i] &amp;&amp; responses[i] != <span class="hljs-number">0</span>) { responses[i] = <span class="hljs-literal">undefined</span>; } } <span class="hljs-built_in">this</span>.recievedResponse = responses; <span class="hljs-built_in">this</span>.sendInvite.forEach(<span class="hljs-function">(<span class="hljs-params">person, index</span>) =&gt;</span> { <span class="hljs-built_in">this</span>.sendInvite[index] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">response, ignored</span>) =&gt;</span> { <span class="hljs-keyword">if</span> (!responses[index] &amp;&amp; responses[index] != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ignored(<span class="hljs-string">`<span class="hljs-subst">${person}</span> ignored`</span>); <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> response(<span class="hljs-string">`<span class="hljs-subst">${person}</span>`</span>); }); }); }, } </code></pre> <p>After that,</p> <p>analysing the responses using . then method,</p> <pre><code class="lang-javascript">analyseResponse: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">this</span>.members.forEach(<span class="hljs-function">(<span class="hljs-params">member, index</span>) =&gt;</span> { member.then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> { <span class="hljs-built_in">this</span>.members[index] = res; }); }); <span class="hljs-built_in">this</span>.sendInvite.forEach(<span class="hljs-function">(<span class="hljs-params">person, index</span>) =&gt;</span> { person .then(<span class="hljs-function">() =&gt;</span> { <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.recievedResponse[index]) { <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">this</span>.members[index]}</span> accepted`</span>); } <span class="hljs-keyword">else</span> { <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">this</span>.members[index]}</span> rejected`</span>); } }) .catch(<span class="hljs-function">(<span class="hljs-params">mess</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(mess); }); }); }, </code></pre> <h2 id="heading-finally">Finally,</h2> <p>I completed what I want to understand promises.</p> <h2 id="heading-code-partypromises-clickhttpswwwsololearncomcompiler-playgroundwclvyss94no0">Code: partypromises <a target="_blank" href="https://www.sololearn.com/compiler-playground/WclvYSS94NO0">[click]</a></h2> <h1 id="heading-2-js-promises-interview-questions">2. JS Promises Interview Questions</h1> <h2 id="heading-1-what-is-the-output-of-the-following-code">1. What is the output of the following code?</h2> <p>The reject() will be caught by the .catch() but after the .catch() will also be executed. before won't be executed.</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">job</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{ reject(); }); } <span class="hljs-keyword">let</span> promise = job(); promise .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Success 1'</span>); }) .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Success 2'</span>); }) .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Success 3'</span>); }) .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Error 1'</span>); }) .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Success 4'</span>); }); </code></pre> <h2 id="heading-2-what-is-the-output-of-the-following-code">2. What is the output of the following code?</h2> <p>In the below question in the let variable promise if the callback function is there with an argument true hence the resolve with success is passed to the .then() so <strong><mark>success</mark></strong> string will logged,</p> <p>and again in the return statement, a callback function with false as argument is passed which will return reject() with error &amp; is passed to catch function which will log this <mark>error</mark> string,</p> <p>and this catch function is returning error caught string to the next .then() promise in the chain which will log this <mark>error caught</mark> string,</p> <p>but this then function is returning a callback with true as argument and hence success string is return to the next chain but will not get logged,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">job</span>(<span class="hljs-params">state</span>) </span>{ <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{ <span class="hljs-keyword">if</span> (state) { resolve(<span class="hljs-string">'success'</span>); } <span class="hljs-keyword">else</span> { reject(<span class="hljs-string">'error'</span>); } }); } <span class="hljs-keyword">let</span> promise = job(<span class="hljs-literal">true</span>); promise .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{ <span class="hljs-built_in">console</span>.log(data); <span class="hljs-keyword">return</span> job(<span class="hljs-literal">false</span>); }) .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>{ <span class="hljs-built_in">console</span>.log(error); <span class="hljs-keyword">return</span> <span class="hljs-string">'Error caught'</span>; }) .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{ <span class="hljs-built_in">console</span>.log(data); <span class="hljs-keyword">return</span> job(<span class="hljs-literal">true</span>); }) .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>{ <span class="hljs-built_in">console</span>.log(error); }); </code></pre> <p>The Last .then() promise is in a floating state.</p> <h2 id="heading-code-jsinterviewquestions-clickhttpswwwsololearncomcompiler-playgroundw8733oeckqez">code: jsinterviewquestions <a target="_blank" href="https://www.sololearn.com/compiler-playground/W8733oecKqEZ">[click]</a></h2> <h1 id="heading-conclusion">Conclusion</h1> <p>Finally, I completed the JS promises ' sending Invites to people' and Interview questions.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1673273681536/6158ba82-79e6-470a-bde1-349a154c50ab.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-promises-day84</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-promises-day84</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Mon, 09 Jan 2023 14:21:02 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1673273994287/9a4a6d7d-d3e8-4439-8e07-e52660bd3e98.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building a project in CSS and JS Promises Day83 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day83 of #100DaysOfCode, I am doing the frontend project 'loading animation' and practicing JavaScript Promises Interview Questions.</p> <h1 id="heading-1-javascript-promises">1. JavaScript Promises</h1> <h2 id="heading-i-what-are-the-states-of-a-promise">i. What are the states of a Promise?</h2> <ol> <li><p>pending</p> </li> <li><p>Fulfilled</p> </li> <li><p>rejected</p> </li> </ol> <p>Floating?</p> <h2 id="heading-ii-is-await-only-used-with-only-promises">ii. Is await only used with only Promises?</h2> <p>No, await keyword not only used for promises but can also be used for objects with .then() method.</p> <h2 id="heading-iii-what-is-the-output-of-the-following-code">iii. What is the output of the following code?</h2> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> { reject(<span class="hljs-built_in">Error</span>(<span class="hljs-string">'Some error occurred'</span>)); }) promise.catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(error.message)); promise.catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(error.message)); </code></pre> <p>Some error occurred</p> <p>Some error occurred</p> <h2 id="heading-iv-how-to-write-a-sleeping-function-using-promise">iv. How to write a sleeping function using promise?</h2> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">ms</span>) </span>{ <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> { <span class="hljs-built_in">setTimeout</span>(res, ms); }); } sleep(<span class="hljs-number">2000</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>) }) </code></pre> <h3 id="heading-code-sleepfun-clickhttpswwwsololearncomcompiler-playgroundwbzawa9ldaln">code: sleepfun <a target="_blank" href="https://www.sololearn.com/compiler-playground/WBZawa9lDaLN">[click]</a></h3> <h1 id="heading-2frontend-project-loading-animation">2.Frontend project loading animation</h1> <h2 id="heading-html">HTML</h2> <p>create a div with a class container</p> <p>and with 12 child divs inside</p> <p>Tip: <mark>Use the shortcut div.loading*12</mark></p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading-container center"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <h2 id="heading-css">CSS</h2> <p>It is line dividing a circle into 12 parts means 360/12 = 30 angle.</p> <p>and we are animating the background color from 0% to 100% in 1 s and giving animation delay to start the rest child after the first child reached 100%,</p> <p>make the container center</p> <pre><code class="lang-css"><span class="hljs-selector-class">.loading-container</span><span class="hljs-selector-class">.center</span>{ <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">margin</span>: auto; } </code></pre> <p>Now, style a single line and give animation name,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span>{ <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">left</span>: <span class="hljs-number">0.4em</span>; <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">0.07em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">0.27em</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.05em</span>; <span class="hljs-attribute">transform-origin</span>: center -<span class="hljs-number">0.2em</span>; <span class="hljs-attribute">animation</span>: loading-fade <span class="hljs-number">1s</span> infinite linear; } </code></pre> <p>style the first child,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(1)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>); } </code></pre> <p>Similarly for all the childs,</p> <pre><code class="lang-css"> <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(2)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.083s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">30deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(3)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.116s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">60deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(4)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.249s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(5)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.332s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">120deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(6)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.415s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">150deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(7)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.498s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">180deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(8)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.581s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">210deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(9)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.664s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">240deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(10)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.747s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(11)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.83s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">300deg</span>); } <span class="hljs-selector-class">.loading-container</span> <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:nth-child(12)</span>{ <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.83s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">330deg</span>); } </code></pre> <h2 id="heading-finally">Finally,</h2> <p>define the keyframes for the animation,</p> <pre><code class="lang-css"> <span class="hljs-keyword">@keyframes</span> loading-fade{ 0%{ <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">221</span>, <span class="hljs-number">221</span>); } 100%{ <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); } } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I have completed the loading animation using HTML and CSS and practiced JavaScript Promises Interview Questions.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1673191296912/04de35d2-f463-4d1c-986c-3ecda1565f57.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1673191301635/f45209bd-af81-4667-905f-a4516b5fac1f.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-spinner-click">Source: Spinner [click]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-project-in-css-and-js-promises-day83</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-project-in-css-and-js-promises-day83</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sun, 08 Jan 2023 15:26:54 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1673173922315/40f49562-9044-4526-b5ac-2bc16a83730f.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning ES6 JS Promises Day 82 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day82 of #100DaysOfCode, I am learning ES6 JavaScript Promises and explaining by forming my own example.</p> <h1 id="heading-javascript-promises">JavaScript Promises</h1> <p>JavaScript promises have to arguments and these arguments function type like the resolve function and error function. When a promise is resolved result function is executed and when a promise returns an error function is executed.</p> <p>Example:</p> <p>Elon musk had promised to deliver Tesla roadster by 2020, as you know this promise by elon musk was broken that is not resolved but did you wait for this promise? To be precise were you specifically waiting for the Tesla Roadster to get into production or Did you buy a Temporary car?</p> <p>If you didn't wait but ordered - is analogous to JS will execute a program from top to bottom and keeps the order aside and when its get resolved and will be executed.</p> <p>Now, Let's say Elon had delivered this car in 2020 so if he had delivered you would had to pay the full amount for the purchase.</p> <p>Purchasing the car - is analogous to using .then() method to Execute the code of block when it gets resolved.</p> <pre><code class="lang-javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">promise</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">10</span>)} <span class="hljs-keyword">return</span> resolve() } promise() <span class="hljs-keyword">let</span> wakeup = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> { <span class="hljs-keyword">return</span> resolve(<span class="hljs-string">"wakeup"</span>); }); wakeup.then(<span class="hljs-function">(<span class="hljs-params">param</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(param) }) </code></pre> <p>Code: JSpromiprac <a target="_blank" href="https://www.sololearn.com/compiler-playground/WswF55EmTDW6">[click]</a></p> <p>Now, if we want to print directly</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> wakeup = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span> { resolve(<span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>,<span class="hljs-string">"wakeup"</span>)) }); <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>,wakeup) <span class="hljs-attr">output</span> : <span class="hljs-number">2</span> <span class="hljs-string">"wakeup"</span> <span class="hljs-number">1</span> {} </code></pre> <p>In this example, why 2 is an object because the wakeup is another promise</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> wakeup = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> { <span class="hljs-keyword">return</span> resolve(<span class="hljs-string">"wakeup"</span>); }); <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>,wakeup) wakeup.then(<span class="hljs-function">(<span class="hljs-params">param</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>,wakeup) <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>,param) }) output <span class="hljs-number">1</span> {} <span class="hljs-number">2</span> {} <span class="hljs-number">3</span> <span class="hljs-string">"wakeup"</span> </code></pre> <h1 id="heading-now">Now,</h1> <p>The below code is interesting took me a few hours to write,</p> <p>I struggled to explain promises with the help of an example, in this process I learned a lot and a bit efficient in promises.</p> <p>Bascially, I want to invite elon and jef to a party and then add a promise because the outcomes are accepted - Boolean value 1 or ignored - 0.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> replied = []; party = { <span class="hljs-attr">giveInvite</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">persons</span>) </span>{ <span class="hljs-built_in">this</span>.giveInvite = persons; <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.giveInvite; }, <span class="hljs-attr">replied</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">persons, response=<span class="hljs-number">0</span></span>) </span>{ persons.forEach(<span class="hljs-function">(<span class="hljs-params">person, index</span>) =&gt;</span> { replied[index] = person; replied[index] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">accepted, ignored</span>) =&gt;</span> { <span class="hljs-keyword">if</span> (response) accepted(<span class="hljs-string">`<span class="hljs-subst">${person}</span> accepted`</span>); <span class="hljs-keyword">else</span> ignored(<span class="hljs-string">`<span class="hljs-subst">${person}</span> ignored`</span>); }); }); replied.forEach(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> { res .then(<span class="hljs-function">(<span class="hljs-params">mess</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(mess); }) .catch(<span class="hljs-function">(<span class="hljs-params">mess</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(mess); }); }); }, }; party.giveInvite([<span class="hljs-string">"Elonmusk"</span>, <span class="hljs-string">"JefBezos"</span>]); <span class="hljs-built_in">console</span>.log(party.giveInvite); party.replied(party.giveInvite,<span class="hljs-number">1</span>); </code></pre> <h2 id="heading-code-partyjspromise-clickhttpswwwsololearncomcompiler-playgroundwuuyx2h53c1j">Code: partyjspromise <a target="_blank" href="https://www.sololearn.com/compiler-playground/WUuyX2h53c1J">[click]</a></h2> <h1 id="heading-conclusion">Conclusion</h1> <p>Learned ES6 Promises and explained with an example.</p> <ol> <li><p>JavaScript promises</p> </li> <li><p>object method</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1673110310562/2b7c35f3-501e-4430-a5e7-608ca6ec3edc.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-es6-js-promises-day-82</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-es6-js-promises-day-82</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sat, 07 Jan 2023 16:59:45 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1673110599031/9d7f52e7-bde1-4c8b-8370-91e7a0c28cce.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning about ES6 JS Promises Day81 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day81 of #100DaysOfCode, I Learned and Explained about JS promises.</p> <h1 id="heading-learningplaying-about-js-promises">Learning/playing about JS Promises</h1> <p>creating a simple promise</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> wakeup = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> { <span class="hljs-keyword">return</span> resolve(<span class="hljs-string">"wakeup"</span>); }); <span class="hljs-built_in">console</span>.log( wakeup.then(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> { <span class="hljs-keyword">return</span> resolve; }) ); </code></pre> <p>Now,</p> <p>The below code will create two new promises and will print the promise done after 2 seconds</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> store <span class="hljs-keyword">let</span> wakeup = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> { <span class="hljs-keyword">return</span> resolve(<span class="hljs-string">"wakeup"</span>); }); store = wakeup.then(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(resolve) <span class="hljs-keyword">return</span> <span class="hljs-string">`promise done`</span>; } ); <span class="hljs-keyword">let</span> sleep = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> { <span class="hljs-keyword">return</span> resolve(<span class="hljs-string">"sleep"</span>); }); sleep.then(<span class="hljs-function">(<span class="hljs-params">param</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(param);; }) <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> { store.then(<span class="hljs-function">(<span class="hljs-params">ret</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(ret) }) }, <span class="hljs-number">2000</span>) </code></pre> <p>Now, let's see How JavaScript executes the below code,</p> <pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>); <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Createpromise</span>(<span class="hljs-params">value</span>)</span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>); value = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>); <span class="hljs-keyword">return</span> resolve(<span class="hljs-string">`<span class="hljs-subst">${value}</span>`</span>); }); value.then(<span class="hljs-function">(<span class="hljs-params">param</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>); <span class="hljs-built_in">console</span>.log(param); }); <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>); } <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Createpromise(<span class="hljs-string">'wakeup'</span>)) <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Createpromise(<span class="hljs-string">'work'</span>)) <span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Createpromise(<span class="hljs-string">'sleep'</span>)) <span class="hljs-built_in">console</span>.log(<span class="hljs-number">9</span>); Output: <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> {} <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> {} <span class="hljs-number">8</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> {} <span class="hljs-number">9</span> <span class="hljs-number">4</span> wakeup <span class="hljs-number">4</span> work <span class="hljs-number">4</span> sleep </code></pre> <h2 id="heading-code-jspromiseprac1-clickhttpswwwsololearncomcompiler-playgroundwlnladivvnyw">Code: JSpromiseprac1 <a target="_blank" href="https://www.sololearn.com/compiler-playground/WLnlaDiVVnyW">[click]</a></h2> <p>Now, Lets understand the same code with detailed like when and where JS executes,</p> <p>begin;<br />call new Createpromise 1<br />enter Createpromise; enter new promise;<br />Exit new promise; bottom Createpromise;<br />{} end of new Createpromise 1</p> <p>call new Createpromise 2<br />enter Createpromise; enter new promise; Exit new promise; bottom Createpromise;<br />{} end of new Createpromise 2</p> <p>call new Createpromise 3<br />enter Createpromise; enter new promise; Exit new promise; bottom Createpromise;<br />{} end of new Createpromise 3</p> <p>enter then; wakeup<br />enter then; work<br />enter then; sleep</p> <pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`begin`</span>); <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Createpromise</span>(<span class="hljs-params">value</span>)</span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`enter Createpromise`</span>); value = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`enter new promise`</span>); <span class="hljs-keyword">return</span> resolve(<span class="hljs-string">`<span class="hljs-subst">${value}</span>`</span>); }); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Exit new promise`</span>); value.then(<span class="hljs-function">(<span class="hljs-params">param</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`enter then`</span>); <span class="hljs-built_in">console</span>.log(param); }); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`bottom Createpromise`</span>); } <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`end Createpromise`</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`call new Createpromise 1`</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Createpromise(<span class="hljs-string">'wakeup'</span>)) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`end of new Createpromise 1`</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`call new Createpromise 2`</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Createpromise(<span class="hljs-string">'work'</span>)) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`end of new Createpromise 2`</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`call new Createpromise 3`</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Createpromise(<span class="hljs-string">'sleep'</span>)) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`end of new Createpromise 3`</span>); </code></pre> <p>Code: promiseprac2 <a target="_blank" href="https://www.sololearn.com/compiler-playground/WJOqEYkANrd0">[click]</a></p> <p>Now, Let's understand with an anology,</p> <p>The below code shows three people starting for goa trip.</p> <p>when the Dheeraj person started and he called and everyone joined immediately.</p> <p>I uses array here to resend two arguments in one function call and used for each method to pick the arguments and assign new promise,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> i =<span class="hljs-number">0</span> <span class="hljs-keyword">let</span> timer = <span class="hljs-function">()=&gt;</span>{ <span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>) <span class="hljs-built_in">clearInterval</span>(x) <span class="hljs-built_in">console</span>.log(i) i++ } <span class="hljs-keyword">let</span> x = <span class="hljs-built_in">setInterval</span>(timer,<span class="hljs-number">1000</span>) <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Goatrip</span>(<span class="hljs-params">persons</span>) </span>{ <span class="hljs-built_in">console</span>.log(i) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`call persons`</span>) persons.forEach(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span> { person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> { <span class="hljs-keyword">return</span> resolve(<span class="hljs-string">`<span class="hljs-subst">${person}</span>`</span>); }); person.then(<span class="hljs-function">(<span class="hljs-params">param</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(i) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${param}</span> just joined`</span>); }); }); } <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"dheeraj started solo "</span>); <span class="hljs-keyword">new</span> Goatrip([<span class="hljs-string">`rk`</span>,<span class="hljs-string">`gskv`</span>]); </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>Learned and practiced JS promises concepts and explained them with my own example going to trip analogy.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1673023042275/8cdaf740-57b4-4326-aa82-5df1a6f43e14.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-about-es6-js-promises-day81</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-about-es6-js-promises-day81</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Fri, 06 Jan 2023 16:45:29 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1673023339522/7c23a254-5a0d-4d83-97ee-aef6e53bb982.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 80 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day80 of #100DaysOfCode, I am adding the toggle to Switch between temperature units Fahrenheit and Celcius and imported Geo-Location data and a 'Getting random location' prompt for the 'How To Build A Weather App In JavaScript Without Needing A Server' project.</p> <h1 id="heading-2-getting-data-from-json-file-using-axios-library">2. Getting data from json file using Axios library,</h1> <p>In Axios library, get() method returns a promise hence you then() method to wait for the promise to get resolved,</p> <p>you can use the catch() method to display the error if you want to, this will be useful if the Json file is deleted or its path is mismatched can you can log 'error getting the Geo-Location information',</p> <pre><code class="lang-javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGeoInfo</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> axios.get(<span class="hljs-string">"Json File name"</span>).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> { <span class="hljs-keyword">const</span> data = response.data; <span class="hljs-keyword">const</span> geoObj = data[<span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * (data.length - <span class="hljs-number">1</span>))]; geoObj.country = <span class="hljs-string">"India"</span>; <span class="hljs-keyword">return</span> geoObj; }); } </code></pre> <h1 id="heading-3-displaying-getting-random-location-to-inform-the-user">3. Displaying ' getting random location' to inform the user,</h1> <h2 id="heading-html">HTML</h2> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-geo"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label-geo"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nogeoloc"</span>&gt;</span> Getting random Geo-Location... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <h2 id="heading-css">CSS</h2> <p>In CSS I kept display to none because I want to display this information in the event of getting location error returned by the browser when the location is displayed,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.container-geo</span>{ <span class="hljs-attribute">display</span>: none; <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">margin</span>:<span class="hljs-number">35vh</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">40vw</span>; <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>; } <span class="hljs-selector-class">.label-geo</span> { <span class="hljs-attribute">min-width</span>: <span class="hljs-number">20vw</span>; <span class="hljs-attribute">min-height</span>: <span class="hljs-number">10vh</span>; <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1vw</span> <span class="hljs-number">0</span> <span class="hljs-number">1vw</span>; <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">hsl</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0%</span>, <span class="hljs-number">0%</span>); } <span class="hljs-selector-class">.show</span> { <span class="hljs-attribute">display</span>: block; } <span class="hljs-selector-class">.nogeoloc</span> { <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>; } </code></pre> <h2 id="heading-javascript">JavaScript</h2> <p>Now, Select the div containing the info,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> geoloc = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".container-geo"</span>); </code></pre> <p>After that, add the class list show when the promise of the get current position is returning error function which is the position error,</p> <pre><code class="lang-javascript"> geoloc.classList.add(<span class="hljs-string">"show"</span>); </code></pre> <p>After that, remove this class list when the promise is resolved in the getweather function,</p> <pre><code class="lang-javascript">geoloc.remove(); </code></pre> <h1 id="heading-4-exporting-the-random-location-geo-location-info-to-front-end">4. Exporting the random location Geo-Location Info to Front-End.</h1> <h2 id="heading-html-1">HTML</h2> <p>Enclosed the location info in a div and give each a data attribute to select in Javascript,</p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"geo-location"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-geo"</span> <span class="hljs-attr">data-lat</span>&gt;</span>Latitude<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-geo"</span> <span class="hljs-attr">data-lon</span>&gt;</span>Longitude<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-geo"</span> <span class="hljs-attr">data-city</span>&gt;</span>City<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-geo"</span> <span class="hljs-attr">data-state</span> &gt;</span>State<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-geo"</span> <span class="hljs-attr">data-country</span> &gt;</span>Country<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <h2 id="heading-css-1">CSS</h2> <pre><code class="lang-css"><span class="hljs-selector-class">.icon-temp-loc-holder</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">flex-direction</span>: column; <span class="hljs-attribute">gap</span>: <span class="hljs-number">8px</span>; } <span class="hljs-selector-class">.icon-temp</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">flex-direction</span>: row; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">justify-content</span>: center; } <span class="hljs-selector-class">.geo-location</span>{ <span class="hljs-attribute">overflow</span>: auto; } </code></pre> <h2 id="heading-javascript-1">JavaScript</h2> <p>Define a displayGeoInfo function, and call this function when the promise of the getweather is resolved,</p> <pre><code class="lang-javascript">displayGeoInfo({ geoinfo }); <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayGeoInfo</span>(<span class="hljs-params">{ geoinfo }</span>) </span>{ } </code></pre> <p>Inside this function, Let's define what to export,</p> <p>call the setValue function and pass the arguments like the data attribute and the values,</p> <pre><code class="lang-javascript">setValue(<span class="hljs-string">"lat"</span>, <span class="hljs-string">`Latitude : <span class="hljs-subst">${geoinfo.lat}</span>`</span>); setValue(<span class="hljs-string">"lon"</span>, <span class="hljs-string">`Longitude : <span class="hljs-subst">${geoinfo.lon}</span>`</span>); setValue(<span class="hljs-string">"city"</span>, <span class="hljs-string">`City : <span class="hljs-subst">${geoinfo.name}</span>`</span>); setValue(<span class="hljs-string">"state"</span>, <span class="hljs-string">`State : <span class="hljs-subst">${geoinfo.state}</span>`</span>); setValue(<span class="hljs-string">"country"</span>, <span class="hljs-string">`Country : <span class="hljs-subst">${geoinfo.country}</span>`</span>); </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed the weather API project.</p> <p>Finally, That brings the completion of a Full Fledged weather app. Learned a lot like getting API data using Axios library and de structuring and lot of function calls.</p> <p>I added the following features on my own,</p> <ol> <li><p>Ability to Switch between temperature units Fahrenheit and Celcius,</p> </li> <li><p>Import Geo-Location data using Axios Library.</p> </li> <li><p>Displaying " Getting Random Location..." prompt when user location is disabled,</p> </li> <li><p>Exporting the random location Geo-Location Info to Front-End.</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672931838772/bf1989ba-c3c8-4c44-b8ea-7d1f7a6d5272.png" alt class="image--center mx-auto" /></p> </li> <li><p>preview 1 loading info</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672931866064/c1550eec-9710-4ca1-941d-33b8a525bc5f.png" alt class="image--center mx-auto" /></p> <p> results</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672931888379/2042fdd3-edd9-49ac-8ee5-b009ffe883c7.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-80</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-80</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Thu, 05 Jan 2023 15:19:36 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672848612135/4d01d629-0837-4709-9ac7-3a0da13738d6.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 79 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day79 of #100DaysOfCode, I am adding the toggle to Switch between temperature units Fahrenheit and Celcius 'How To Build A Weather App In JavaScript Without Needing A Server' project.</p> <h1 id="heading-header-section-html">Header section HTML,</h1> <h2 id="heading-header-left">Header-Left,</h2> <p>gave data attributes in class to the respective temp units</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"temp-units-celcius"</span> <span class="hljs-attr">data-celcius</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"temp-units-fahrenheit"</span> <span class="hljs-attr">data-fahrenheit</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span>F<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> </code></pre> <h2 id="heading-header-right">Header-Right,</h2> <p>gave data attributes in class to the respective temp units</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-current-high</span>&gt;</span>32<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-tempunitsfare</span>&gt;</span>F<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tempunits"</span> <span class="hljs-attr">data-current-fl-high</span>&gt;</span>27<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-tempunitsfare</span>&gt;</span>F<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> </code></pre> <h1 id="heading-header-section-css">Header section CSS</h1> <h2 id="heading-header-left-1">Header-Left,</h2> <p>add a class list so that upon click the scale will be changed,</p> <pre><code class="lang-xml">.temp-units-celcius { transform: scale(0.4); translate: -1px -5px; } .temp-units-celcius::after { content: ""; border: 0.5px solid rgb(0, 0, 0); margin-left: 8px; } .temp-units-fahrenheit { transform: scale(0.9); translate: -8px -5px; } .temp-units-celcius.active { transform: scale(0.9); } .temp-units-fahrenheit.inactive { transform: scale(0.4); } </code></pre> <h1 id="heading-javascript">JavaScript</h1> <p>Just 95 lines of code,</p> <p>Now, Let's write code to change the temperature value upon clicking the Celsius unit the entire header section and day section and the hourly section temp units having data attribute should be changed for this, I have defined a call back function in the add event listener which will listen to the click,</p> <h2 id="heading-event-listeners">Event Listeners,</h2> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> celci = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"[data-celcius]"</span>); <span class="hljs-keyword">let</span> fahren = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"[data-fahrenheit]"</span>); <span class="hljs-keyword">let</span> tempunitsfare; celci.addEventListener(<span class="hljs-string">"click"</span>, <span class="hljs-function">() =&gt;</span> { celci.classList.add(<span class="hljs-string">"active"</span>); fahren.classList.add(<span class="hljs-string">"inactive"</span>); convertTempunitsToC({ currentobj, dailyarr, hourlyobj }); changeunit(<span class="hljs-string">"C"</span>); }); </code></pre> <p>Now, define another call back function to revert to Fahrenheit Temp unit up on click using add event listener,</p> <pre><code class="lang-javascript">fahren.addEventListener(<span class="hljs-string">"click"</span>, <span class="hljs-function">() =&gt;</span> { celci.classList.remove(<span class="hljs-string">"active"</span>); fahren.classList.remove(<span class="hljs-string">"inactive"</span>); revertTempunitsToF({ currentobj, dailyarr, hourlyobj }); changeunit(<span class="hljs-string">"F"</span>); }); </code></pre> <h2 id="heading-fun-functions">Fun-Functions,</h2> <p>Now, define the functions and select the elements having Temperature and modify the innerText</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeunit</span>(<span class="hljs-params">value</span>) </span>{ tempunitsfare = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">"[data-tempunitsfare]"</span>); tempunitsfare.forEach(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> { e.textContent = value; }); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertTempunitsToC</span>(<span class="hljs-params"></span>) </span>{ convertTempCurrentWeather(currentobj); convertTempDailyWeather(dailyarr); convertTempHourlyWeather(hourlyobj); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertTempCurrentWeather</span>(<span class="hljs-params"></span>) </span>{ setValue(<span class="hljs-string">"current-temp"</span>, conversionToC(currentobj.currentTemp)); setValue(<span class="hljs-string">"current-high"</span>, conversionToC(currentobj.highTemp)); setValue(<span class="hljs-string">"current-fl-high"</span>, conversionToC(currentobj.highFeelsLike)); setValue(<span class="hljs-string">"current-low"</span>, conversionToC(currentobj.lowTemp)); setValue(<span class="hljs-string">"current-fl-low"</span>, conversionToC(currentobj.lowFeelsLike)); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertTempDailyWeather</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">let</span> dailydatatemp = <span class="hljs-built_in">document</span> .querySelector(<span class="hljs-string">"[data-day-section]"</span>) .querySelectorAll(<span class="hljs-string">"[data-temp]"</span>); dailydatatemp.forEach(<span class="hljs-function">(<span class="hljs-params">element, index</span>) =&gt;</span> { element.textContent = conversionToC(dailyarr[index].maxTemp); }); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertTempHourlyWeather</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">let</span> hourlydatatemps = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">"[data-hour-row]"</span>); hourlydatatemps.forEach(<span class="hljs-function">(<span class="hljs-params">element, index</span>) =&gt;</span> { element.querySelector(<span class="hljs-string">"[data-temp]"</span>).textContent = conversionToC( hourlyobj[index].temp ); element.querySelector(<span class="hljs-string">"[data-fl-temp]"</span>).textContent = conversionToC( hourlyobj[index].feelslike ); }); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">conversionToC</span>(<span class="hljs-params">value</span>) </span>{ <span class="hljs-keyword">return</span> (((value - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span>) / <span class="hljs-number">9</span>).toPrecision(<span class="hljs-number">2</span>); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">revertTempunitsToF</span>(<span class="hljs-params"></span>) </span>{ revertTempCurrentWeather(currentobj); revertTempDailyWeather(dailyarr); revertTempHourlyWeather(hourlyobj); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">revertTempCurrentWeather</span>(<span class="hljs-params"></span>) </span>{ setValue(<span class="hljs-string">"current-temp"</span>, currentobj.currentTemp); setValue(<span class="hljs-string">"current-high"</span>, currentobj.highTemp); setValue(<span class="hljs-string">"current-fl-high"</span>, currentobj.highFeelsLike); setValue(<span class="hljs-string">"current-low"</span>, currentobj.lowTemp); setValue(<span class="hljs-string">"current-fl-low"</span>, currentobj.lowFeelsLike); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">revertTempDailyWeather</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">let</span> dailydatatemp = <span class="hljs-built_in">document</span> .querySelector(<span class="hljs-string">"[data-day-section]"</span>) .querySelectorAll(<span class="hljs-string">"[data-temp]"</span>); dailydatatemp.forEach(<span class="hljs-function">(<span class="hljs-params">element, index</span>) =&gt;</span> { element.textContent = dailyarr[index].maxTemp; }); } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">revertTempHourlyWeather</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">let</span> hourlydatatemps = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">"[data-hour-row]"</span>); hourlydatatemps.forEach(<span class="hljs-function">(<span class="hljs-params">element, index</span>) =&gt;</span> { element.querySelector(<span class="hljs-string">"[data-temp]"</span>).textContent = hourlyobj[index].temp; element.querySelector(<span class="hljs-string">"[data-fl-temp]"</span>).textContent = hourlyobj[index].feelslike; }); } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed the CSS part and JavaScript part of adding the feature switching between celsius and Fahrenheit in my weather API project.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672828730603/7d84f701-ed4e-4efc-9c7f-461cabecb5f0.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> 1) In Fahrenheit unit,</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672828735567/16abc7c8-a92b-497a-b597-b5932fdfcc8a.png" alt class="image--center mx-auto" /></p> <p> 2) In Celsius unit,</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672828751831/2250c884-6500-4946-b9e2-b0ff305668d7.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-79</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-79</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Wed, 04 Jan 2023 10:53:38 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672828992394/00d70dcd-ca2e-4fca-8c46-f6f9e8ade077.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 78 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day78 of #100DaysOfCode, I am coding and explaining the 'How To Build A Weather App In JavaScript Without Needing A Server' project taught by [Web Dev Simplified]</p> <h1 id="heading-rendering-the-api-data">Rendering the API Data</h1> <p>After that, head to the main.js file,</p> <p>modify the .then function to call renderWether function,</p> <pre><code class="lang-javascript">.then( renderWeather ).catch(<span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>{ <span class="hljs-built_in">console</span>.error(e) alert(<span class="hljs-string">'Error getting weather'</span>) }) </code></pre> <p>Now, define the renderWeather function,</p> <p>and pass the current, daily and hourly objects,</p> <p>also, remove the blurred class from the body tag,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderWeather</span>(<span class="hljs-params">{ current, daily, hourly }</span>) </span>{ renderCurrentWeather(current); renderDailyWeather(daily); renderHourlyWeather(hourly); <span class="hljs-built_in">document</span>.body.classList.remove(<span class="hljs-string">'blurred'</span>) } </code></pre> <p>Define individual functions to render the data,</p> <p>First, define current weather to render data,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderCurrentWeather</span>(<span class="hljs-params">current</span>)</span>{ } </code></pre> <p>After that, Let's work on relaying the data in the current object to the HTML documents,</p> <p>current is an object with the properties returned by the function parseCurrentWeather() from the weather.js file,</p> <p>you can access an object's property using the syntax <code>objectname.propertyname</code>,</p> <pre><code class="lang-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'[data-current-temp]'</span>).textContent = current.currentTemp; </code></pre> <p>Instead of coding repetitive lines, define another function,</p> <p>this function takes the selector and value as arguments, and an optional object with a parent property and its default is document object,</p> <p>since we optionally would want to send an object hence it is placed in curly braces,</p> <p>use <code>`` </code> when passing selector for queryselector as it has become template literal,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setValue</span>(<span class="hljs-params">selector,value,{parent=document}={}</span>)</span>{ parent.querySelector(<span class="hljs-string">`[data-<span class="hljs-subst">${selector}</span>]`</span>).textContent = value } </code></pre> <p>Now, call the set value function and pass the arguments,</p> <pre><code class="lang-javascript">setValue(<span class="hljs-string">'current-temp'</span>,current.currentTemp) setValue(<span class="hljs-string">'current-high'</span>,current.highTemp) setValue(<span class="hljs-string">'current-fl-high'</span>,current.highFeelsLike) setValue(<span class="hljs-string">'current-low'</span>,current.lowTemp) setValue(<span class="hljs-string">'current-fl-low'</span>,current.lowFeelsLike) setValue(<span class="hljs-string">'current-wind'</span>,current.windSpeed) setValue(<span class="hljs-string">'current-precip'</span>,current.precip) </code></pre> <p>Then, define a const current icon variable,</p> <pre><code class="lang-javascript">currentIcon.src = getIconUrl(current.iconCode) </code></pre> <p>and define another function as we will call this function for daily and hourly functions,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIconUrl</span>(<span class="hljs-params">iconCode</span>)</span>{ <span class="hljs-keyword">return</span> <span class="hljs-string">`icon/<span class="hljs-subst">${iconCode}</span>.svg`</span> } </code></pre> <p>But the current object holding the iconCode is a number format which is getting from the API key,</p> <p>so we need to map this number of iconCode to a .svg file names,</p> <p>create a new iconMap.js file</p> <p>[</p> <p>we won't be using objects to assign the iconCode description because in objects the properties are string type.</p> <p>]</p> <p>create and export an icon map variable and define a function,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Icon_MAP = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>() </code></pre> <p>since a couple of icon codes property will have the same description to reduce the code in the few lines we are going to use a function,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addMapping</span>(<span class="hljs-params">values,icon</span>)</span>{ } </code></pre> <p>Also since a couple of icon codes have the same description, you are gonna use for each method to set the same description to the icon quotes which are returning from the API key</p> <p>the value argument is an array hence we are using for each method to set the icon to each index value of the array,</p> <p>remember for each method is used to only iterate over the values,</p> <pre><code class="lang-javascript">values.forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> { }); </code></pre> <p>Inside this, for each method, we are going to set that is map this value to the icon description,</p> <pre><code class="lang-javascript">Icon_MAP.set(value,icon) </code></pre> <p>Then, call the addMapping to map,</p> <p>Weather variable documentation WMO Weather interpretation codes (WW) <a target="_blank" href="https://open-meteo.com/en/docs/dwd-api">[link]</a></p> <pre><code class="lang-javascript">addMapping([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<span class="hljs-string">'sun'</span>) addMapping([<span class="hljs-number">2</span>],<span class="hljs-string">'cloud-sun'</span>) addMapping([<span class="hljs-number">3</span>],<span class="hljs-string">'cloud'</span>) addMapping([<span class="hljs-number">45</span>,<span class="hljs-number">48</span>],<span class="hljs-string">'smog'</span>) addMapping([<span class="hljs-number">51</span>,<span class="hljs-number">53</span>,<span class="hljs-number">55</span>,<span class="hljs-number">56</span>,<span class="hljs-number">57</span>,<span class="hljs-number">61</span>,<span class="hljs-number">63</span>,<span class="hljs-number">65</span>,<span class="hljs-number">66</span>,<span class="hljs-number">67</span>,<span class="hljs-number">80</span>,<span class="hljs-number">81</span>,<span class="hljs-number">82</span>],<span class="hljs-string">'cloud-showers-heavy'</span>) addMapping([<span class="hljs-number">71</span>,<span class="hljs-number">73</span>,<span class="hljs-number">75</span>,<span class="hljs-number">77</span>,<span class="hljs-number">85</span>,<span class="hljs-number">86</span>],<span class="hljs-string">'snowflake'</span>) addMapping([<span class="hljs-number">95</span>,<span class="hljs-number">96</span>,<span class="hljs-number">99</span>],<span class="hljs-string">'cloud-bolt'</span>) </code></pre> <p>If you console log you can see all the mapped values,</p> <pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(Icon_MAP.get(<span class="hljs-number">51</span>)) </code></pre> <h3 id="heading-code-mapampforeach-linkhttpswwwsololearncomcompiler-playgroundwmm4g771aa7w">Code: map&amp;foreach <a target="_blank" href="https://www.sololearn.com/compiler-playground/WMm4G771aA7w">[link]</a></h3> <p>Now, import the variable from map.js file in the main.js,</p> <p><strong><em><mark>Remember it is a named export so keep enclosed in the curly braces,</mark></em></strong></p> <p>only default exports variables are without curly braces,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">import</span> { getWeather } <span class="hljs-keyword">from</span> <span class="hljs-string">"./weather.js"</span>; </code></pre> <p>After that, in the getIconUrl function return wrap the iconCode with get method to access the description mapped to this iconCode,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIconUrl</span>(<span class="hljs-params">iconCode</span>)</span>{ <span class="hljs-keyword">return</span> <span class="hljs-string">`/public/icons/<span class="hljs-subst">${Icon_MAP.get(iconCode)}</span>.svg`</span> } </code></pre> <p>If you face any issue like the icon not displaying in the preview, check whether the svg directory path is mentioned correctly or not.</p> <p>After that, select the day section and card tempelate and assign them to new variables,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> dailySection = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'[data-day-section]'</span>) <span class="hljs-keyword">const</span> dayCardtemplate = <span class="hljs-built_in">document</span>.getElementById(day-card-section) </code></pre> <p>Then, define a function to render the daily function and pass the daily object,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderDailyWeather</span>(<span class="hljs-params">daily</span>)</span>{ dailySection.innerHTML = <span class="hljs-string">''</span> } </code></pre> <p>Now, use for each method to loop through the daily,</p> <p>use the cloneNode method set to true to clone HTML elements in template element,</p> <p>call the setvalue function and pass the temp value and the created element,</p> <p>use date-time format method to format and get just the weekday,</p> <p>also pass the iconCode property in dayily object to getIconUrl function and assign it to the element src,</p> <p>use append() method to add elements,</p> <pre><code class="lang-javascript">daily.forEach(<span class="hljs-function"><span class="hljs-params">day</span> =&gt;</span> { <span class="hljs-keyword">const</span> element = dayCardtemplate.content.cloneNode(<span class="hljs-literal">true</span>) setValue(<span class="hljs-string">'temp'</span>,day.maxTemp,{<span class="hljs-attr">parent</span>:element}) setValue(<span class="hljs-string">'date'</span>,DAY_FORMATTER.format(day.timestamp),{<span class="hljs-attr">parent</span>:element}) element.querySelector(<span class="hljs-string">'[data-icon]'</span>).src = getIconUrl(day.iconCode) dailySection.appendChild(element) }); </code></pre> <p>If you want to understand follow the below link where I have explained adding the template by breaking it down in a simple way,</p> <h3 id="heading-code-templatehtmlampjs-linkhttpswwwsololearncomcompiler-playgroundwqcvmfptbxwq">Code: templatehtml&amp;js <a target="_blank" href="https://www.sololearn.com/compiler-playground/WQCVMfPTBXwq">[link]</a></h3> <p>After that, define a function to render the hourly function and pass an hourly object,</p> <p>the code is similar to the daily section as we will create elements and appending to the HTML hourly section,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderHourlyWeather</span>(<span class="hljs-params">hourly</span>) </span>{ hourlySection.innerHTML = <span class="hljs-string">""</span>; } </code></pre> <p>and call the setvalue function and pass the temp, fL temp, wind, precip values,</p> <pre><code class="lang-javascript">hourly.forEach(<span class="hljs-function">(<span class="hljs-params">hour</span>) =&gt;</span> { <span class="hljs-keyword">const</span> element = hourRowTemplate.content.cloneNode(<span class="hljs-literal">true</span>); setValue(<span class="hljs-string">"temp"</span>, hour.temp, { <span class="hljs-attr">parent</span>: element }); setValue(<span class="hljs-string">"day"</span>, DAY_FORMATTER.format(hour.timestamp), { <span class="hljs-attr">parent</span>: element }); setValue(<span class="hljs-string">"time"</span>, HOUR_FORMATTER.format(hour.timestamp), { <span class="hljs-attr">parent</span>: element }); setValue(<span class="hljs-string">"fl-temp"</span>, hour.feelslike, { <span class="hljs-attr">parent</span>: element }); setValue(<span class="hljs-string">"wind"</span>, hour.windSpeed, { <span class="hljs-attr">parent</span>: element }); setValue(<span class="hljs-string">"precip"</span>, hour.precip, { <span class="hljs-attr">parent</span>: element }); element.querySelector(<span class="hljs-string">"[data-icon]"</span>).src = getIconUrl(hour.iconCode); hourlySection.append(element); }); </code></pre> <h1 id="heading-getting-the-users-location">Getting the user's location</h1> <p>Lastly, All this data is displayed according to the user location,</p> <p>use get current position() methodand pass two functions in the event of success and failure as arguments,</p> <pre><code class="lang-javascript">navigator.geolocation.getCurrentPosition(positionSuccess,positionError) </code></pre> <p>Now, define the success function and copy the getweather code,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">positionSuccess</span>(<span class="hljs-params">{ coords }</span>) </span>{ geoloc.remove(); getWeather( coords.latitude, coords.longitude, <span class="hljs-built_in">Intl</span>.DateTimeFormat().resolvedOptions().timeZone, tempunit() ) .then(renderWeather) .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.error(e); alert(<span class="hljs-string">"Error getting weather"</span>); }); } </code></pre> <p>Then, define the error function in the event of location blocked,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">positionError</span>(<span class="hljs-params"></span>) </span>{ geoloc.classList.remove(<span class="hljs-string">'none'</span>); <span class="hljs-keyword">let</span> latit = (<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">100</span>).toPrecision(<span class="hljs-number">7</span>) <span class="hljs-keyword">let</span> longi = (<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">100</span>).toPrecision(<span class="hljs-number">7</span>) <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> { getWeather( latit, longi, <span class="hljs-built_in">Intl</span>.DateTimeFormat().resolvedOptions().timeZone, tempunit() ) .then(renderWeather) .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.error(e); alert(<span class="hljs-string">"Error getting weather"</span>); }); geoloc.remove(); }, <span class="hljs-number">2000</span>); } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed Transforming the API Data and getting the user's location of the weather API project.</p> <p>Finally, That brings the completion of a Full Fledged weather app. Thanks, kyle. Learned a lot like getting API data using Axios library and de structuring and lot of function calls.</p> <p>Not yet completed For the weather API project that kyle created, I am gonna scale by adding features like,</p> <ol> <li><p>Ability to Switch between temperature units Fahrenheit and Celcius,</p> </li> <li><p>Import Geo-Location data using Axios Library.</p> </li> <li><p>Displaying " Getting Random Location..." prompt when user location is disabled,</p> </li> <li><p>Exporting the random location Geo-Location Info to Front-End.</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>Code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672734715241/7e5d0eda-65a0-4ffc-a6b7-0948878b47ce.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672734722477/6b1e208e-4b1a-451c-ace8-d13c7e4646fa.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutubew0veoghdmpq">Source: Code with WebDevSimplified [<a target="_blank" href="https://youtu.be/w0VEOghdMpQ">click</a>]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-78</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-78</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Tue, 03 Jan 2023 08:45:01 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672735362222/c5fc9a91-8cb3-427b-9112-f481d1afaeaa.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 77 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day77 of #100DaysOfCode, I am coding and explaining the 'How To Build A Weather App In JavaScript Without Needing A Server' project taught by [Web Dev Simplified]</p> <h1 id="heading-transforming-the-api-data">Transforming the API Data</h1> <p>Processing the data that is returning from API URL is an imperative step,</p> <p>use .then and return the current, daily and hourly data,</p> <pre><code class="lang-javascript">.then(<span class="hljs-function">(<span class="hljs-params">{data}</span>)=&gt;</span>{ <span class="hljs-keyword">return</span> { <span class="hljs-attr">current</span>:parseCurrentWeather(data), <span class="hljs-attr">daily</span>:parseDailyWeather(data), <span class="hljs-attr">hourly</span>:parseHourlyWeather(data) } }) </code></pre> <p>now define the parse current weather function,</p> <p>and return the object data that would end up in the header section of the weatherAPI project as defined in the HTML file,</p> <p>these are the different variables we need from the API data,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">return</span>{ currentTemp, <span class="hljs-attr">hightemp</span>:, lowTemp:, highFeelslike: , lowFeelslike: , windSpeed , precip, iconCode } </code></pre> <p>After defining what we need to return now destructure the data of current weather,</p> <p>To get them from the API data, we a concept called object destructuring,</p> <p>The left-side keys should match the right-side object,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> {<span class="hljs-attr">temperature</span>: currentTemp,<span class="hljs-attr">windspeed</span>:windSpeed,<span class="hljs-attr">weathercode</span>:iconCode} = current_weather </code></pre> <p>then destructure the data of daily obj,</p> <pre><code class="lang-javascript"> <span class="hljs-keyword">const</span> { <span class="hljs-attr">temperature_2m_max</span>: [maxTemp], <span class="hljs-attr">temperature_2m_min</span>: [minTemp], <span class="hljs-attr">apparent_temperature_max</span>: [maxFeelslike], <span class="hljs-attr">apparent_temperature_min</span>: [minFeelslike], <span class="hljs-attr">precipitation_sum</span>: [precip] } = daily </code></pre> <p>The below code link exercises created by me will clear any doubts if you have on destructuring when the right side obj has an array as the value for a key.</p> <h2 id="heading-code-destructurearrayfrmobj-clickhttpswwwsololearncomcompiler-playgroundw0r7av63qr3b">Code: destructurearrayfrmobj <a target="_blank" href="https://www.sololearn.com/compiler-playground/W0r7AV63QR3B">[click]</a></h2> <p>Now, assign the destructed data values to the returning variables,</p> <p>Use Math.round() method to roundoff,</p> <pre><code class="lang-javascript"> <span class="hljs-keyword">return</span> { <span class="hljs-attr">currentTemp</span>: <span class="hljs-built_in">Math</span>.round(currentTemp), <span class="hljs-attr">hightemp</span>: <span class="hljs-built_in">Math</span>.round(maxTemp), <span class="hljs-attr">lowTemp</span>: <span class="hljs-built_in">Math</span>.round(minTemp), <span class="hljs-attr">highFeelsLike</span>: <span class="hljs-built_in">Math</span>.round(maxFeelslike), <span class="hljs-attr">lowFeelsLike</span>: <span class="hljs-built_in">Math</span>.round(minFeelslike), <span class="hljs-attr">windSpeed</span>: <span class="hljs-built_in">Math</span>.round(windSpeed), <span class="hljs-attr">precip</span>: <span class="hljs-built_in">Math</span>.round(precip*<span class="hljs-number">100</span>)/<span class="hljs-number">100</span>, iconCode, }; </code></pre> <p>Now, parse the data for the daily weather function,</p> <p>pass the daily obj in data obj as an argument,</p> <p>we need the time array from the daily obj,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseDailyWeather</span>(<span class="hljs-params">{daily}</span>)</span>{ <span class="hljs-keyword">return</span> daily.time } </code></pre> <p>the above code will return only the time array but we need other array values for each index of the time array,</p> <p>Then, map over the time value array inside the daily object,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">return</span> daily.time.map(<span class="hljs-function">(<span class="hljs-params">time, index</span>) =&gt;</span> { }); </code></pre> <p>I have explained the difference between forEach() method and map() method in the link below.</p> <h2 id="heading-code-foreachampmap-clickhttpswwwsololearncomcompiler-playgroundws3xgjfktq4o">Code: foreach&amp;map <a target="_blank" href="https://www.sololearn.com/compiler-playground/Ws3xgJfKtq4o">[click]</a></h2> <p>Now, the index value of the time array will be sent inside and define the return values that you want from other arrays for this index,</p> <p>API returns time in seconds but JS expects in ms, 1 sec = 1000ms,</p> <p>map method expects a return statement</p> <pre><code class="lang-javascript"><span class="hljs-keyword">return</span> { <span class="hljs-attr">timestamp</span>: time *<span class="hljs-number">1000</span>, <span class="hljs-attr">iconcode</span>: daily.weathercode[index], <span class="hljs-attr">maxTemp</span>: <span class="hljs-built_in">Math</span>.round(daily.temperature_2m_max[index]), } </code></pre> <p>Lastly, parse the data for the hourly weather,</p> <p>pass the hourly argument and current weather as argumet,</p> <p>the reason we are passing current weather object because we need to access the current time,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseHourlyWeather</span>(<span class="hljs-params">{hourly,current_weather}</span>)</span>{ <span class="hljs-keyword">return</span> hourly.time.map(<span class="hljs-function">(<span class="hljs-params">time,index</span>)=&gt;</span>{ <span class="hljs-keyword">return</span>{ <span class="hljs-attr">timestamp</span>: time *<span class="hljs-number">1000</span>, <span class="hljs-attr">iconcode</span>: hourly.weathercode[index], <span class="hljs-attr">temp</span>: <span class="hljs-built_in">Math</span>.round(hourly.temperature_2m[index]), <span class="hljs-attr">feelslike</span>: <span class="hljs-built_in">Math</span>.round(hourly.apparent_temperature[index]), <span class="hljs-attr">windSpeed</span>: <span class="hljs-built_in">Math</span>.round(hourly.windspeed_10m[index]), <span class="hljs-attr">precip</span>: <span class="hljs-built_in">Math</span>.round(hourly.precipitation[index]*<span class="hljs-number">100</span>)/<span class="hljs-number">100</span>, } }) } </code></pre> <p>Now, define to start the hourly at the current time,</p> <p>use filter() method to</p> <pre><code class="lang-javascript">.filter(<span class="hljs-function">(<span class="hljs-params">{ timestamp }</span>) =&gt;</span> timestamp &gt;= current_weather.time * <span class="hljs-number">1000</span>); </code></pre> <p>I have explained how to filter an array containing objects using the property of this object,</p> <p>kyle passed <code>{ timestamp }</code> as an implicit argument to filter method which made me think for hours,</p> <p>You can see the arguments in the function <code>parseHourlyWeather({ hourly, current_weather })</code> definition while calling it we sent <code>parseDailyWeather(data)</code> data argument, but the data object contains current_weather obj, daily obj, hourly obj. Hence Kyle passed only the required objects in exclusive functions.</p> <p>you can explicitly write the code to understand,</p> <pre><code class="lang-javascript">.filter(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x.timestamp &gt;= current_weather.time * <span class="hljs-number">1000</span>); </code></pre> <p>I explained the filter method with also the explicit way and implicit way.</p> <p>Below Image shows the filter() method working,</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672656463017/55be071b-9d22-49e2-a363-a84628e2db99.png" alt class="image--center mx-auto" /></p> <h2 id="heading-code-filterarrayclickhttpswwwsololearncomcompiler-playgroundwv3byyw3917s">Code: filterarray<a target="_blank" href="https://www.sololearn.com/compiler-playground/WV3byYw3917S">[click]</a></h2> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed Transforming the API Data of the weather API project.</p> <p>Explained destructure array from obj,</p> <p>Explained foreach &amp; map methods</p> <p>Explained filter array method</p> <h1 id="heading-code">Code</h1> <ol> <li><p>Code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672656290912/e2c9b2c9-4069-4127-ae28-b49620eb660c.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672656301271/1f5464e9-3a52-4ab4-88ad-4b6b9e69a0a8.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutubew0veoghdmpq">Source: Code with WebDevSimplified [<a target="_blank" href="https://youtu.be/w0VEOghdMpQ">click</a>]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-77</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-77</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Mon, 02 Jan 2023 10:52:21 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672656343718/a569cc2d-e607-4970-8bc2-4f7fb977d080.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 76 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day76 of #100DaysOfCode, I am coding and explaining the 'How To Build A Weather App In JavaScript Without Needing A Server' project taught by [Web Dev Simplified]</p> <h1 id="heading-html-templates">HTML Templates</h1> <p>All that is left to create in the HTML file are templates for the day card, hour table rows,</p> <p>the reason we are creating a template for the day card and hour table rows is that JavaScript dynamically picks this day Card template and creates duplicates according to the data,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"day-card-template"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hour-row-template"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span> </code></pre> <p>Modify the HTML after copying the day card elements,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-icon</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card-day"</span> <span class="hljs-attr">data-date</span>&gt;</span>Monday<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-temp</span>&gt;</span>32<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Modify the HTML after copying the table row elements,</p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hour-row"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span> <span class="hljs-attr">data-day</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-time</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-icon</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>TEMP<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-temp</span>&gt;</span>32<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>FL TEMP<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-fl-temp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>WIND<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-wind</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"value-sub-info"</span>&gt;</span>kmph<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>PRECIP<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-precip</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"value-sub-info"</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span> </code></pre> <p>Finally, completed the HTML and CSS part for the Weather API project.</p> <h1 id="heading-connecting-to-api">Connecting to API</h1> <p>Now, move on to JavaScript to export the info using the API,</p> <p>create a weather.js file,</p> <p>write a function to export the latitude, longitude, timezone,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getWeather</span>(<span class="hljs-params">lat,lon,timezone</span>)</span>{ } </code></pre> <p>Go to the weather open meteo site <a target="_blank" href="https://open-meteo.com/en/docs">[link]</a>and select the required hourly variables, daily weather variables and parameter timezone,</p> <p>In the JavaScript, we are gonna get the time zone dynamically according to the user location,</p> <p>Finally, click the API URL and copy the JavaScript file URL from the search bar, <a target="_blank" href="https://api.open-meteo.com/v1/forecast?latitude=52.52&amp;longitude=13.41&amp;hourly=temperature_2m,apparent_temperature,precipitation,weathercode,windspeed_10m&amp;daily=weathercode,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum&amp;current_weather=true&amp;temperature_unit=fahrenheit&amp;precipitation_unit=inch&amp;timeformat=unixtime&amp;timezone=America%2FChicago">[link]</a></p> <p>Now, We need to dynamically add the latitude and othe hourly variables..etc to pass into our getWeather function as arguments,</p> <p>To make it easier, use Axios library,</p> <p>Axios is a fetching library that makes fetching easier,</p> <pre><code class="lang-javascript">npm i axios </code></pre> <p>After installing axios library, import it using</p> <pre><code class="lang-javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span> </code></pre> <p>Instead, use the following link and place it below the starting body tag,</p> <pre><code class="lang-javascript">&lt;script src=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"</span>&gt;&lt;/script&gt; </code></pre> <p>Now, pass the URL inside the getWeather function using the Axios library get method,</p> <p>only pass the start portion of the URL i.e before the query parameters,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getWeather</span>(<span class="hljs-params">lat,lon,timezone</span>)</span>{ axios.get(<span class="hljs-string">'https://api.open-meteo.com/v1/forecast'</span>) } </code></pre> <p>Now, define all the query parameters</p> <pre><code class="lang-javascript"> axios.get(<span class="hljs-string">'https://api.open-meteo.com/v1/forecast'</span>, { <span class="hljs-attr">params</span>:{ <span class="hljs-attr">lattitude</span>: lat, <span class="hljs-attr">longitude</span>: lon, timezone, } }) </code></pre> <p>After that, remove the parameters from the URL that we defined in the above code and copy the URL and paste it at the end of the forecast,</p> <p>To test the code return the axios.get()</p> <p>and head to the main.js file make sure to import the getWeather function from the weather.js file,</p> <p>use curly braces for named exports,</p> <p>since we are importing another js file in main.js file put the type module attribute in the script tag in HTML,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">import</span> {getWeather} <span class="hljs-keyword">from</span> <span class="hljs-string">'./weather'</span> </code></pre> <p>now pass the latitude and longitude and time zone,</p> <pre><code class="lang-javascript">getWeather(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-built_in">Intl</span>.DateTimeFormat().resolvedOptions().timeZone).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>{ <span class="hljs-built_in">console</span>.log(res.data) }) </code></pre> <p>Inside the console of the web browser you should see the output,</p> <pre><code class="lang-javascript"><span class="hljs-built_in">Object</span> <span class="hljs-attr">current_weather</span>: temperature: <span class="hljs-number">83</span> <span class="hljs-attr">time</span>: <span class="hljs-number">1672318800</span> <span class="hljs-attr">weathercode</span>: <span class="hljs-number">0</span> <span class="hljs-attr">winddirection</span>: <span class="hljs-number">26</span> <span class="hljs-attr">windspeed</span>: <span class="hljs-number">18.8</span> ... </code></pre> <h1 id="heading-problems">Problems</h1> <p>problem -1</p> <p>Faced an issue where Axios is not importing in weather.js file.</p> <p>The solution kept cdn file below the starting body tag.</p> <p>problem -2</p> <p>Faced an issue where importing weather.js file is not received by main.js file.</p> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed the writing portion of HTML Templates and Connecting to the API of the weather API project.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672549856834/ade6d35a-2d0b-44db-bb1e-a2140ce69d04.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672549866938/1c6f9a79-8408-4c26-8285-0eee7438869b.png" alt class="image--center mx-auto" /></p> <p> output</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672549877183/7fd487f1-e3c8-422d-8fd0-429b9036483b.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutubew0veoghdmpq">Source: Code with WebDevSimplified [<a target="_blank" href="https://youtu.be/w0VEOghdMpQ">click</a>]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-76</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-76</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sun, 01 Jan 2023 05:16:07 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672550087976/11d3ed28-4ea9-4f08-99da-db009ca3688e.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 75 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day75 of #100DaysOfCode, I am coding and explaining the 'How To Build A Weather App In JavaScript Without Needing A Server' project taught by [Web Dev Simplified]</p> <h1 id="heading-hour-section-html">Hour section HTML</h1> <p>Create a table with hour section class,</p> <pre><code class="lang-css">&lt;<span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">hour-section</span>"&gt; &lt;/<span class="hljs-selector-tag">table</span>&gt; </code></pre> <p>create tbody element with data attribute,</p> <pre><code class="lang-css">&lt;<span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">hour-section</span>"&gt; &lt;<span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">data-hour-section</span>&gt; &lt;/<span class="hljs-selector-tag">tbody</span>&gt; &lt;/<span class="hljs-selector-tag">table</span>&gt; </code></pre> <p>Now, create tr - table row and create td elements as a child,</p> <pre><code class="lang-css">&lt;<span class="hljs-selector-tag">td</span>&gt;&lt;/<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">td</span>&gt;&lt;/<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">td</span>&gt;&lt;/<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">td</span>&gt;&lt;/<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">td</span>&gt;&lt;/<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">td</span>&gt;&lt;/<span class="hljs-selector-tag">td</span>&gt; </code></pre> <p>Now, create an info group class for the div with the label class as a child,</p> <pre><code class="lang-css">&lt;<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">info-group</span>"&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">label</span>"&gt;<span class="hljs-selector-tag">Thursday</span>&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;<span class="hljs-selector-tag">div</span>&gt;3 <span class="hljs-selector-tag">PM</span>&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">td</span>&gt; </code></pre> <p>Now, create a img element and give it a class</p> <pre><code class="lang-css">&lt;<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">img</span> <span class="hljs-selector-tag">src</span>="/<span class="hljs-selector-tag">public</span>/<span class="hljs-selector-tag">icons</span>/<span class="hljs-selector-tag">cloud</span><span class="hljs-selector-class">.svg</span>" <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">weather-icon</span>" <span class="hljs-selector-tag">alt</span>=""&gt; &lt;/<span class="hljs-selector-tag">td</span>&gt; </code></pre> <p>Repeat the process for the other td elements,</p> <pre><code class="lang-css"> &lt;<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">info-group</span>"&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">label</span>"&gt;<span class="hljs-selector-tag">TEMP</span>&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;<span class="hljs-selector-tag">div</span>&gt;31&amp;<span class="hljs-selector-tag">deg</span>;&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">info-group</span>"&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">label</span>"&gt;<span class="hljs-selector-tag">FL</span> <span class="hljs-selector-tag">TEMP</span>&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;<span class="hljs-selector-tag">div</span>&gt;31&amp;<span class="hljs-selector-tag">deg</span>;&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">info-group</span>"&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">label</span>"&gt;<span class="hljs-selector-tag">WIND</span>&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;<span class="hljs-selector-tag">div</span>&gt;9<span class="hljs-selector-tag">kmph</span>&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">td</span>&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">info-group</span>"&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">label</span>"&gt;<span class="hljs-selector-tag">PRECIP</span>&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;<span class="hljs-selector-tag">div</span>&gt;0<span class="hljs-selector-class">.1in</span>&lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">td</span>&gt; </code></pre> <h1 id="heading-hour-section-css">Hour section CSS</h1> <p>Now, style hour section to take full screen size,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.hour-section</span>{ <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">border-spacing</span>: <span class="hljs-number">0</span>; } </code></pre> <p>Now, style table rows,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.hour-row</span>{ <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">200</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">75%</span>); } </code></pre> <p>After that, to get different background color use nth-child() CSS selector,</p> <p>every even child,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.hour-row</span><span class="hljs-selector-pseudo">:nth-child(2n)</span>{ <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">200</span>, <span class="hljs-number">60%</span>, <span class="hljs-number">70%</span>); } </code></pre> <p>Now, select each td element inside hour row class,</p> <p>use <code>&gt;</code> to select a parent's child,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.hour-row</span> &gt; <span class="hljs-selector-tag">td</span>{ <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.25rem</span> .<span class="hljs-number">5rem</span>; } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed the writing portion of the Hour section HTML and Styling CSS part of the weather API project.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672466566390/12587e63-7bca-4170-b413-140ca6204092.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672466629316/546ad2f1-2568-4ade-9710-eab166f348df.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutubew0veoghdmpq">Source: Code with WebDevSimplified [<a target="_blank" href="https://youtu.be/w0VEOghdMpQ">click</a>]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-75</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-75</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sat, 31 Dec 2022 06:15:05 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672467270998/f79db29b-f3c3-4aa8-9bef-a03c08d63299.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 74 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day74 of #100DaysOfCode, I am coding and explaining the 'How To Build A Weather App In JavaScript Without Needing A Server' project taught by [Web Dev Simplified]</p> <h1 id="heading-day-section-html">Day section HTML</h1> <p>Now, create a day section with data attribute to select in JS,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-section"</span> <span class="hljs-attr">data-day-section</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span> </code></pre> <p>Then, create a card with an image and child divs for data inside,</p> <p>which will be used as a template later,</p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/public/icons/cloud.svg"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card-day"</span>&gt;</span>Monday<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>32<span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>repeat it</p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/public/icons/cloud.svg"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card-day"</span>&gt;</span>Tuesday<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>32<span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/public/icons/cloud.svg"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card-day"</span>&gt;</span>Wednesday<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>32<span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/public/icons/cloud.svg"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card-day"</span>&gt;</span>Thursday<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>32<span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/public/icons/cloud.svg"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card-day"</span>&gt;</span>Friday<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>32<span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/public/icons/cloud.svg"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"day-card-day"</span>&gt;</span>Saturday<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>32<span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <h1 id="heading-day-section-css">Day section CSS</h1> <p>Now, Style the day section,</p> <p>use a display grid to place the cards,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.day-section</span>{ <span class="hljs-attribute">display</span>: grid; <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit,<span class="hljs-number">75px</span> ); <span class="hljs-attribute">gap</span>: <span class="hljs-number">0.5rem</span>; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span>; } </code></pre> <p>Now, style the card itself,</p> <p>use display flex column and align-items center so that all the dips will appear in one column and centre,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.day-card</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">flex-direction</span>: column; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">hsl</span>(<span class="hljs-number">200</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">10%</span>); <span class="hljs-attribute">border-radius</span>: .<span class="hljs-number">25rem</span>; <span class="hljs-attribute">padding</span>: .<span class="hljs-number">25rem</span>; } </code></pre> <p>Now, style the day of the card, as it is overflowing,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.day-card-day</span>{ <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">75rem</span>; <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">200</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">20%</span>); <span class="hljs-attribute">margin-top</span>: .<span class="hljs-number">5rem</span>; } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed the writing portion of the Day section HTML and Styling CSS part of the weather API project.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672396780970/80b7c08e-e42e-4e74-8b31-54287bc956a8.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672396795359/9d02ae9b-09fd-4a60-b507-43cd9b11d226.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutubew0veoghdmpq">Source: Code with WebDevSimplified [<a target="_blank" href="https://youtu.be/w0VEOghdMpQ">click</a>]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-74</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-74</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Fri, 30 Dec 2022 10:45:44 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672397097026/22be9d5d-a81d-45e8-bcff-9f1da99a0a8b.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 73 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day73 of #100DaysOfCode, Practiced array and object destructuring, I am coding and explaining the 'How To Build A Weather App In JavaScript Without Needing A Server' project taught by [Web Dev Simplified]</p> <h3 id="heading-array-and-object-destructuring">Array and object destructuring</h3> <p>From an array to an object,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> books = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] <span class="hljs-keyword">let</span> shelf = { <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span> } shelf = {<span class="hljs-attr">a</span>:books[<span class="hljs-number">0</span>],<span class="hljs-attr">b</span>:books[<span class="hljs-number">1</span>]} <span class="hljs-built_in">console</span>.log(shelf) </code></pre> <h4 id="heading-swapping-variables">Swapping variables,</h4> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> books = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] <span class="hljs-keyword">let</span> shelf = { <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span> } shelf = {<span class="hljs-attr">a</span>:books[<span class="hljs-number">0</span>],<span class="hljs-attr">b</span>:books[<span class="hljs-number">1</span>]} <span class="hljs-built_in">console</span>.log(shelf) shelf = {<span class="hljs-attr">a</span>:books[<span class="hljs-number">1</span>],<span class="hljs-attr">b</span>:books[<span class="hljs-number">0</span>]} <span class="hljs-built_in">console</span>.log(shelf) </code></pre> <p>using an arrow function,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] } <span class="hljs-keyword">let</span> books = f() <span class="hljs-keyword">let</span> shelf = { <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span> } shelf = {<span class="hljs-attr">a</span>:books[<span class="hljs-number">0</span>],<span class="hljs-attr">b</span>:books[<span class="hljs-number">1</span>]} <span class="hljs-built_in">console</span>.log(shelf) </code></pre> <p>storing array,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> books = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] <span class="hljs-keyword">let</span> shelf = { <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span> } shelf = {<span class="hljs-attr">a</span>:books,<span class="hljs-attr">b</span>:books[<span class="hljs-number">1</span>]} <span class="hljs-built_in">console</span>.log(shelf) <span class="hljs-built_in">console</span>.log(shelf.a) </code></pre> <h2 id="heading-code-objdestru-linkhttpswwwsololearncomcompiler-playgroundwschwhl0xwct">Code: objdestru <a target="_blank" href="https://www.sololearn.com/compiler-playground/WSChWhl0xWCT">[link]</a></h2> <h1 id="heading-weather-app">Weather app</h1> <h1 id="heading-header-css">Header CSS</h1> <p>styling before and after elements using box-sizing</p> <pre><code class="lang-css">*,*<span class="hljs-selector-pseudo">::after</span>,*<span class="hljs-selector-pseudo">::before</span>{ <span class="hljs-attribute">box-sizing</span>: border-box; } </code></pre> <p>styling the body, set the background margin to zero and set the background color,</p> <p>text color and font family,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">body</span>{ <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">200</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">85%</span>); <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">200</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">10%</span>); <span class="hljs-attribute">font-family</span>: sans-serif; } </code></pre> <p>let's style our header elements,</p> <p>used display flex so that the right and left are showing up next to each other like adjacent to each other,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">header</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">align-items</span>: center; } </code></pre> <p>now style the header left section,</p> <p>differentiate between the left header and right header section use the border right property,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.header-left</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0.5rem</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5rem</span>; <span class="hljs-attribute">border-right</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">hsl</span>(<span class="hljs-number">200</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">10%</span>); } </code></pre> <p>now style the weather icon,</p> <p>use object-fit property and content property value to maintain the actual aspect ratio of the icon,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.weather-icon</span>{ <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">object-fit</span>: contain; } </code></pre> <p>now we want this whether icon in the left section to be large but compared to the other weather icons now style,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.weather-icon</span><span class="hljs-selector-class">.large</span>{ <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>; } </code></pre> <p>now style the temperature span in the left header section,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.header-current-temp</span>{ <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">1rem</span>; } </code></pre> <p>Now, Style the right header section,</p> <p>use display grid template columns property and grid template rows property,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.header-right</span>{ <span class="hljs-attribute">display</span>: grid; <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>; <span class="hljs-attribute">justify-content</span>: space-around; <span class="hljs-attribute">gap</span>: <span class="hljs-number">0.5rem</span>; <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, auto); <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, auto); } </code></pre> <p>new style infogroup sections which are inside the right head and section,</p> <p>use display flex and flex direction column and alliance center,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.info-group</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">flex-direction</span>: column; <span class="hljs-attribute">align-items</span>: center; } </code></pre> <p>Now, style the labels in these info groups,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.label</span>{ <span class="hljs-attribute">text-transform</span>: uppercase; <span class="hljs-attribute">font-weight</span>: bold; <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">6rem</span>; <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">200</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">20%</span>); } </code></pre> <p>Now, Style the units,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.value-sub-info</span>{ <span class="hljs-attribute">font-weight</span>: lighter; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.75rem</span>; } </code></pre> <p>Now, to get blurred out page when refreshed due to slow internet,</p> <p>Add the blurred class the body and the style now, and over flow hidden just so we can't scroll,</p> <p>remove the class, for now, we will add JavaScript,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.blurred</span>{ <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">3px</span>); <span class="hljs-attribute">overflow</span>: hidden; } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>Practiced array and object destructuring, I completed the writing portion of Styling CSS for the header part of the weather API project.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672304618436/49887876-7aa1-4497-99a2-60175640aed3.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672304629777/d4272133-94fc-40b7-878c-8488c13f4290.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutubew0veoghdmpq">Source: Code with WebDevSimplified [<a target="_blank" href="https://youtu.be/w0VEOghdMpQ">click</a>]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-73</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-73</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Thu, 29 Dec 2022 09:48:16 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672304649226/e6bfdce4-1256-4f80-a1d6-3241c7ea0d69.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 72 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day72 of #100DaysOfCode, I practiced Destructuring assignment and I am coding and explaining the 'How To Build A Weather App In JavaScript Without Needing A Server' project taught by [Web Dev Simplified]</p> <h1 id="heading-destructuring-assignment">Destructuring assignment</h1> <p>Practicing JS Destructuring assignment,</p> <p>The traditional way of assigning error values to newly created variables,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>] <span class="hljs-keyword">const</span> first = arr[<span class="hljs-number">0</span>], second = arr[<span class="hljs-number">1</span>], third = arr[<span class="hljs-number">2</span>], fourth = arr[<span class="hljs-number">3</span>] <span class="hljs-built_in">console</span>.log(first,second,third) </code></pre> <p>Now, using Destructuring assignment</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> [one,two,three] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-built_in">console</span>.log(one,two,three) </code></pre> <p>Using the rest operator,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> [a,...b] = arr <span class="hljs-built_in">console</span>.log(a,b) </code></pre> <p>skipping certain value or obtain a specific values of an array,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> [t,,v] = arr <span class="hljs-built_in">console</span>.log(t,v) </code></pre> <p>putting default value</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> arr2 = [,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>] <span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-keyword">const</span> [def = <span class="hljs-string">'y'</span>,c,q] = arr2 <span class="hljs-built_in">console</span>.log(def,c,q) </code></pre> <p>rest operator,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> array = [<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">46</span>,<span class="hljs-number">78</span>,<span class="hljs-number">37</span>,<span class="hljs-number">86</span>,<span class="hljs-number">79</span>] <span class="hljs-keyword">const</span> [a,b,...[c,d]] = array <span class="hljs-built_in">console</span>.log( a,b ) <span class="hljs-built_in">console</span>.log( c,d ) </code></pre> <p>object Destructuring</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> person = { <span class="hljs-attr">a</span>: <span class="hljs-number">23</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">35</span> } <span class="hljs-keyword">const</span> {a,b} = person <span class="hljs-built_in">console</span>.log(a,b) </code></pre> <p>destructuring object and assigning into an array,</p> <p>the below code will give error</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> array = [] <span class="hljs-keyword">let</span> person = { <span class="hljs-attr">a</span>: <span class="hljs-number">23</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">35</span> } <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hi'</span>) ({ <span class="hljs-attr">a</span>: array[<span class="hljs-number">0</span>], <span class="hljs-attr">b</span>: array[<span class="hljs-number">1</span>] } = person); <span class="hljs-built_in">console</span>.log(array) </code></pre> <p>to fix use <code>;</code> the <code>( ... )</code> expression needs to be preceded by a semicolon</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> array = [] <span class="hljs-keyword">let</span> person = { <span class="hljs-attr">a</span>: <span class="hljs-number">23</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">35</span> } <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hi'</span>); ({ <span class="hljs-attr">a</span>: array[<span class="hljs-number">0</span>], <span class="hljs-attr">b</span>: array[<span class="hljs-number">1</span>] } = person); <span class="hljs-built_in">console</span>.log(array) </code></pre> <h2 id="heading-code-object-destructuring-linkhttpswwwsololearncomcompiler-playgroundwbqbdc56e1ls"><strong>Code: Object Destructuring [</strong><a target="_blank" href="https://www.sololearn.com/compiler-playground/WBqbdC56e1ls"><strong>link</strong></a><strong>]</strong></h2> <p>Now,</p> <h1 id="heading-weather-app-project"><strong>Weather App project</strong></h1> <h1 id="heading-header-html">Header HTML</h1> <p>Write a header element containing two parts, i.e left and right</p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header-left"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header-right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> </code></pre> <p>The left weather icon is a large icon and give a data attribute to easily change the source,</p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weather-icon large"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/public/icons/sun.svg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">data-current-icon</span>&gt;</span> </code></pre> <p>Inside this left header div display a current temperature,</p> <p>use span to differentiate the temperature number and use tp display the degree symbol</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-current-temp</span>&gt;</span>31<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span> </code></pre> <p>Now we need to create 6 sections inside the right header,</p> <p>use a CSS grid property to lay them out in CSS styling,</p> <p>Inside this right header place info groups,</p> <p>inside each info group a div label, a span and a degree symbol if its a temperature,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header-right"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>High<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-current-high</span>&gt;</span>32<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>FL High<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-current-fl-high</span>&gt;</span>27<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>Wind<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-current-wind</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"value-sub-info"</span>&gt;</span>kmph<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>Low<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-current-low</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>FL Low<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-current-fl-low</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;deg;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"info-group"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label"</span>&gt;</span>Precip<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-current-precip</span>&gt;</span>0.1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"value-sub-info"</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I practiced Destructuring assignment and I completed the writing portion of the HTML for the header part of the weather API project.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672235361956/326cd5f2-9544-436c-9a86-62d1ecd1877b.png" alt class="image--center mx-auto" /></p> <p> preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672235367784/13893c1e-1d79-4cdd-a145-e88c0c857125.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutubew0veoghdmpq">Source: Code with WebDevSimplified [<a target="_blank" href="https://youtu.be/w0VEOghdMpQ">click</a>]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-72</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-72</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Wed, 28 Dec 2022 13:54:21 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672235162134/e45c7d89-c17a-4f10-8e88-04eabb804cc5.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building A Weather App In JavaScript Day 71 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day71 of #100DaysOfCode, I practiced Object DestructuringI am coding and explaining the 'How To Build A Weather App In JavaScript Without Needing A Server' project taught by [Web Dev Simplified]</p> <h1 id="heading-object-destructuring">Object Destructuring</h1> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> person = { <span class="hljs-attr">height</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">eyes</span>: <span class="hljs-string">'blue'</span>, <span class="hljs-attr">weight</span>: <span class="hljs-string">'60kg'</span>, <span class="hljs-attr">location</span>: <span class="hljs-string">'earth'</span>, }; <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">'temp'</span>,<span class="hljs-string">'bp'</span>,<span class="hljs-string">'mp'</span>,<span class="hljs-string">'ram'</span>,<span class="hljs-number">7</span>]; <span class="hljs-keyword">const</span> {...person2} = person; <span class="hljs-built_in">console</span>.log(person2); <span class="hljs-keyword">const</span> [...arr2] = arr; <span class="hljs-comment">//console.log(arr2)</span> <span class="hljs-built_in">console</span>.log(arr2); <span class="hljs-keyword">const</span> {a,b,c,d} = person; <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//null</span> <span class="hljs-keyword">const</span> {height} = person; <span class="hljs-built_in">console</span>.log(height) ;<span class="hljs-comment">//6</span> <span class="hljs-keyword">const</span> num2 = []; <span class="hljs-keyword">const</span> obj = { <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>}; ({<span class="hljs-attr">a</span>:num2[<span class="hljs-number">0</span>],<span class="hljs-attr">b</span>:num2[<span class="hljs-number">1</span>] } = obj); <span class="hljs-built_in">console</span>.log(num2) </code></pre> <h2 id="heading-code-object-destructuring-linkhttpswwwsololearncomcompiler-playgroundw8vjlf49i0kr">Code: Object Destructuring <a target="_blank" href="https://www.sololearn.com/compiler-playground/W8VjlF49i0KR">[link]</a></h2> <h1 id="heading-weather-app-project">Weather App project</h1> <h1 id="heading-what-is-this-project-about">What is this project about?</h1> <p>Full-fledged weather app using HTML CSS and JavaScript using free APIs.</p> <h1 id="heading-what-skills-do-i-get">What skills do I get?</h1> <p>Data parsing API access</p> <p>CSS styling</p> <p>JavaScript</p> <p>Why do this project?</p> <p>Open meteo API has URL and you just call this URL to access information and NO API keys are needed.</p> <h1 id="heading-1-setup">1. Setup</h1> <p>we're gonna be using vite to set up our project in the terminal</p> <p>In terminal,</p> <pre><code class="lang-bash">npm create vite@latest </code></pre> <p>Tip: In terminal when navigating using cd if you come across a folder with space and you want to navigate enclose that folder name in quotes.</p> <p>Give <code>.</code> to create in the current project folder opened or else give a new project name,</p> <p>select vanilla framework in the next line,</p> <p>select JavaScript variant in the next line,</p> <p>type npm i to install all the packages</p> <pre><code class="lang-bash">npm i </code></pre> <p>to run our project</p> <pre><code class="lang-bash">npm dev run </code></pre> <p>After that, use ctrl+click to open the live view server,</p> <p>Delete the default CSS styling and JavaScript code in the main.js file</p> <p>To import our css in JS</p> <pre><code class="lang-bash">import <span class="hljs-string">" ./style.css"</span> </code></pre> <p>Always Check if your CSS file is imported in the HTML file or JS file or not.</p> <p>Delete the counter.js file as we don't need.</p> <p>Delete the SVG file inside the Public folder</p> <p>Delete the Javascript.svg file too.</p> <p>In index HTML file delete the svg linked code and also the div in the body tag.</p> <p>As we have imported the CSS file to the JavaScript file we don't need to add linktag inside the HTML page.</p> <p>Use <code>defer</code> attribute to load .js file after loading HTML file.</p> <pre><code class="lang-javascript">&lt;script type=<span class="hljs-string">"module"</span> src=<span class="hljs-string">"/main.js"</span> defer&gt;&lt;/script&gt; </code></pre> <p>Download and copy the icons, SVGs, and Fonts from the kyle GitHub <a target="_blank" href="https://github.com/WebDevSimplified/js-weather-app/tree/main/public">[Link]</a> and paste them into the public folder.</p> <h1 id="heading-conclusion">Conclusion</h1> <p>Learned Object Destructuring and Completed the Setup portion of Building weather API.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672154514808/78b25862-3b4e-4b62-8017-0d9f2ee4aab7.png" alt class="image--center mx-auto" /></p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672154605926/c77a71a3-ba8c-41ae-b2d3-362e6e0a7838.png" alt class="image--center mx-auto" /></p> <p> Object Destructuring</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672158077353/331042bd-24c1-4525-8d49-30432e9b8723.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutubew0veoghdmpq">Source: Code with WebDevSimplified [<a target="_blank" href="https://youtu.be/w0VEOghdMpQ">click</a>]</h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-71</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-weather-app-in-javascript-day-71</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Tue, 27 Dec 2022 16:24:49 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672158180380/9c991626-09df-424e-9d13-39f448417210.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning about JavaScript Closures and Interview Questions Day 70 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day70 of #100DaysOfCode, I am Learning more about closures in depth in JavaScript.</p> <h1 id="heading-what-is-closure-in-js">What is closure in JS?</h1> <p>Closure in JavaScript is a function along with its reference to its outer environment together forms a closure.</p> <p>In other words, closure is a function along with its lexical environment which is bundled together.</p> <p>A closure has access to its lexical environment variables even though it is called in another function scope. That is a closure still has access to its parent environment variables.</p> <h2 id="heading-example">Example</h2> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params">x</span>)</span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-built_in">console</span>.log(x) } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`hi`</span>) } <span class="hljs-keyword">return</span> { inner, greet } } outer(<span class="hljs-number">8</span>).inner() </code></pre> <p>Note</p> <p>the declaration of X is after the inner function inside the outer function then also the closure will work because the closer definition is the closer function has access the entire lexical scope environment of the outer function.</p> <h2 id="heading-relation-of-scope-chain-and-closures">Relation of scope chain and closures</h2> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outtest</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params">x</span>) </span>{ <span class="hljs-built_in">console</span>.log(x) } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet</span>(<span class="hljs-params">t</span>) </span>{ <span class="hljs-built_in">console</span>.log(t) } <span class="hljs-keyword">return</span> { inner, greet } } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">y</span>(<span class="hljs-params"></span>)</span>{ } <span class="hljs-keyword">return</span> { outer,y } } outtest().outer().inner(<span class="hljs-number">9</span>) outtest().outer().greet(<span class="hljs-string">'bye'</span>) </code></pre> <h2 id="heading-conflicting-global-name-variables-in-js">Conflicting global name variables in JS</h2> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outtest</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params">x</span>) </span>{ x = <span class="hljs-number">14</span> <span class="hljs-built_in">console</span>.log(x) } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet</span>(<span class="hljs-params">t</span>) </span>{ <span class="hljs-built_in">console</span>.log(t) } <span class="hljs-keyword">return</span> { inner, greet } } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">y</span>(<span class="hljs-params"></span>)</span>{ } <span class="hljs-keyword">return</span> { outer,y } } <span class="hljs-keyword">let</span> x = <span class="hljs-number">60</span> outtest().outer().inner() outtest().outer().greet(<span class="hljs-string">'bye'</span>) </code></pre> <p>closure function finds the variable and its nearest lexical environment if the variable value is not present in the nearest lexical environment then it will find and it will go deep into the hierarchy to the other lexical environmental scopes,</p> <h2 id="heading-advantages-of-closure">Advantages of closure</h2> <p>JS closures are used in module patterns.</p> <p>closures are used in function currying</p> <p>closures are used in higher-order functions</p> <p>JS closures help in data hiding and data encapsulating</p> <h2 id="heading-data-hiding-and-data-encapsulating">Data hiding and Data encapsulating</h2> <p>data hiding and data encapsulating is a method in which we prevent the other functions in the other parts of the program to prevent using data of another important function</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trainpassengers</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">var</span> noofpassengeres = <span class="hljs-number">0</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passengercounter</span>(<span class="hljs-params"></span>)</span>{ noofpassengeres++ } } </code></pre> <p>Tip: variables declared with var keyword are function scope.</p> <p>Now, to call the function,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trainpassengers</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">var</span> noofpassengeres = <span class="hljs-number">0</span> <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passengercounter</span>(<span class="hljs-params"></span>) </span>{ noofpassengeres++ <span class="hljs-built_in">console</span>.log(noofpassengeres) } } <span class="hljs-keyword">const</span> trainpasstc = trainpassengers() trainpasstc() trainpasstc() </code></pre> <p>Now, declaring another variable and assign to the main train passengers function to this variable,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trainpassengers</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">var</span> noofpassengeres = <span class="hljs-number">0</span> <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passengercounter</span>(<span class="hljs-params"></span>) </span>{ noofpassengeres++ <span class="hljs-built_in">console</span>.log(noofpassengeres) } } <span class="hljs-keyword">const</span> trainpasstc = trainpassengers() trainpasstc() trainpasstc() <span class="hljs-keyword">const</span> trainpasstc2 = trainpassengers() trainpasstc2() </code></pre> <p>Note</p> <p>In the above code, we created a new duplicate of the main tracing train passengers function and we have assigned it to another variable.</p> <h2 id="heading-function-constructer">Function constructer</h2> <p>But to make it scalable, we new function constructer</p> <p>instead of returning, we use this keyword,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trainpassengers</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">var</span> noofpassengeres = <span class="hljs-number">0</span> <span class="hljs-built_in">this</span>.boardingpassengercounter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ noofpassengeres++ <span class="hljs-built_in">console</span>.log(noofpassengeres) } <span class="hljs-built_in">this</span>.exitpassengercounter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ noofpassengeres-- <span class="hljs-built_in">console</span>.log(noofpassengeres) } } <span class="hljs-keyword">const</span> trainpasstc = <span class="hljs-keyword">new</span> trainpassengers() trainpasstc.boardingpassengercounter() trainpasstc.exitpassengercounter() trainpasstc.exitpassengercounter() </code></pre> <h2 id="heading-the-disadvantage-of-js-closures">The disadvantage of JS closures</h2> <p>overconsumption of memory</p> <p>the variables in the lexical scope environment are not garbage collected hence there will be a lot of memory Waste.</p> <p>Resulting in memory leaks and will also freeze the browsers.</p> <h2 id="heading-what-is-a-garbage-collector-what-does-it-do-in-a-program">What is a garbage collector what does it do in a program?</h2> <p>Freezes the unutilized memory.</p> <p>JavaScript freezers and de-allocates the memory allotted to the unused variables in a program.</p> <h2 id="heading-what-is-the-relation-between-the-garbage-collector-and-js-closures">What is the relation between the garbage Collector and JS closures?</h2> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span> <span class="hljs-built_in">this</span>.b = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-built_in">console</span>.log(x) } } <span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> a() y.b() </code></pre> <p>in the above example, we cannot freeze the studies we cannot deallocate the X variable from the memory because it has formed a closure with the function VB which is assigned to the variable y which can also be called later.</p> <p>Chrome and V8 JS engine have smart garbage collectors, when the browser finds a variable in the lexical scope environment of the closure function which is haven't been used then it will de-allocate that particular unused variable in the lexical scope environment of the closure function.</p> <p>To view, to prove a certain variable has been garbage collected go to the console of the browser and type the console.log() for that variable then it will say uncaught reference error this variable has been garbage collected that is it is no longer present in the memory because it has been deallocated.</p> <p>Code: Examplesclosure <a target="_blank" href="https://www.sololearn.com/compiler-playground/W4rx0fAqAe5c">[Link]</a></p> <h1 id="heading-conclusion">Conclusion</h1> <p>I have completed learning and practicing closures with examples.</p> <ol> <li><p>JS closures.</p> </li> <li><p>Relation of scope chain and closures</p> </li> <li><p>Conflicting global name variables in JS</p> </li> <li><p>Advantages of closure</p> </li> <li><p>Data hiding and Data encapsulating</p> </li> <li><p>Function constructer</p> </li> <li><p>The disadvantage of JS closures</p> </li> <li><p>What is a garbage collector what does it do in a program?</p> </li> <li><p>What is the relation between the garbage Collector and JS closures?</p> </li> </ol> <h1 id="heading-code">Code:</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1672054826356/0db4d2b1-bfa0-424a-842b-a4f71d91721c.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-akshay-saini-linkhttpsyoutubet1nfamws5fi">Source: <strong>Akshay Saini</strong> <a target="_blank" href="https://youtu.be/t1nFAMws5FI">[Link]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-about-javascript-closures-and-interview-questions-day-70</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-about-javascript-closures-and-interview-questions-day-70</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Mon, 26 Dec 2022 11:47:03 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1672054931650/4aac7b49-c343-4314-92af-0b57243bcd34.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning about JavaScript Closures Day 69 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day69 of #100DaysOfCode, I am learning JavaScript Closures and tricky interview questions on closure.</p> <h1 id="heading-what-is-a-closure">What is a closure?</h1> <p>A closure gives you access to an outer function's scope from an inner function.</p> <p>Imagine two functions,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params"></span>)</span>{ } } </code></pre> <p>You can see the following code, where the ispet function has access to the name parameter which lexicalscope,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">livingthing</span>(<span class="hljs-params">name</span>)</span>{ <span class="hljs-comment">//const name = 'lion'</span> <span class="hljs-comment">//const name = 'cat'</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isbites</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">if</span> (name ===<span class="hljs-string">'lion'</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`yes! <span class="hljs-subst">${name}</span> bites`</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`No!<span class="hljs-subst">${name}</span> doesn't bites`</span>) } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ispet</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">if</span>(name ===<span class="hljs-string">'lion'</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`you cannot pet a <span class="hljs-subst">${name}</span>`</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`you can pet a <span class="hljs-subst">${name}</span>`</span>) } isbites() ispet() } livingthing(<span class="hljs-string">'lion'</span>) livingthing(<span class="hljs-string">'cat'</span>) </code></pre> <p>Now, Let's call the two inner functions dynamically,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">livingthing</span>(<span class="hljs-params">name</span>) </span>{ <span class="hljs-comment">//const name = 'lion'</span> <span class="hljs-comment">//const name = 'cat'</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isbites</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">if</span> (name === <span class="hljs-string">'lion'</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`yes! <span class="hljs-subst">${name}</span> bites`</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`No!<span class="hljs-subst">${name}</span> doesn't bites`</span>) } <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ispet</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">if</span> (name === <span class="hljs-string">'lion'</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`you cannot pet a <span class="hljs-subst">${name}</span>`</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`you can pet a <span class="hljs-subst">${name}</span>`</span>) } <span class="hljs-keyword">return</span> { isbites, ispet } } livingthing(<span class="hljs-string">'lion'</span>).isbites() livingthing(<span class="hljs-string">'cat'</span>).ispet() </code></pre> <p>Take away: closures remember the outer function scope even after the creation time.</p> <p>JS stores a closure in heap memory instead of a traditional non closure in stack memory.</p> <p>Call stack is short lived, where is heap memory is long lived.</p> <h2 id="heading-code-closureslinkhttpswwwsololearncomcompiler-playgroundwtln9l67owzk">Code: Closures<a target="_blank" href="https://www.sololearn.com/compiler-playground/WTLn9l67OWZK">[Link]</a></h2> <h1 id="heading-js-closure-interview-question">JS Closure Interview question,</h1> <h2 id="heading-using-the-var-keyword">Using the var keyword</h2> <pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`--------------`</span>) <span class="hljs-keyword">var</span> j <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++){ <span class="hljs-built_in">console</span>.log(i, <span class="hljs-string">`hi`</span>) j = <span class="hljs-number">0</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(i, <span class="hljs-string">`bye`</span>, j = j + <span class="hljs-number">1</span>) } <span class="hljs-built_in">setTimeout</span>(log, <span class="hljs-number">1000</span>) } <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`--------------`</span>, i, j) </code></pre> <p>closure function is pointing to the same memory location of the variable I hence after the set timer one second is pointing to the location of the eye which value has been modified to 3 hence you will get 3 in the output.</p> <h3 id="heading-code-interviewquesvarclosure-linkhttpswwwsololearncomcompiler-playgroundwubeulnsqab4">Code: Interviewquesvarclosure <a target="_blank" href="https://www.sololearn.com/compiler-playground/WUBeuLNsqAb4">[Link]</a></h3> <h2 id="heading-using-the-let-keyword">Using the let keyword</h2> <pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`--------------`</span>) <span class="hljs-keyword">let</span> j =<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) { <span class="hljs-built_in">console</span>.log(i,<span class="hljs-string">`hi`</span>) <span class="hljs-keyword">const</span> log = <span class="hljs-function">() =&gt;</span> { <span class="hljs-built_in">console</span>.log(i,<span class="hljs-string">`bye`</span>,j=j+<span class="hljs-number">1</span>) } <span class="hljs-built_in">setTimeout</span>(log, <span class="hljs-number">1000</span>) } <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`--------------`</span>,j) </code></pre> <p>whereas the I variable declared using the let keyword will assign new memory locations for every iteration hence the closure will be pointing to that assigned new memory allocation for each iteration hence the output will be the value of the variable I in that allocated memory when the set timer time has.</p> <h3 id="heading-code-interviewquesletclosure-linkhttpswwwsololearncomcompiler-playgroundwm1lkq6tm0w0">Code: Interviewquesletclosure <a target="_blank" href="https://www.sololearn.com/compiler-playground/WM1lkQ6tM0w0">[link]</a></h3> <h1 id="heading-conclusion">Conclusion</h1> <p>Learned about closures in JS and understood an interview question on JS closures with var and let variable declaration.</p> <h1 id="heading-code">Code:</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671958889813/7e1d5fde-0de3-4621-aab5-1be54aa5aa7a.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-colorcode-link1httpswwwyoutubecomwatchvahrvi2ztlau-link2httpsdevelopermozillaorgen-usdocswebjavascriptclosures-akshay-saini-link3httpswwwyoutubecomwatchvebtbg4nda2a">Source: <strong>ColorCode</strong> <a target="_blank" href="https://www.youtube.com/watch?v=aHrvi2zTlaU">[Link1]</a> <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">[Link2]</a> , Akshay Saini <a target="_blank" href="https://www.youtube.com/watch?v=eBTBG4nda2A">[Link3]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-about-javascript-closures-day-69</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-about-javascript-closures-day-69</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sun, 25 Dec 2022 09:08:43 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671958759489/9a58df2e-dd05-4e40-8375-d8b7abbecb8a.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building JavaScript Layout Animations Day68 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day68 of #100DaysOfCode, I am coding and explaining the 'Javascript Layout Animations' project taught by <a target="_blank" href="https://www.youtube.com/@developedbyed">[developedbyed]</a></p> <p>This article is a continuation of day 67.</p> <h1 id="heading-css">CSS</h1> <p>Now, styling the cards</p> <pre><code class="lang-css"><span class="hljs-selector-class">.card</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">15rem</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1rem</span>; <span class="hljs-attribute">cursor</span>: pointer; <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">flex-direction</span>: column; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">background</span>: <span class="hljs-number">#93a9ff</span>; <span class="hljs-attribute">grid-column</span>: span <span class="hljs-number">3</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">5rem</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0.7rem</span> <span class="hljs-number">0.7rem</span> <span class="hljs-number">0rem</span> <span class="hljs-number">#252525</span>; <span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#252525</span>; <span class="hljs-attribute">gap</span>: <span class="hljs-number">2rem</span>; } </code></pre> <p>Now, let's remove the P tag from the HTML document we will only add this like we will only show it when we click on it hence remove it now,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.card</span> <span class="hljs-selector-tag">p</span> { <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2rem</span>; <span class="hljs-attribute">display</span>: none; } </code></pre> <p>Then, we are adding the active class using JavaScript dynamically hence style that in advance to display the P tag display to block when we click on it ,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.card</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-tag">p</span> { <span class="hljs-attribute">display</span>: block; } </code></pre> <p>Next, let's style our cards when it is active that is when we click on it using the active class you are staying in advance ,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.card</span><span class="hljs-selector-class">.active</span> { <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / span <span class="hljs-number">6</span>; <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span>; <span class="hljs-attribute">order</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">height</span>: auto; } </code></pre> <p>After that, let's style the inactive cards that is other than the clicked card using the inactive class,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.card</span><span class="hljs-selector-class">.is-inactive</span> { <span class="hljs-attribute">grid-column</span>: span <span class="hljs-number">2</span>; } </code></pre> <h1 id="heading-javascript">JavaScript</h1> <p>Add add event listener to each card to listen for the click, to add each click use for each() method,</p> <p>the isCardActive variable holds the boolean value which will be returned by the contains() method,</p> <p>can we are using for each method to remove the active and inactive class for the next click in this code block,</p> <p>And in the if statement we are negating the boolean value from the isCardActive variable and we are adding the active class to the card,</p> <pre><code class="lang-javascript">cards.forEach(<span class="hljs-function">(<span class="hljs-params">card, index</span>) =&gt;</span> { card.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> { <span class="hljs-keyword">const</span> state = Flip.getState(cards) <span class="hljs-keyword">const</span> isCardActive = card.classList.contains(<span class="hljs-string">'active'</span>) cards.forEach(<span class="hljs-function">(<span class="hljs-params">otherCard, otherIdx</span>) =&gt;</span> { otherCard.classList.remove(<span class="hljs-string">'active'</span>) otherCard.classList.remove(<span class="hljs-string">'is-inactive'</span>) }) <span class="hljs-keyword">if</span> (!isCardActive) card.classList.add(<span class="hljs-string">'active'</span>) }) }) </code></pre> <p>Now, to add in-active class only to cards other than clicked,</p> <p>so the logic here is we will remove the active and inactive class of all the elements usign a foreach method and then we are checking the isactive variable boolean value and also check the index object clicked card with the other index if not this matches,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">if</span>(!isCardActive&amp;&amp; index!==otherIdx) otherCard.classList.add(<span class="hljs-string">'is-inactive'</span>) </code></pre> <p>Finally, adding animaiton,</p> <pre><code class="lang-javascript">Flip.from(state,{ <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">ease</span>: <span class="hljs-string">"expo.out"</span>, <span class="hljs-attr">absolute</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">onComplete</span>: <span class="hljs-function">()=&gt;</span>{ gsap.to(<span class="hljs-string">'.card p'</span>,{}) } }) </code></pre> <h1 id="heading-conclusion"><strong>Conclusion</strong></h1> <p>I completed the JavaScript Layout Animations taught by <a target="_blank" href="https://www.youtube.com/@developedbyed">[developedbyed]</a>.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671883624164/4905b576-51d3-4102-a61f-749f0e0f45f7.png" alt class="image--center mx-auto" /></p> </li> <li><p>preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671883628810/32eaf60b-8ae9-4504-b445-9d7c6e57c842.png" alt class="image--center mx-auto" /></p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671883635535/a18fcd39-b6f3-42bf-87e2-2193999c64ca.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-developedbyed-clickhttpsyoutubexb27aura5h4"><strong>Source: Code with developedbyed</strong> <a target="_blank" href="https://youtu.be/xB27AuRa5h4"><strong>[click]</strong></a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj"><strong>My Twitter</strong></a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/"><strong>My LinkedIn</strong></a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1"><strong>My GitHub</strong></a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/"><strong>My Hashnode</strong></a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-javascript-layout-animations-day68</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-javascript-layout-animations-day68</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sat, 24 Dec 2022 12:12:18 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671883721353/34ac1cfc-59b6-413d-97eb-111d3334711e.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building JavaScript Layout Animations Day67 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day67 of #100DaysOfCode, I am coding and explaining the 'Javascript Layout Animations' project taught by @developedbyed</p> <h1 id="heading-html">HTML</h1> <p>Let's write the HTML skeleton using the shortcut<code>!</code></p> <pre><code class="lang-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/app.js"</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript Layout Animations<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> </code></pre> <p><mark>Tip: use defer attribute to load our app.js after loading the HTML page.</mark></p> <p>seacrh for gsap cdn and copy the following links which will contain the layout animations,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">"sha512-f8mwTB+Bs8a5c46DEm7HQLcJuHMBaH/UFlcgyetMqqkvTcYg4g5VXsYR71b3qC82lZytjNYvBj2pf0VekA9/FQ=="</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">"anonymous"</span> <span class="hljs-attr">referrerpolicy</span>=<span class="hljs-string">"no-referrer"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </code></pre> <p>Now, Let's write the elements for nav</p> <p>Tip: use the shortcut <code>nav&gt;ul.nav-links&gt;div.nav-item&gt;li&gt;a</code></p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-links"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-item"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Our Story<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"active-nav"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-item"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Projects<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-item"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Porfolio<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span> </code></pre> <h1 id="heading-css">CSS</h1> <p>Let's style our nav</p> <pre><code class="lang-css">*{ <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">box-sizing</span>: border-box; } </code></pre> <p>use the following CSS to get font family lato</p> <pre><code class="lang-css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">'http://fonts.googleapis.com/css?family=Lato:400,700'</span>); <span class="hljs-selector-tag">body</span>{ <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Lato'</span>, sans-serif; } </code></pre> <p>give padding and hand display flex property to position the elements containing the nav tag horizontally,</p> <p>but the NAV element has only one element inside if you add any other element it will position to the right of the ul tag [&lt;ul&gt; tag = unordered list, &lt;ol&gt; tag = ordered list]</p> <pre><code class="lang-css"><span class="hljs-selector-tag">nav</span>{ <span class="hljs-attribute">padding</span>: <span class="hljs-number">3rem</span>; <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: center; } </code></pre> <p>After that, to get that now item side by side placed horizontally give the display flex to the unordered list &lt;ul&gt; tag,</p> <p>to remove the list style use none value, also to space between them use gap property,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.nav-links</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">list-style</span>: none; <span class="hljs-attribute">gap</span>: <span class="hljs-number">5rem</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>; } </code></pre> <p>Next, remove the line underneath our items</p> <pre><code class="lang-css"><span class="hljs-selector-class">.nav-links</span> <span class="hljs-selector-tag">a</span>{ <span class="hljs-attribute">text-decoration</span>: none; <span class="hljs-attribute">color</span>: <span class="hljs-number">#252525</span>; <span class="hljs-attribute">font-weight</span>: bold; } </code></pre> <p>Now, Lets style the bar which will appear down the nav items,</p> <p>position absolute property will place the Div according to the nearest fixed element</p> <pre><code class="lang-css"><span class="hljs-selector-class">.active-nav</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#385ae0</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1rem</span>; <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">left</span>: <span class="hljs-number">0%</span>; <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">8px</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; } </code></pre> <h1 id="heading-javascript">JavaScript</h1> <p>Let's work on JS code,</p> <p>Define links const variable to store all the links,</p> <p>Define a const variable to hold the class active nav element,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> links = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.nav-item a'</span>) <span class="hljs-keyword">const</span> activeNav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.active-nav'</span>) </code></pre> <p>Now, let's add an add event listener to each link,</p> <p>for each method will look through the links since the links variable is an array</p> <p>Each link will be sent to the link parameter and again for each link we are adding and add an event listener to listen for the click if you click, that link will be sent to the e parameter</p> <pre><code class="lang-javascript">links.forEach(<span class="hljs-function"><span class="hljs-params">link</span> =&gt;</span>{ link.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>{ }) }) </code></pre> <p>Then, to check the clicked element use the active element property which will be active when you click on an element,</p> <pre><code class="lang-javascript">links.forEach(<span class="hljs-function"><span class="hljs-params">link</span> =&gt;</span>{ link.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span>{ gsap.to(link,{<span class="hljs-attr">color</span>: <span class="hljs-string">'#252525'</span>}) <span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.activeElement === link){ gsap.to(link,{<span class="hljs-attr">color</span>: <span class="hljs-string">'#385ae0'</span>}) } }) }) </code></pre> <p>Next, Let's add the bar to each item only when clicked,</p> <p>use append child method,</p> <pre><code class="lang-javascript">link.appendChild(activeNav) </code></pre> <p>Now, Let's add animation,</p> <pre><code class="lang-javascript"> Flip.from(state,{ <span class="hljs-attr">duration</span>: <span class="hljs-number">0.5</span>, <span class="hljs-attr">absolute</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">ease</span>: <span class="hljs-string">'elastic.out(1,0.5)'</span> }) </code></pre> <p>Now,</p> <p>Let's add cards by using HTML elements,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Esse maxime veritatis voluptates quae dignissimos facilis obcaecati eaque doloremque quos eligendi aspernatur voluptas necessitatibus earum quibusdam sunt nemo modi, eos aliquam.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span> </code></pre> <p>Let's style our cards,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.card</span>{ <span class="hljs-attribute">height</span>: <span class="hljs-number">15rem</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1rem</span>; <span class="hljs-attribute">cursor</span>: pointer; <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">flex-direction</span>: column; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#93a9ff</span>; } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed the nav and card part of the JavaScript Layout Animations.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>code</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671805589169/83af8dc3-cc37-4251-853e-3b09851f5397.png" alt class="image--center mx-auto" /></p> </li> <li><p>preview</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671805592963/06d95033-eda0-4df0-9827-134c973c2ad1.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-developedbyed-clickhttpsyoutubexb27aura5h4">Source: Code with developedbyed <a target="_blank" href="https://youtu.be/xB27AuRa5h4">[click]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-javascript-layout-animations-day67</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-javascript-layout-animations-day67</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Fri, 23 Dec 2022 14:33:24 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671805719392/9099a1c3-1ed0-4dbd-af5a-37777ac8e892.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Built A CSS project and learnt JS Closures Day66 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day66 of #100DaysOfCode, I build a CSS project and got familiar with JavaScript.</p> <h1 id="heading-javascript-closures">JavaScript closures</h1> <p>The environment surrounding the function is called the lexical environment.</p> <p>The closure is combination of the function definition and its surrounding references</p> <p>In other words, a closure gives you access to an outer function's scope from an inner function.</p> <p>In JavaScript, closures are created every time a function is created, at function creation time.</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logfun</span>(<span class="hljs-params">message</span>)</span>{ <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${message}</span>`</span>) } } <span class="hljs-keyword">const</span> alertMom = logfun(<span class="hljs-string">'hi mom'</span>) alertMom() <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++){ <span class="hljs-keyword">const</span> log =<span class="hljs-function">()=&gt;</span>{ <span class="hljs-built_in">console</span>.log(i) } <span class="hljs-built_in">setTimeout</span>(log,<span class="hljs-number">100</span>) } <span class="hljs-comment">// 0 1 2 </span> <span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">//error </span> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++){ <span class="hljs-keyword">const</span> log =<span class="hljs-function">()=&gt;</span>{ <span class="hljs-built_in">console</span>.log(i) } <span class="hljs-built_in">setTimeout</span>(log,<span class="hljs-number">100</span>) } <span class="hljs-comment">// 3 3 3</span> <span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">//3</span> <span class="hljs-keyword">let</span> i =<span class="hljs-number">0</span> <span class="hljs-keyword">for</span>(i ;i&lt;<span class="hljs-number">3</span>;i++){ <span class="hljs-keyword">const</span> log =<span class="hljs-function">()=&gt;</span>{ <span class="hljs-built_in">console</span>.log(i) } <span class="hljs-built_in">setTimeout</span>(log,<span class="hljs-number">100</span>) } <span class="hljs-comment">// 3 3 3 </span> <span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">//3</span> </code></pre> <h2 id="heading-code-closures-linkhttpswwwsololearncomcompiler-playgroundwtp2737xob2h">Code: closures <a target="_blank" href="https://www.sololearn.com/compiler-playground/WTp2737xOB2h">[link]</a></h2> <p>Now, I am going to create a CSS project to display an image and display a text when the mouse hovered.</p> <h1 id="heading-html">HTML</h1> <p>Create a Div with a class main container to encapsulate all the other elements,</p> <p>Then create a div for a gradient background,</p> <p>Inside this div create a container card by giving a div element,</p> <p>Now, create a div for the image and another div for the content,</p> <pre><code class="lang-css">&lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">main-container</span>"&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">grad-card</span>"&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">container-card</span>"&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">image</span>"&gt; &lt;<span class="hljs-selector-tag">img</span> <span class="hljs-selector-tag">src</span>="/<span class="hljs-selector-tag">earth</span><span class="hljs-selector-class">.png</span>" <span class="hljs-selector-tag">alt</span>=""&gt; &lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">class</span>="<span class="hljs-selector-tag">card-socials</span>"&gt; <span class="hljs-selector-tag">Dheeraj</span><span class="hljs-selector-class">.Y</span> &lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">div</span>&gt; &lt;/<span class="hljs-selector-tag">div</span>&gt; </code></pre> <h1 id="heading-css">CSS</h1> <p>The CSS code is shown below,</p> <pre><code class="lang-css">* { <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>; } <span class="hljs-selector-tag">body</span> { <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); } <span class="hljs-selector-class">.main-container</span> { <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">25vh</span>; } <span class="hljs-selector-class">.grad-card</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">20em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">15em</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">163deg</span>, #<span class="hljs-number">00</span>ff75 <span class="hljs-number">0%</span>, #<span class="hljs-number">3700</span>ff <span class="hljs-number">100%</span>); <span class="hljs-attribute">overflow</span>: hidden; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">180px</span>); } <span class="hljs-selector-class">.grad-card</span><span class="hljs-selector-pseudo">:hover</span> { <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">30px</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">117</span>, <span class="hljs-number">0.3</span>); <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>); <span class="hljs-attribute">height</span>: <span class="hljs-number">20em</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">180px</span>); } <span class="hljs-selector-class">.container-card</span> { <span class="hljs-comment">/* background-color: cornsilk; */</span> <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">overflow</span>: hidden; } <span class="hljs-selector-class">.image</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">20em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">15em</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>; <span class="hljs-attribute">overflow</span>: hidden; } <span class="hljs-selector-tag">img</span> { <span class="hljs-attribute">animation-name</span>: earthmove; <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">120s</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>); <span class="hljs-attribute">animation-iteration-count</span>: infinite; } <span class="hljs-selector-class">.card-socials</span> { <span class="hljs-attribute">padding</span>: <span class="hljs-number">4%</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">30px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">0.11</span>), -<span class="hljs-number">15px</span> -<span class="hljs-number">15px</span> <span class="hljs-number">30px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">0.082</span>); <span class="hljs-attribute">height</span>: <span class="hljs-number">3.4em</span>; } <span class="hljs-selector-class">.container-card</span><span class="hljs-selector-pseudo">:hover</span> { <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.98</span>); } <span class="hljs-keyword">@keyframes</span> earthmove { <span class="hljs-selector-tag">from</span> { <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0px</span>); <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0px</span>); <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>); } <span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">80px</span>); <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">50px</span>); <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>); } } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I learned JavaScript closure and completed a CSS project.</p> <ol> <li><p>JS closures</p> </li> <li><p>CSS keyframes</p> </li> <li><p>CSS animations</p> </li> <li><p>CSS Display flex</p> </li> </ol> <p>My code:</p> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671724105425/EyRNJ19c0.png" alt class="image--center mx-auto" /></p> </li> <li><p>Preview</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671724081212/TQYgiYYfp.png" alt class="image--center mx-auto" /></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671724091553/ITTbi8mCC.png" alt class="image--center mx-auto" /></p> </li> </ol> <p>Video of project link</p> <h1 id="heading-author-dheerajy"><strong>Author: Dheeraj.y</strong></h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj"><strong>My Twitter</strong></a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/"><strong>My LinkedIn</strong></a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1"><strong>My GitHub</strong></a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/"><strong>My Hashnode</strong></a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/built-a-css-project-and-learnt-js-closures-day66</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/built-a-css-project-and-learnt-js-closures-day66</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Thu, 22 Dec 2022 16:08:31 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671725203848/L2UcgEZdY.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Adding social links using HTML, CSS Day65 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day65 of #100DaysOfCode, I added social links using HTML, and CSS to my project.</p> <h1 id="heading-html">HTML</h1> <p>Created div's and gave class names to pick and add styles in CSS.</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-gradient"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-socials"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"linkedin"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.linkedin.com/in/dheerajy1/"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.w3.org/2000/svg"</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">"0 0 448 512"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"linkedin-icon"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"</span> /&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>and then I added the SVG code of each social icon.</p> <p>In the end, I wrapped the social icons in the HTML element and gave my social links.</p> <h1 id="heading-css">CSS</h1> <p>Let's style to the socials icons,</p> <p>Create a container with width and height so that the social icons will be placed evenly in this container,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.container-socials</span> { <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0px</span>; <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">gap</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">25em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">5em</span>; } </code></pre> <p>Now pick the clash of the LinkedIn icon and give it a height and width so that of your choice</p> <pre><code class="lang-css"><span class="hljs-selector-class">.linkedin-icon</span>, <span class="hljs-selector-class">.github-icon</span>, <span class="hljs-selector-class">.twitter-icon</span>, <span class="hljs-selector-class">.hashnode-icon</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">2.6em</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">2.6em</span>; } </code></pre> <p>Let's translate in the white direction when you hover it</p> <pre><code class="lang-css"><span class="hljs-selector-class">.linkedin-icon</span><span class="hljs-selector-pseudo">:hover</span>, <span class="hljs-selector-class">.github-icon</span><span class="hljs-selector-pseudo">:hover</span>, <span class="hljs-selector-class">.hashnode-icon</span><span class="hljs-selector-pseudo">:hover</span> { <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">10px</span>); } </code></pre> <h2 id="heading-finally">Finally,</h2> <p>Completed styling the social media links</p> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed adding the social links to my backup calculator project using HTML and CSS.</p> <h1 id="heading-my-code">My Code</h1> <ol> <li><p>Code and preview</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671615251743/8NyL0tZtf.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy"><strong>Author: Dheeraj.y</strong></h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj"><strong>My Twitter</strong></a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/"><strong>My LinkedIn</strong></a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1"><strong>My GitHub</strong></a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/"><strong>My Hashnode</strong></a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/adding-social-links-using-html-css-day65</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/adding-social-links-using-html-css-day65</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Wed, 21 Dec 2022 09:40:53 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671615316407/Jdo2PE01r.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Rewriting my Backup Calculator Day64 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day64 of #100DaysOfCode, I Finally completed Re-Building my Backup Calculator.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670067676439/exoHyMogX.png?auto=compress,format&amp;format=webp" alt /></p> <p>As shown above, I created an HTML page for my backup calculator project.</p> <h1 id="heading-css"><strong>CSS</strong></h1> <p>Use media queries to adapt your content to the view port,</p> <p>I put a total of 6 media queries to make responsive to the view window, showing only 2,</p> <pre><code class="lang-css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (width&lt;<span class="hljs-number">1475px</span>) { <span class="hljs-selector-class">.p1div</span> { <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">16vw</span> <span class="hljs-number">7vw</span> <span class="hljs-number">10vw</span>; } } <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-number">941px</span>&lt;width&lt;<span class="hljs-number">1460px</span>) { <span class="hljs-selector-class">.p1div</span> { <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">17em</span> <span class="hljs-number">8em</span> <span class="hljs-number">10em</span>; } <span class="hljs-selector-class">.q4</span> { <span class="hljs-attribute">min-width</span>: <span class="hljs-number">18em</span>; } <span class="hljs-selector-class">.main-dropdownbox</span> { <span class="hljs-attribute">min-width</span>: <span class="hljs-number">8em</span>; } <span class="hljs-selector-class">.q5</span> { <span class="hljs-attribute">min-width</span>: <span class="hljs-number">12em</span>; } } </code></pre> <h1 id="heading-javascript"><strong>JavaScript</strong></h1> <p>Now, I gonna dump my JS code</p> <p>It consists of calculations for my project.</p> <h1 id="heading-problems"><strong>Problems</strong></h1> <p>Problem - 1</p> <h3 id="heading-finally">Finally,</h3> <p>Fixed the responsiveness using media queries.</p> <p>Lessons I learned, I didn't provide the min-width and max-width I will implement this concept in the next responsive design.</p> <h1 id="heading-conclusion">Conclusion</h1> <p>I Finally Completed my re-coding of my Backup calculator project with a new design and colors and was completely responsive to the view window and mobile friendly as shown.</p> <ol> <li><p>JS code</p> </li> <li><p>CSS media queries</p> </li> <li><p>Lot of CSS</p> </li> </ol> <h1 id="heading-my-code">My Code</h1> <ol> <li><p>Code [ video showing responsiveness [link] ]</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671537482121/fR4cSUx9N.png" alt class="image--center mx-auto" /></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671537632083/OKzLBOniY.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj"><strong>My Twitter</strong></a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/"><strong>My LinkedIn</strong></a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1"><strong>My GitHub</strong></a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/"><strong>My Hashnode</strong></a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/rewriting-my-backup-calculator-day64</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/rewriting-my-backup-calculator-day64</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Tue, 20 Dec 2022 12:11:48 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671538257327/A9gWc__Co.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Rewriting my Backup Calculator Day63 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day63 of #100DaysOfCode, I am Re-Building my Backup Calculator.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670067676439/exoHyMogX.png" alt /></p> <p>As shown above, I want to create an HTML page for my backup calculator project.</p> <h1 id="heading-javascript">JavaScript</h1> <p>Let's re write the checkbox JS code using class list method,</p> <pre><code class="lang-javascript">checkboxDaily.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> { contentDaily.classList.toggle(<span class="hljs-string">'showblock'</span>) mainWeeklybackup.classList.toggle(<span class="hljs-string">'showhidden'</span>) }) checkboxWeekly.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> { mainDailybackup.classList.toggle(<span class="hljs-string">'showhidden'</span>) contentWeekly.classList.toggle(<span class="hljs-string">'showblock'</span>) <span class="hljs-comment">//mainContainer.classList.toggle('switchmaincontent')</span> }) </code></pre> <p>Let's add an addEventListener to calculate button,</p> <pre><code class="lang-javascript">calculateDaily.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span>{ dailySolutions.style.display = <span class="hljs-string">'block'</span> }) </code></pre> <p>Now, Let's add a dropdown after creating the necessary HTML elements,</p> <p>create a constant variable and select the drop down box using the query selector and create a variable, assign the class container weekdays using the query selector now add an event listener to the drop down box variable using the class list method and toggle property add the class show visibility to the container weekdays variable.</p> <pre><code class="lang-javascript">dropdownbox.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> { containerWeekdays.classList.toggle(<span class="hljs-string">'showvisibility'</span>) }) <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> { <span class="hljs-keyword">if</span> (!e.target.matches(<span class="hljs-string">'.dropdownbox'</span>) &amp;&amp; containerWeekdays.classList.contains(<span class="hljs-string">'showvisibility'</span>)) containerWeekdays.classList.remove(<span class="hljs-string">'showvisibility'</span>) }) </code></pre> <p>After that, Lets add event listener to the weekdays inside the dropdown,</p> <pre><code class="lang-javascript">weekdays.forEach(<span class="hljs-function">(<span class="hljs-params">weekday</span>) =&gt;</span> { weekday.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> { dropdownbox.value = weekday.innerHTML }) }) </code></pre> <h1 id="heading-html">HTML</h1> <p>Let's create a div container-weekdays holding weekdays,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p1div"</span>&gt;</span> 4. My Database is Corrupted at&amp;nbsp <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"weekday"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"wd"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dropdownbox"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">" Weekday"</span> <span class="hljs-attr">readonly</span>&gt;</span> , <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-weekdays"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weekdays"</span>&gt;</span> Sunday<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weekdays"</span>&gt;</span> Monday<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weekdays"</span>&gt;</span> Tuesday<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weekdays"</span>&gt;</span> Wednesday<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weekdays"</span>&gt;</span> Thursday<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weekdays"</span>&gt;</span> Friday<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weekdays"</span>&gt;</span> Saturday<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Tip: <code>&amp;nbsp</code> to give non-break space.</p> <h1 id="heading-css">CSS</h1> <p>Tip: Padding clockwise top</p> <p>Let's add styling to the dropdownbox,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#edebb4b7</span>; <span class="hljs-selector-tag">position</span>: <span class="hljs-selector-tag">absolute</span>; <span class="hljs-comment">/* padding: 5px 5px 11px 5px; */</span> <span class="hljs-selector-tag">margin-top</span>: 1<span class="hljs-selector-tag">px</span>; <span class="hljs-selector-tag">height</span>: 134<span class="hljs-selector-tag">px</span>; <span class="hljs-selector-tag">border-radius</span>: 7<span class="hljs-selector-tag">px</span>; <span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span>; <span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">grid</span>; <span class="hljs-selector-tag">grid-template-rows</span>: 4 1<span class="hljs-selector-tag">fr</span>; <span class="hljs-selector-tag">gap</span>: 1%; <span class="hljs-selector-tag">overflow</span>: <span class="hljs-selector-tag">hidden</span>; <span class="hljs-selector-tag">visibility</span>: <span class="hljs-selector-tag">hidden</span>; <span class="hljs-selector-tag">box-shadow</span>: 0 5<span class="hljs-selector-tag">px</span> 20<span class="hljs-selector-tag">px</span> <span class="hljs-selector-id">#494949</span>; </code></pre> <p>Now, add styling to the div weekdays,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.weekdays</span>{ <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1px</span>; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">6px</span>; <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">1px</span>; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">6px</span>; <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">2px</span>; <span class="hljs-attribute">cursor</span>: pointer; } </code></pre> <p>After that, add background when hovering,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.weekdays</span><span class="hljs-selector-pseudo">:hover</span>{ <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff</span>; } </code></pre> <h1 id="heading-problems">Problems</h1> <p>Problem - 1</p> <p>Faced an issue where the dropdown comes below when I wrap the the weekdays inside a div element,</p> <p>Solution, I kept the display inline flexbox and created a div element after the input on weekdays.</p> <p>Problem -2</p> <p>Faced an Issue where the drop-down won't close, I wanted to write a JavaScript code where clicking outside of the Dropbox should close the container drop-down.</p> <p>Solution, I added addEventListener to the window.</p> <p>Problem -3</p> <p>Unable to make it responsive. will try to fix tomorrow.</p> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed creating a drown-down menu and decreased JS code using classlist method and toggle property. As usual CSS is giving me a headache.</p> <ol> <li><p>JS classlist method</p> </li> <li><p>JS toggle property</p> </li> <li><p>JS Arrow functions</p> </li> <li><p>CSS Display Grid</p> </li> <li><p>Lot of CSS</p> </li> </ol> <h1 id="heading-my-code">My Code</h1> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671450126743/f-_MoJrBn.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/rewriting-my-backup-calculator-day63</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/rewriting-my-backup-calculator-day63</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Mon, 19 Dec 2022 11:45:05 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671449799964/7v9DYoQf-.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Rewriting my Backup Calculator Day62 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day62 of #100DaysOfCode, I am Re-Building my Backup Calculator.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670067676439/exoHyMogX.png" alt /></p> <h1 id="heading-100daysofcode">#100DaysOfCode</h1> <p>As shown above, I want to create an HTML page for my backup calculator project.</p> <h1 id="heading-javascript">JavaScript</h1> <p>I encountered an issue when I defined another P tag and the ptag variable in JavaScript not picking that P tag from the HTML document hence I used the queryselectorAll method and also I modified the if condition, which is not displaying the array ptag hence I use the foreach method to pick each P tag and then assign the style display property with the value either block or none according to the checkbox checked or not.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> ptag = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'p'</span>) </code></pre> <pre><code class="lang-javascript"> ptag.forEach(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> { e.style.display = <span class="hljs-string">'block'</span> }) </code></pre> <h1 id="heading-html">HTML</h1> <p>Define daily backup div's,</p> <p>Let's define a div container and with a child element another div content for daily questions,</p> <pre><code class="lang-xml">div class="container-daily-questions"&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content-daily-questions"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Let's define a div element with child button element,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-daily-calculate"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"button-daily-calculate"</span>&gt;</span> Calculate-daily <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Let's define a container div and its child as content div,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-daily-solutions"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content-daily-solutions"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Let's define paragraph elements inside this above div,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p1"</span>&gt;</span>1. Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis dolores et minus officiis officia, nesciunt culpa ex maiores odit aspernatur. Itaque veniam, similique quod ipsam dolorem laboriosam vero repellat sint. <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </code></pre> <p>After that, Define weekly backup div's,</p> <p>Let's define a div container and with a child element another div content for weekly questions,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-weekly-questions"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content-weekly-questions"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Let's define a div element with a child button element,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-weekly-calculate"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"button-weekly-calculate"</span>&gt;</span> Calculate-daily <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Let's define a container div and its child as content div,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-weekly-solutions"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content-weekly-solutions"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <h1 id="heading-css">CSS</h1> <p>Let's style our div's daily-questions,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.container-daily-questions</span>{ <span class="hljs-comment">/* background-color: antiquewhite; */</span> } <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.content-daily-questions</span>{ <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">9px</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">215</span>, <span class="hljs-number">250</span>, <span class="hljs-number">246</span>); } </code></pre> <p>Let's style the paragraph elements,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">p</span>{ <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-comment">/* display: none; */</span> <span class="hljs-attribute">font-family</span>: monospace; } </code></pre> <p>Let's style our div holding the button element and the button,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.container-daily-calculate</span>{ <span class="hljs-comment">/* background-color: #edb4b4; */</span> } <span class="hljs-selector-id">#button-daily-calculate</span>{ <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">2em</span>; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">color</span>: ghostwhite; <span class="hljs-attribute">background-color</span>: black; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">9px</span>; } </code></pre> <p>Let's style our div daily solutions</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.container-daily-solutions</span>{ <span class="hljs-comment">/* background-color: #edebb4; */</span> <span class="hljs-comment">/* display: none; */</span> } <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.content-daily-solutions</span>{ <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">9px</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">background-color</span>: aliceblue; } </code></pre> <p>Let's style the paragraph elements,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.p2</span>{ <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">font-family</span>: monospace; } </code></pre> <p>After that, style the weekly backup div's,</p> <p>Let's style our div's weekly-questions,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.container-weekly-questions</span>{ <span class="hljs-comment">/* background-color: antiquewhite; */</span> <span class="hljs-comment">/* display: none; */</span> } </code></pre> <p>Let's style the paragraph elements,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.content-weekly-questions</span>{ <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">9px</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">215</span>, <span class="hljs-number">250</span>, <span class="hljs-number">246</span>); <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#494949</span>; } </code></pre> <p>Let's style our div holding the button element and button,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.container-weekly-calculate</span>{ <span class="hljs-comment">/* background-color: #edb4b4; */</span> } <span class="hljs-selector-id">#button-weekly-calculate</span>{ <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">2em</span>; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">color</span>: ghostwhite; <span class="hljs-attribute">background-color</span>: black; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#494949</span>; } </code></pre> <p>Let's style our div daily solutions,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.container-weekly-solutions</span>{ <span class="hljs-comment">/* background-color: #edebb4; */</span> <span class="hljs-comment">/* display: none; */</span> } <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.content-weekly-solutions</span>{ <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">9px</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">background-color</span>: aliceblue; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#494949</span>; } </code></pre> <h1 id="heading-javascript-1">JavaScript</h1> <p>After completing the Front-End part, Now work on the checkbox to put display property none or block,</p> <p>I added another div to HTML document to contain all the daily backup and similarly for weekly backup,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">const</span> <span class="hljs-selector-tag">contentDaily</span> = <span class="hljs-selector-tag">document</span><span class="hljs-selector-class">.querySelector</span>('<span class="hljs-selector-class">.container-daily-backup</span>') <span class="hljs-selector-tag">const</span> <span class="hljs-selector-tag">contentWeekly</span> = <span class="hljs-selector-tag">document</span><span class="hljs-selector-class">.querySelector</span>('<span class="hljs-selector-class">.container-weekly-backup</span>') <span class="hljs-selector-tag">const</span> <span class="hljs-selector-tag">mainDailybackup</span> = <span class="hljs-selector-tag">document</span><span class="hljs-selector-class">.querySelector</span>('<span class="hljs-selector-id">#main-dailybackup</span>') <span class="hljs-selector-tag">const</span> <span class="hljs-selector-tag">mainWeeklybackup</span> = <span class="hljs-selector-tag">document</span><span class="hljs-selector-class">.querySelector</span>('<span class="hljs-selector-id">#main-weeklybackup</span>') <span class="hljs-selector-tag">const</span> <span class="hljs-selector-tag">checkboxDaily</span> = <span class="hljs-selector-tag">document</span><span class="hljs-selector-class">.querySelector</span>('<span class="hljs-selector-id">#daily-check-box</span>') <span class="hljs-selector-tag">const</span> <span class="hljs-selector-tag">checkboxWeekly</span> = <span class="hljs-selector-tag">document</span><span class="hljs-selector-class">.querySelector</span>('<span class="hljs-selector-id">#weekly-check-box</span>') <span class="hljs-selector-tag">checkboxDaily</span><span class="hljs-selector-class">.addEventListener</span>('<span class="hljs-selector-tag">click</span>',()=&gt;{ if (checkboxDaily.checked) { contentDaily.style.display = 'block' mainWeeklybackup.style.display = 'none' } <span class="hljs-selector-tag">else</span> { contentDaily.style.display = 'none' mainWeeklybackup.style.display = 'block' } }) <span class="hljs-selector-tag">checkboxWeekly</span><span class="hljs-selector-class">.addEventListener</span>('<span class="hljs-selector-tag">click</span>',()=&gt;{ if (checkboxWeekly.checked) { mainDailybackup.style.display = 'none' contentWeekly.style.display = 'block' mainWeeklybackup.style.transition = '2s' } <span class="hljs-selector-tag">else</span> { mainDailybackup.style.display = 'block' contentWeekly.style.display = 'none' } }) </code></pre> <h1 id="heading-problems">Problems</h1> <p>Problem 1</p> <p>There was an issue when I wanted to keep the display none to the content of daily questions or solutions paragraph element which I will dynamically put it in block using JavaScript,</p> <p>As a result, The problem I'm getting is a black bar which is due to the border of the div,</p> <p>The solution, I gave the display none to its parent div which will fix my problem.</p> <h1 id="heading-conclusion">Conclusion</h1> <p>I completed writing the Front-End part and displaying the elements dynamically by coding in JavaScript.</p> <ol> <li><p>JS addEventListener()</p> </li> <li><p>JS checked property</p> </li> <li><p>Lot of CSS</p> </li> </ol> <h1 id="heading-my-code">My Code</h1> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671371427742/kZCEJMd5t.png" alt class="image--center mx-auto" /></p> </li> <li><p>Test cases,</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671371454646/W5hCZcbmL.png" alt class="image--center mx-auto" /></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671371459649/WVxKZew40.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/rewriting-my-backup-calculator-day62</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/rewriting-my-backup-calculator-day62</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sun, 18 Dec 2022 14:00:51 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671371722450/M8m8Z-sa3.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Rewriting my Backup Calculator Day61 ]]>
</title>
<description>
<![CDATA[ <p>I am not satisfied with the First project which I did on the #Day1 of #100DaysOfCode as I was new to coding, I only wrote the Logic with if statements with less programming skills.</p> <p>As of Today #Day61, I am confident to build a good HTML CSS JavaScript project with clean code and good design. Also in the old Backup project, the daily backup failed to execute one test case so this motivated me to rebuild.</p> <p>Hence I First designed as shown below, How my Front-End Design going to be so I can write clean/efficient code and responsive,</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670067676439/exoHyMogX.png" alt /></p> <p>As shown above, I want to create an HTML page for my backup calculator project.</p> <h1 id="heading-html">HTML</h1> <p>Let's create a header with a class header that contains an H1 tag,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Backup Strategy<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> </code></pre> <p>Let's create the main container div to hold our main daily backup and main weekly,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"main-container"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Now, Inside inside this main container Let's create two div's with IDs,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"main-dailybackup"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"main-weeklybackup"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Now, Let's create a div that hold a button for each div main backups,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"main-dailybackup"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"daily-check-box"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"daily-check-button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"daily-check-box"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <p>Let's define a paragraph element with p tag,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis reiciendis, minima voluptas sequi aliquam quasi cupiditate eaque dolor laborum consequuntur earum tempora ab! Veritatis cumque maiores aspernatur dolores ab necessitatibus.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </code></pre> <h1 id="heading-css">CSS</h1> <p>Let's style our header, I used CSS has selector,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">header</span><span class="hljs-selector-pseudo">:has(h1)</span>{ <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">font-family</span>: monospace; } </code></pre> <p>Let's style our main-container,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.main-container</span> { <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; <span class="hljs-attribute">display</span>: grid; <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">2</span> <span class="hljs-number">1</span>fr; <span class="hljs-attribute">background-color</span>: azure; } </code></pre> <p>Let's style our main-dailybackup,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#main-dailybackup</span>{ <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; <span class="hljs-attribute">display</span>: grid; <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-number">4</span> <span class="hljs-number">1</span>fr; <span class="hljs-attribute">background-color</span>: aqua; } </code></pre> <p>Let's style our div daily-check-box,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.daily-check-box</span>{ <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2%</span>; } </code></pre> <p>Let's style our ID daily-check-box,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type = <span class="hljs-string">"checkbox"</span>]</span><span class="hljs-selector-id">#daily-check-box</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">appearance</span>: none; <span class="hljs-attribute">background</span>: <span class="hljs-number">#edb4b4</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#676666cc</span>; } <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span><span class="hljs-selector-attr">[type = <span class="hljs-string">"checkbox"</span>]</span><span class="hljs-selector-id">#daily-check-box</span> { <span class="hljs-attribute">background</span>: <span class="hljs-number">#2c2c2ca8</span>; } <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type = <span class="hljs-string">"checkbox"</span>]</span><span class="hljs-selector-id">#daily-check-box</span><span class="hljs-selector-pseudo">::before</span> { <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#494949</span>; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>); <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">11px</span> <span class="hljs-number">#7a7a7a</span>; } <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span><span class="hljs-selector-attr">[type = <span class="hljs-string">'checkbox'</span>]</span><span class="hljs-selector-id">#daily-check-box</span><span class="hljs-selector-pseudo">::before</span>{ <span class="hljs-attribute">left</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#393939cb</span>; } </code></pre> <p>Let's give marign to p tag,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">p</span>{ <span class="hljs-attribute">margin</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">display</span>: none; } </code></pre> <h1 id="heading-javascript">JavaScript</h1> <p>Our Aim is to hide p tag when un-checked,</p> <p>First, Let's define a const variable to store p tag using querySelector,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> ptag = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'p'</span>) </code></pre> <p>Now, Let's define a const variable to store checkbox using querySelector,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> checkbox = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#daily-check-box'</span>) </code></pre> <p>After that, Add onclick attribute to checkbox to call a function and define the function,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">display</span>(<span class="hljs-params"></span>)</span>{ } </code></pre> <h2 id="heading-finally">Finally,</h2> <p>Using the checked property write an if condition to check for checkbox whether checked or not,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">if</span>(checkbox.checked){ ptag.style.display = <span class="hljs-string">'block'</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) } <span class="hljs-keyword">else</span>{ ptag.style.display = <span class="hljs-string">'none'</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>) } </code></pre> <h1 id="heading-problem">Problem</h1> <p>Problem -1</p> <p>Arose issues where the checkbox toggle left property bases from the div main container,</p> <p>Solution: I put the div daily checkbox inside a div and gave a margin</p> <p>and position relative to the div.daily-check-box,</p> <h1 id="heading-finally-1">Finally,</h1> <p>I successfully completed the main div's design using grid columns and wrote JS code to hide a paragraph. I carefully wrote the CSS keeping in mind the responsiveness.</p> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>CSS grid</p> </li> <li><p>CSS grid template column</p> </li> <li><p>CSS input type checkbox selector</p> </li> <li><p>CSS before</p> </li> <li><p>Lot of CSS</p> </li> <li><p>JavaScript checked property</p> </li> </ol> <h1 id="heading-my-code">My Code</h1> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671300803527/AeqrWxE3Q.png" alt class="image--center mx-auto" /></p> </li> <li><p>Front-end</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671301076159/y9L7BEiyW.png" alt class="image--center mx-auto" /></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671300832469/I_Hv8aGIo.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/rewriting-my-backup-calculator-day61</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/rewriting-my-backup-calculator-day61</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sat, 17 Dec 2022 18:21:09 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671301514659/xBnMBW3Cz.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building a background color generator Project Day60 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day60 of #100DaysOfCode, I am Building a random background color generator.</p> <p>I pre-designed what I am going to build as shown below,</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671124448264/r6HG6BAnU.png" alt class="image--center mx-auto" /></p> <p>So, yesterday Day59 I generated random values and random letters from the two arrays, Now Today Day60 Let's try to complete HTML, CSS, remaining JavaScipt code.</p> <h1 id="heading-html">HTML</h1> <p>Let's define a button,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> </code></pre> <h1 id="heading-javascript">JavaScript</h1> <p>Let's try to define a position variable object arrow function that will be called for every single digit of the X code so that you will get a random letter or number,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> positions = <span class="hljs-function">()=&gt;</span>{ <span class="hljs-keyword">const</span> keyGen = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * arrayshold.size + <span class="hljs-number">1</span>) <span class="hljs-keyword">const</span> randomarray = arrayshold.get(keyGen) <span class="hljs-keyword">let</span> arrlen <span class="hljs-keyword">if</span> (keyGen === <span class="hljs-number">1</span>) arrlen = values.length <span class="hljs-keyword">else</span> arrlen = letters.length <span class="hljs-keyword">const</span> arrindGen = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * arrlen) pos = randomarray[arrindGen] <span class="hljs-keyword">return</span> pos } <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${positions()}</span>`</span>) </code></pre> <p>It worked, test case Image is shown below</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671192724779/bcIQwktD5.png" alt class="image--center mx-auto" /></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671192729563/qAI8mdW7x.png" alt class="image--center mx-auto" /></p> <p>After that, let's grab the button using queryselector</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> button = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>) </code></pre> <p>Then, let's define an add event listener which will listen for the click and change the background of the document,</p> <pre><code class="lang-javascript">button.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span>{ }) </code></pre> <p>Now, Let's define a hexcode const variable to store these randomly generated numbers and letters and call the positions() functions,</p> <p>Lets print it to console to test,</p> <pre><code class="lang-javascript">button.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span>{ <span class="hljs-keyword">const</span> hexcode = <span class="hljs-string">`#<span class="hljs-subst">${positions()}</span>`</span> <span class="hljs-built_in">console</span>.log(hexcode) }) </code></pre> <p>yes, it prints random values and letters as shown below,</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671194322821/CQPzJVPmf.png" alt class="image--center mx-auto" /></p> <p>Now, Let's call the positions() function 6 times and store the hexcode,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> hexcode = <span class="hljs-string">`#<span class="hljs-subst">${positions()}</span><span class="hljs-subst">${positions()}</span><span class="hljs-subst">${positions()}</span><span class="hljs-subst">${positions()}</span><span class="hljs-subst">${positions()}</span><span class="hljs-subst">${positions()}</span>`</span> </code></pre> <p>Yes, It's working as shown below,[ I manually input the hex code to the value for the background color property inside the body selector]</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671195263253/98PVkEdmQ.png" alt class="image--center mx-auto" /></p> <p>Now, Let's assign the hex code variable to the body object inside the addeventlistener function,</p> <pre><code class="lang-javascript"><span class="hljs-built_in">document</span>.body.style.backgroundColor = hexcode </code></pre> <p>At last, The code I wrote is working as shown below,</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671195549528/oPM4_eptM.png" alt class="image--center mx-auto" /></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671195552991/9D0tqf1qa.png" alt class="image--center mx-auto" /></p> <h1 id="heading-html-1">HTML</h1> <p>Let's define a div with a class with a paragraph tag and span tag,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"BGcontent"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> BackgroundColor : <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hexcode"</span>&gt;</span> #ffffff <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <h1 id="heading-javascript-1">JavaScript</h1> <p>Let's Export the hex code value to the span with the class name hex code,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> hexexport = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.hexcode'</span>) </code></pre> <p>Now, assign the variable hexcode value inside the event listener, So display the background color in hex code.</p> <pre><code class="lang-javascript">hexexport.innerHTML = hexcode </code></pre> <h2 id="heading-finally">Finally,</h2> <p>You can assign this hexcode to style the color of the text as shown below,</p> <pre><code class="lang-javascript">hexexport.style.color = hexcode </code></pre> <h1 id="heading-css">CSS</h1> <p>Let's add Styling and center the button,</p> <p>Define the property display, justify-content center,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.button</span> { <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">align-items</span>: center; } </code></pre> <h2 id="heading-finally-1">Finally,</h2> <p>Let's add styling to the button</p> <p>change the font size and font type keyway border radius,</p> <p>change the width and height of the button,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">button</span> { <span class="hljs-attribute">font</span>: <span class="hljs-number">1.5em</span> sans-serif; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">12px</span>; <span class="hljs-attribute">outline</span>: none; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#2c2a2a</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#cf4e4e</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.6s</span> ease; <span class="hljs-attribute">width</span>: <span class="hljs-number">17.5em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">2.7em</span>; } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>Finally, I completed Coding the Background Color generator in HTML, CSS, and JavaScript.</p> <ol> <li><p>addEventListener()</p> </li> <li><p>JS template literals</p> </li> <li><p>JS style.backgroundColor property</p> </li> <li><p>CSS display flex</p> </li> <li><p>CSS display grid</p> </li> <li><p>CSS picking child elements</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>Background Color generator Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671205657154/ymj1eN_BW.png" alt class="image--center mx-auto" /></p> </li> <li><p>Background Color generator</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671205664929/7W4bnnw68.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-endnote">EndNote</h1> <p>Today, I completed coding 60 Days of #100DaysOfCode. Built 11 projects in 60 Days out of which 90% are my own code and Ideas.</p> <p>Accomplishments:</p> <p> Day1 to Day11 : 1) Built My own project website idea from scratch.</p> <p> Day12 and Day13 : 2) JavaScript Countdown timer project</p> <p> Day14 and Day15 : 3) CSS gradient bar project</p> <p> Day16 and Day17 : 4) CSS 6 cards project</p> <p> Day18 : 5) Adding contents and styling my website resume</p> <p> Day19 and Day20 : 6) CSS hover me transition project</p> <p> Day21 to Day50 : 7) JavaScript course @Sololearn (Completed)</p> <p> Day51 to Day55 : 8) Built Rock Paper Scissors in JavaScript taught by @ania_kubow.</p> <p> Day56 to Day57 : 9) Building Advanced Rock Paper Scissors in JavaScript taught by [WebDevSimplified]</p> <p> Day58 : 10) Built a Mini Project to create a div after another div using JS, and CSS visually.</p> <p> Day 59 to Day 60 : 11) Built Random Background color Generator.</p> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-background-color-generator-project-day60</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-background-color-generator-project-day60</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Fri, 16 Dec 2022 16:36:37 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671209229861/Q1DKxcC3U.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building a background color generator Project Day59 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day59 of #100DaysOfCode, I am Building a random background color generator.</p> <p>I pre-designed what I am going to build as shown below,</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671118824089/DQWaxf83k.png" alt class="image--center mx-auto" /></p> <h1 id="heading-1-html">1. HTML</h1> <p>-</p> <p>First Lets Work on JavaScript code.</p> <h1 id="heading-2-javascript">2. JavaScript</h1> <p>Let's define a values array where values are between 0 - 9 and a letters array as shown,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> values = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">const</span> letters = [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>,<span class="hljs-string">'f'</span>] </code></pre> <p>Next, Let's define a new map to hold these two arrays with keys as shown below,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> arrayshold = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([ [<span class="hljs-number">1</span>,values],[<span class="hljs-number">2</span>,letters] ]) </code></pre> <p>Now, Let's define a const random array variable that will store the value of the arrayshold using the get method in map as shown below,</p> <p>lets the key 2 to test,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> randomarray = arrayshold.get(<span class="hljs-number">2</span>) </code></pre> <p>yes, It's working,</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671119729164/30To0v4h9.png" alt class="image--center mx-auto" /></p> <p>Now, Let's Generate this key randomly i.e either 1 or 2,</p> <p>use size() method,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> keyGen = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()*arrayshold.size+<span class="hljs-number">1</span>) <span class="hljs-keyword">const</span> randomarray = arrayshold.get(keygen) </code></pre> <p>Next, Let's generate the array index to pick the index value,</p> <p>array length depends on the keygen, so let's define an if condition,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> arrayLen <span class="hljs-keyword">if</span>(keyGen===<span class="hljs-number">1</span>) arrayLen = values.length <span class="hljs-keyword">else</span> arrayLen = letters.length </code></pre> <p>Then, Let's generate random number placed on the array length from the above code</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> arrindGen = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()*arrlen) </code></pre> <p>Problem</p> <p>Problem-1</p> <p>Getting keygen undefined when I defined an arrow function which takes in the keyGen, Checked the code, and the arraylen is returning null</p> <p>So, I deleted the arrow function and went ahead with the normal if condition. I Will test again using arrow functions.</p> <h1 id="heading-conclusion">Conclusion</h1> <p>Today I worked on JavaScript code for a Random background color generator. I utilized the JS new Map() method to store the two arrays as key/value pairs.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>JavaScript Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671123143474/wsVfh-pOc.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-a-background-color-generator-project-day59</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-a-background-color-generator-project-day59</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Thu, 15 Dec 2022 17:07:22 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671125656388/ss87qWtZN.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Built a Mini Project Day58 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day58 of #100DaysOfCode, I Built a Mini Project to create a div after another div.</p> <h1 id="heading-i-html">I. HTML</h1> <p>Create a button, create a container and inside this container create boxes using the div element</p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span> Add Div <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box1"</span>&gt;</span> 1 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box2"</span>&gt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <h1 id="heading-ii-css">II. CSS</h1> <p>I did not take any CSS course, hence I approach the Front-end development part on a problem basis, i.e I do research and apply the fix till I get the desired result.</p> <pre><code class="lang-css">* { <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); } <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:has(button)</span> { <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15%</span>; } <span class="hljs-selector-tag">button</span> { <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">13px</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.959</span>); <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">6em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.8s</span> ease; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#a4a1a1</span>; } <span class="hljs-selector-class">.main</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: center; } <span class="hljs-selector-class">.container</span> { <span class="hljs-attribute">display</span>: grid; <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0.9</span>fr); <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); <span class="hljs-comment">/* float: left; */</span> <span class="hljs-comment">/* margin-left: 45%; margin-right: 30%; */</span> <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.6s</span> ease; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#ccc</span>; } <span class="hljs-selector-class">.box1</span> { <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#57f0bba4</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">vertical-align</span>: middle; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">9px</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.6s</span> ease; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#ccc</span>; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1em</span>; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1em</span>; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">1em</span>; } <span class="hljs-selector-class">.box2</span> { <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e7a48c8a</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">vertical-align</span>: middle; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">9px</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.6s</span> ease; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#ccc</span>; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1em</span>; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1em</span>; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">1em</span>; } <span class="hljs-selector-class">.box3</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">vertical-align</span>: middle; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">3em</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">9px</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.6s</span> ease; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#ccc</span>; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1em</span>; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1em</span>; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">1em</span>; } </code></pre> <h1 id="heading-iii-javascript">III. JavaScript</h1> <p>Let's write a JavaScript</p> <p>Create a button first by picking the button from the HTML element using the query selector,</p> <p>Pick the box 2 class using the query selector from the document HTML and assign to variable box 2,</p> <p>Define an array that holds colors,</p> <p>Now let's add an event listener to this button on the click it should execute a function and define a function using the arrow function,</p> <p>Create an element div when assigned to the constant variable div,</p> <p>Now assign the box 3 class to this dev so that it will inherit the width and properties and all from box 3 to this div element on clicking the button,</p> <p>Now to add the content use the inner text property to this div,</p> <p>Now to differentiate these days add style background color by picking from the array of colors that I have defined earlier</p> <p>Now the main important decision is where to place this div, if you place it after box 1, box 2 will go to the bottom upon insertion of the new box so we need to insert it after box 2,</p> <pre><code class="lang-javascript"> <span class="hljs-keyword">const</span> button = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>) <span class="hljs-keyword">const</span> box2 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.box2'</span>) <span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span> <span class="hljs-keyword">const</span> color = [<span class="hljs-string">'#57f06475'</span>, <span class="hljs-string">'#73a51c72'</span>, <span class="hljs-string">'#d3a63572'</span>, <span class="hljs-string">'#d335c067'</span>] button.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> { <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>) <span class="hljs-comment">//classname = `box${i++}`</span> div.classList.add(<span class="hljs-string">'box3'</span>) <span class="hljs-comment">//gave to inherit width and height</span> div.innerText = i++ div.style.backgroundColor = color[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * color.length)] button.style.transform = <span class="hljs-string">`scale(0.8)`</span> box2.after(div) check(i) }) <span class="hljs-keyword">let</span> check = <span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> { <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">10</span>) { alert(<span class="hljs-string">'Exceded click ok! To Initiate Reset.'</span>) <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> { <span class="hljs-built_in">window</span>.location.reload() }, <span class="hljs-number">10</span>) } } </code></pre> <h1 id="heading-iv-problem">IV. Problem</h1> <h3 id="heading-problem-1">Problem - 1</h3> <p>There is a problem where the add event listener is receiving the button with a null value,</p> <p>Place the script tag about the ending body tag in the HTML document.</p> <pre><code class="lang-javascript"> &lt;script src=<span class="hljs-string">"/app.js"</span>&gt;&lt;/script&gt; &lt;/body&gt; </code></pre> <h3 id="heading-problem-2">Problem - 2</h3> <p>There is an issue where the boxes inside the container are not having margins,</p> <p>Give margins on the top, bottom and left,</p> <pre><code class="lang-javascript">margin-top: <span class="hljs-number">1</span>em; margin-bottom: <span class="hljs-number">1</span>em; margin-left: <span class="hljs-number">1</span>em; </code></pre> <h3 id="heading-problem-4">Problem - 4</h3> <p>A problem occurred where the container div is not responsive to the window,</p> <p>so I placed the container div inside a div and then give display properties to the main dev,</p> <pre><code class="lang-javascript">.main{ <span class="hljs-attr">display</span>: flex; justify-content: center; } </code></pre> <h3 id="heading-problem-5">Problem - 5</h3> <p>There is an issue where the button is not centered,</p> <p>So I created additive wrapped the button inside this dev and in the CSI have used t has the pseudo property to select this Deb because I have not given the class,</p> <pre><code class="lang-javascript">div:has(button) { <span class="hljs-attr">display</span>: flex; justify-content: center; margin-top: <span class="hljs-number">15</span>%; } </code></pre> <h1 id="heading-conclusion">Conclusion</h1> <p>I Explained visually the Creation and Insertion of div elements dynamically after a particular div element using JavaScript and wrote CSS to make sure it stays centered to make it responsive to the view window.</p> <ol> <li><p>CSS has() Psuedo selector</p> </li> <li><p>CSS Flex, Grid Property</p> </li> <li><p>JS querySelector method</p> </li> <li><p>JS addEventListener method</p> </li> <li><p>JS classList property</p> </li> <li><p>JS setTimeout</p> </li> <li><p>JS alert</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671003570485/SceMexC05.png" alt class="image--center mx-auto" /></p> </li> <li><p>Front-end [View Window Desktop]</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671003582356/8zVJIFkin.png" alt class="image--center mx-auto" /></p> </li> <li><p>Front-end [View Window Mobile-Simulated]</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671003730051/DG8zjU3Vn.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/built-a-mini-project-day58</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/built-a-mini-project-day58</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Wed, 14 Dec 2022 08:03:15 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1671003457400/EPsDWP4uW.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building Advanced Rock Paper Scissors in JavaScript - Day57 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day57 of #100DaysOfCode, Completed coding and explaining the 'Rock Paper Scissors' code game project in JavaScript taught by <a target="_blank" href="https://www.youtube.com/@WebDevSimplified">[WebDevSimplified]</a></p> <p>Note:</p> <p>If You have followed my previous then use the 'Take Shortcut here' heading to continue,</p> <h1 id="heading-html">HTML</h1> <ol> <li><p>let's create a div to hold three buttons,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selections"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span>&gt;</span>🖐<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> </li> <li><p>let's create a results div to hold the results section and a chid div to display you and span child to hold score,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"results"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> You <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"result-score"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> Computer <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"result-score"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> </li> <li><p>Let's create a javascript file and use defer to load after our html page has loaded</p> <pre><code class="lang-javascript">&lt;script src=<span class="hljs-string">"/script.js"</span> defer&gt;&lt;/script&gt; </code></pre> </li> </ol> <h1 id="heading-css">CSS</h1> <ol> <li><p>Let's center these selections div</p> <pre><code class="lang-css"><span class="hljs-selector-class">.selections</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: center; } </code></pre> </li> <li><p>Let's Get rid of the buttons border and outline</p> <pre><code class="lang-css"><span class="hljs-selector-class">.selection</span>{ <span class="hljs-attribute">background</span>: none; <span class="hljs-attribute">border</span>: none; <span class="hljs-attribute">outline</span>: none; <span class="hljs-attribute">cursor</span>: pointer; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>; } </code></pre> </li> <li><p>Let's add a hover effect to these buttons and grow when hovered,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.selection</span><span class="hljs-selector-pseudo">:hover</span>{ <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>); } </code></pre> </li> <li><p>Let's center the results div</p> <pre><code class="lang-css"><span class="hljs-selector-class">.results</span>{ <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1rem</span>; <span class="hljs-attribute">display</span>: grid; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>fr); <span class="hljs-attribute">justify-items</span>: center; <span class="hljs-attribute">align-items</span>: center; } </code></pre> </li> <li><p>Now, Let's Work on result-score section and make it smaller,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.result-score</span>{ <span class="hljs-attribute">margin-left</span>: .<span class="hljs-number">1rem</span>; <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">5rem</span>; <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>; } </code></pre> </li> <li><p>Then, Let's create a results selection div and in CSS differentiate between the winner and lost using opacity, but for now, comment it out because we will create these elements dynamically when a user makes a selection,</p> <p><em>Tip: Use</em> <code>Ctrl+/</code> <em>to comment out multiple lines after selection.</em></p> <pre><code class="lang-css"><span class="hljs-selector-class">.result-selection</span>{ <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>; } <span class="hljs-selector-class">.result-selection</span><span class="hljs-selector-class">.winner</span>{ <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>; } </code></pre> </li> </ol> <h1 id="heading-javascript">JavaScript</h1> <p>Let's Move on to JS,</p> <ol> <li>Before we move on, Let's add data attribute to buttons in HTML,</li> </ol> <pre><code class="lang-javascript">&lt;button <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"selection"</span> data-selection=<span class="hljs-string">"rock"</span>&gt;&lt;/button&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span><span class="hljs-attr">data-selection</span>=<span class="hljs-string">"paper"</span>&gt;</span>🖐<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span><span class="hljs-attr">data-selection</span>=<span class="hljs-string">"scissor"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span> </code></pre> <ol> <li>After that, Let's create a selection buttons const variable and pick all the data selection attributes using query selector,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> selectionButtons = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'[data-selection]'</span>) </code></pre> <ol> <li>Next, let's add an add event listener for each button and access our data attribute given to the element in JS using dataset object and keyname property here the keyname is selection</li> </ol> <pre><code class="lang-javascript">selectionButtons.forEach(<span class="hljs-function"><span class="hljs-params">selectionButton</span> =&gt;</span> { selectionButton.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> { <span class="hljs-keyword">const</span> selectionName = selectionButton.dataset.selection makeSelection(selectionName) }) }); </code></pre> <ol> <li>Now, Let's Create a makeSelection function and call it the above code to append it to click and write console log to check whether it is working or not</li> </ol> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeSelection</span>(<span class="hljs-params">selection</span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`You Clicked <span class="hljs-subst">${selection}</span>`</span>) } </code></pre> <h1 id="heading-take-shortcut-here">Take Shortcut here,</h1> <ol> <li>Now, let's Define an array,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> SELECTION = [ { <span class="hljs-attr">name</span>: <span class="hljs-string">'rock'</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">''</span>, <span class="hljs-attr">beats</span>: <span class="hljs-string">'scissor'</span> }, { <span class="hljs-attr">name</span>: <span class="hljs-string">'paper'</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">'🖐'</span>, <span class="hljs-attr">beats</span>: <span class="hljs-string">'rock'</span> }, { <span class="hljs-attr">name</span>: <span class="hljs-string">'scissor'</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">''</span>, <span class="hljs-attr">beats</span>: <span class="hljs-string">'paper'</span> } ] </code></pre> <h2 id="heading-array-find-method">Array find() Method</h2> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> x = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>] <span class="hljs-built_in">console</span>.log(x.find(<span class="hljs-function">(<span class="hljs-params">num</span>)=&gt;</span>num == <span class="hljs-number">7</span>)) <span class="hljs-comment">//null</span> <span class="hljs-built_in">console</span>.log(x.find(<span class="hljs-function">(<span class="hljs-params">num</span>)=&gt;</span>num == <span class="hljs-number">6</span>)) <span class="hljs-comment">//null</span> <span class="hljs-built_in">console</span>.log(x.find(<span class="hljs-function">(<span class="hljs-params">num</span>)=&gt;</span>num == <span class="hljs-number">5</span>)) <span class="hljs-comment">// 5</span> </code></pre> <h2 id="heading-code-array-find-method-clickhttpswwwsololearncomcompiler-playgroundwoauwnhquro0">Code: Array find() Method <a target="_blank" href="https://www.sololearn.com/compiler-playground/WoAuwNHqURO0">[click]</a></h2> <ol> <li>Then, Let's find the dataset key name in selection array using the array find a method,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> selection = SELECTION.find(<span class="hljs-function"><span class="hljs-params">selection</span> =&gt;</span> selection.name == selectionName) </code></pre> <ol> <li>Next, Let's define computer selection,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomSelection</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">const</span> randomIndex = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * SELECTION.length) <span class="hljs-keyword">return</span> SELECTION[randomIndex] } </code></pre> <h2 id="heading-function-return">Function return</h2> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> x = [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>] <span class="hljs-keyword">let</span> str = <span class="hljs-function">(<span class="hljs-params">num,str</span>)=&gt;</span>{ <span class="hljs-keyword">return</span> x[num] === str } <span class="hljs-built_in">console</span>.log(str(<span class="hljs-number">0</span>,<span class="hljs-string">'g'</span>)) <span class="hljs-comment">//false</span> <span class="hljs-built_in">console</span>.log(str(<span class="hljs-number">0</span>,<span class="hljs-string">'a'</span>)) <span class="hljs-comment">//true</span> </code></pre> <h2 id="heading-code-functionreturn-clickhttpswwwsololearncomcompiler-playgroundwvej4qf37k3h">Code: functionreturn <a target="_blank" href="https://www.sololearn.com/compiler-playground/WvEj4Qf37K3h">[click]</a></h2> <ol> <li>After that, let's decide who the winner is based on the selection, the below code will return only true or false as I have demonstrated in the above link.</li> </ol> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isWinner</span>(<span class="hljs-params">selection,opponentSelection</span>)</span>{ <span class="hljs-keyword">return</span> selection.beats === opponentSelection.name } </code></pre> <ol> <li>Then, let's pass the selection and computer selection</li> </ol> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> yourWinner = isWinner(selection,computerSelection) <span class="hljs-keyword">const</span> computerWinner = isWinner(computerSelection,selection) </code></pre> <ol> <li>Now, let's define a function addselectionResult to display in HTML,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addselectionResult</span>(<span class="hljs-params">selection,winner</span>)</span>{ } </code></pre> <ol> <li>Then, let's call this addselectionResult function inside makeSelection function,</li> </ol> <pre><code class="lang-javascript">addselectionResult(computerSelection,computerWinner) addselectionResult(selection,yourWinner) </code></pre> <ol> <li>Then, add the following data attribute to computer div,</li> </ol> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-final-column</span>&gt;</span> Computer <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"result-score"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>] <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> <ol> <li>After that, define a const variable to hold this data attribute</li> </ol> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> finslColumn = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'[data-final-column]'</span>) </code></pre> <ol> <li>Now, add a div,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addselectionResult</span>(<span class="hljs-params">selection,winner</span>)</span>{ finalColumn.after(div) } </code></pre> <h2 id="heading-understanding-creating-elements-after-a-grid-div-element-in-js">Understanding creating elements after a grid div element in JS</h2> <p>I will explain tomorrow how I visually want to explain what @WebDevSimplified said in his video at <a target="_blank" href="https://youtu.be/1yS-JV4fWqY?t=1138">[click]</a>, for now, I am adding only JavaScript Code that I wrote now,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> button = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>) <span class="hljs-keyword">const</span> box1 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.box2'</span>) <span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span> <span class="hljs-keyword">const</span> color = [<span class="hljs-string">'#A555EC'</span>,<span class="hljs-string">'#460C68'</span>,<span class="hljs-string">'#F8F988'</span>,<span class="hljs-string">'#FB2576'</span>] button.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span>{ <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>) <span class="hljs-comment">//classname = `box${i++}`</span> div.classList.add(<span class="hljs-string">'box1'</span>) div.innerText=i++ div.style.backgroundColor = color[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * color.length)] box1.after(div) } </code></pre> <h2 id="heading-code-createdivafter-clickhttpswwwsololearncomcompiler-playgroundw1cq5oh4mgq5">Code: createdivafter <a target="_blank" href="https://www.sololearn.com/compiler-playground/W1cQ5oh4MGq5">[click]</a></h2> <ol> <li>Then, Let's create a div like the one which we commented in HTML,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>) div.innerText = selection.emoji div.classList.add(<span class="hljs-string">'result-selection'</span>) <span class="hljs-keyword">if</span>(winner) div.classList.add(<span class="hljs-string">'winner'</span>) finalColumn.after(div) </code></pre> <ol> <li>Now, Let's add score,</li> </ol> <pre><code class="lang-javascript">[<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"result-score"</span> <span class="hljs-attr">data-your-score</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>] </code></pre> <ol> <li>After that, Let's create a const variable to hold these data attributes,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> computerScorespan = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'[data-your-score]'</span>) <span class="hljs-keyword">const</span> yourScorespan = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'[data-computer-score]'</span>) </code></pre> <ol> <li>Now, Let's create a function to incrementScore,</li> </ol> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incrementScore</span>(<span class="hljs-params">ScoreSpan</span>)</span>{ scoreSpan.innerText = <span class="hljs-built_in">parseInt</span>(scoreSpan.innerText)+<span class="hljs-number">1</span> } </code></pre> <h2 id="heading-writing-my-own-code">Writing My Own Code,</h2> <ol> <li>Then, I added my own logic here instead of following what kyle @webdev did,</li> </ol> <p>Since I am checking the winner when addselectionResult function is called, so I inserted computerScorespan argument and send it to addselectionResult function,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">if</span> (winner){ div.classList.add(<span class="hljs-string">'winner'</span>) incrementScore(scoreSpan) } </code></pre> <h1 id="heading-adding-a-feature-to-the-rock-paper-scissor-game">Adding a feature to the Rock Paper Scissor Game,</h1> <ol> <li>The Scores should be capped at 5, and should display the user lost or won and then reload,</li> </ol> <pre><code class="lang-javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scoreCheck</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">if</span>(yourScorespan.innerText &gt;=<span class="hljs-number">5</span> || computerScorespan.innerText &gt;=<span class="hljs-number">5</span> ){ <span class="hljs-built_in">console</span>.log(yourScorespan.innerText,computerScorespan.innerText) <span class="hljs-keyword">if</span>(yourScorespan.innerText &gt; computerScorespan.innerText){ alert(<span class="hljs-string">`Yay! You Won`</span>) <span class="hljs-built_in">window</span>.location.reload() } <span class="hljs-keyword">else</span>{ alert(<span class="hljs-string">`Sorry, You lost`</span>) <span class="hljs-built_in">window</span>.location.reload() } } } </code></pre> <h1 id="heading-finally">Finally,</h1> <p>Completed coding and explaining the 'Rock Paper Scissors' code game project in JavaScript taught by <a target="_blank" href="https://www.youtube.com/@WebDevSimplified">[WebDevSimplified]</a>. Thanks, Kyle.</p> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>HTML Span Tag</p> </li> <li><p>CSS Display Flex</p> </li> <li><p>CSS Hover</p> </li> <li><p>CSS Display Grid</p> </li> <li><p>HTML Data attribute</p> </li> <li><p>JS querySelector</p> </li> <li><p>Array forEach</p> </li> <li><p>addEventListener method</p> </li> <li><p>Array find() Method</p> </li> <li><p>Understanding creating elements after a grid div element in JS and</p> </li> <li><p>Finally, a lot of Function Calls</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>Code: Array find() Method <a target="_blank" href="https://www.sololearn.com/compiler-playground/WoAuwNHqURO0">[click]</a></p> </li> <li><p>Code: functionreturn <a target="_blank" href="https://www.sololearn.com/compiler-playground/WvEj4Qf37K3h">[click]</a></p> </li> <li><p>Code: createdivafter <a target="_blank" href="https://www.sololearn.com/compiler-playground/W1cQ5oh4MGq5">[click]</a></p> </li> <li><p>Final Rock Paper Scissor Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670908249240/gTebw3KW3.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-preview-of-the-game">Preview of the Game</h1> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670908259810/lK6s7ddWF.png" alt class="image--center mx-auto" /></p> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutube1ys-jv4fwqy">Source: Code with WebDevSimplified <a target="_blank" href="https://youtu.be/1yS-JV4fWqY">[click]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-advanced-rock-paper-scissors-in-javascript-day57</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-advanced-rock-paper-scissors-in-javascript-day57</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Tue, 13 Dec 2022 05:17:28 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1670908223178/b_MvGidho.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building Advanced Rock Paper Scissors in JavaScript - Day56 ]]>
</title>
<description>
<![CDATA[ <p>Today #Day56 of #100DaysOfCode, I am coding and explaining the 'Rock Paper Scissors' code game project in JavaScript taught by @WebDevSimplified</p> <h1 id="heading-html">HTML</h1> <ol> <li><p>let's create a div to hold three buttons,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selections"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span>&gt;</span>🖐<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> </li> <li><p>let's create a results div to hold the results section and a chid div to display you and a span child to hold the score,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"results"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> You <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"result-score"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> Computer <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"result-score"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> </li> </ol> <ol> <li><p>Let's create a javascript file and use defer to load after our html page has loaded</p> <pre><code class="lang-javascript">&lt;script src=<span class="hljs-string">"/script.js"</span> defer&gt;&lt;/script&gt; </code></pre> </li> </ol> <h1 id="heading-css">CSS</h1> <ol> <li><p>Let's center these selections div</p> <pre><code class="lang-css"><span class="hljs-selector-class">.selections</span>{ <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: center; } </code></pre> </li> <li><p>Let's Get rid of the buttons border and outline</p> <pre><code class="lang-css"><span class="hljs-selector-class">.selection</span>{ <span class="hljs-attribute">background</span>: none; <span class="hljs-attribute">border</span>: none; <span class="hljs-attribute">outline</span>: none; <span class="hljs-attribute">cursor</span>: pointer; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>; } </code></pre> </li> <li><p>Let's add a hover effect to these buttons and grow when hovered,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.selection</span><span class="hljs-selector-pseudo">:hover</span>{ <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>); } </code></pre> </li> <li><p>Let's center the results div</p> <pre><code class="lang-css"><span class="hljs-selector-class">.results</span>{ <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1rem</span>; <span class="hljs-attribute">display</span>: grid; <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>fr); <span class="hljs-attribute">justify-items</span>: center; <span class="hljs-attribute">align-items</span>: center; } </code></pre> </li> <li><p>Now, Let's Work on result-score section and make it smaller,</p> <pre><code class="lang-css"><span class="hljs-selector-class">.result-score</span>{ <span class="hljs-attribute">margin-left</span>: .<span class="hljs-number">1rem</span>; <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">5rem</span>; <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>; } </code></pre> </li> <li><p>Then, Let's create a results selection div and in CSS differentiate between the winner and lost using opacity, but for now, comment it out because we will create these elements dynamically when a user makes a selection,</p> <p><em>Tip: Use</em> <code>Ctrl+/</code> <em>to comment out multiple lines after selection.</em></p> <pre><code class="lang-css"><span class="hljs-selector-class">.result-selection</span>{ <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>; } <span class="hljs-selector-class">.result-selection</span><span class="hljs-selector-class">.winner</span>{ <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>; } </code></pre> </li> </ol> <h1 id="heading-javascript">JavaScript</h1> <p>Lets Move on to JS,</p> <ol> <li><p>Before we move on, Lets add data arrtbute to buttons in HTML,</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span> <span class="hljs-attr">data-selection</span>=<span class="hljs-string">"rock"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span><span class="hljs-attr">data-selection</span>=<span class="hljs-string">"paper"</span>&gt;</span>🖐<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selection"</span><span class="hljs-attr">data-selection</span>=<span class="hljs-string">"scissor"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> </code></pre> </li> <li><p>After that, Let's create a selection buttons const variable and pick all the data selection attributes using query selector,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> selectionButtons = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'[data-selection]'</span>) </code></pre> </li> <li><p>Next, let's add an add event listener for each button and access our data attribute given to the element in JS using dataset object and keyname property here the keyname is selection</p> <pre><code class="lang-javascript">selectionButtons.forEach(<span class="hljs-function"><span class="hljs-params">selectionButton</span> =&gt;</span> { selectionButton.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> { <span class="hljs-keyword">const</span> selectionName = selectionButton.dataset.selection makeSelection(selectionName) }) }); </code></pre> </li> <li><p>Now, Lets Create a makeSelection function and call it the above code to append it to click and write console log to check whether it is working or not</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeSelection</span>(<span class="hljs-params">selection</span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`You Clicked <span class="hljs-subst">${selection}</span>`</span>) } </code></pre> </li> </ol> <p>Completed HTML and CSS coding and explaining Half way Through 'Rock Paper Scissors' code game project in JavaScript taught by @WebDevSimplified.</p> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>HTML Span Tag</p> </li> <li><p>CSS Display Flex</p> </li> <li><p>CSS Hover</p> </li> <li><p>CSS Display Grid</p> </li> <li><p>HTML Data attribute</p> </li> <li><p>JS querySelector</p> </li> <li><p>Array forEach</p> </li> <li><p>addEventListener method</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670851943509/fSzvh8o5G.png" alt class="image--center mx-auto" /></p> </li> <li><p>Image</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670851949093/xfbklNCE6.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-webdevsimplified-clickhttpsyoutube1ys-jv4fwqy">Source: Code with WebDevSimplified <a target="_blank" href="https://youtu.be/1yS-JV4fWqY">[click]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-advanced-rock-paper-scissors-in-javascript-day56</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-advanced-rock-paper-scissors-in-javascript-day56</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Mon, 12 Dec 2022 13:39:21 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1670852149625/HPrybIvMN.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building - Rock Paper Scissors in JavaScript - Day55 ]]>
</title>
<description>
<![CDATA[ <p>Today #day55 of #100daysofcode, I am coding and explaining Advanced level 'Rock Paper Scissors' code game project in JavaScript taught by @ania_kubow.</p> <h1 id="heading-html">HTML</h1> <ol> <li><p>create a div with id choices</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"choices"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> </li> <li><p>create a h2 tag with id</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"result"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> </code></pre> </li> </ol> <h1 id="heading-javascript">JavaScript</h1> <p>Let's go to the app.JS file where the magic happens,</p> <ol> <li><p>let's queryselector() method because we haven't used it beginner level and intermediate level , to to pick the choices ID and result ID</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> resultDisplay = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#result'</span>) <span class="hljs-keyword">const</span> choicesDisplay = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#choices'</span>) </code></pre> </li> <li><p>Next, let's define an array with constant variable name choices,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> choices = [<span class="hljs-string">'rock'</span>,<span class="hljs-string">'paper'</span>,<span class="hljs-string">'scissor'</span>] </code></pre> </li> <li><p>Then, let's use for each method and Loop it through the array values and create for each value a button</p> <pre><code class="lang-javascript">choices.forEach(<span class="hljs-function"><span class="hljs-params">choice</span> =&gt;</span> { } </code></pre> </li> <li><p>After that, let's create an addEventlistener method for each button to listen for the click.</p> <pre><code class="lang-javascript">button.innerHTML = choice button.addEventListener(<span class="hljs-string">'click'</span>,handleclick) </code></pre> </li> <li><p>Next, add the button we created as a child choicesDisplay variable using appendchild() method.</p> <pre><code class="lang-javascript">choicesDisplay.appendChild(button) </code></pre> </li> <li><p>Now, let's define the handle click function</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> handleclick = <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span> { getResults(e.target.innerHTML,choices[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * choices.length)]) } </code></pre> </li> <li><p>Next, let's define the getResults function</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> getResults = <span class="hljs-function">(<span class="hljs-params">userChoice,computerChoice</span>)=&gt;</span>{ } </code></pre> </li> </ol> <p>It doesn't matter what you call the parameters inside paranthesis like ania_kubow said here in her <a target="_blank" href="https://youtu.be/RwFeg0cEZvQ?t=2427">[video]</a></p> <blockquote> <p>It doesn't matter what we call it , I could call this</p> <p>blugh [ proceeds to stare at camera]</p> <p>for all the javascript cats</p> <p>- ania_kubow</p> </blockquote> <ol> <li><p>Then, Let's define the switch case</p> <pre><code class="lang-javascript"> <span class="hljs-keyword">switch</span> (userChoice + computerChoice) { <span class="hljs-keyword">case</span> <span class="hljs-string">'RockPaper'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'PaperScissor'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'ScissorRock'</span>: resultDisplay.innerHTML = <span class="hljs-string">`You chose <span class="hljs-subst">${ userChoice}</span> and Computer chose <span class="hljs-subst">${computerChoice}</span> and You Lost!`</span> <span class="hljs-keyword">break</span> <span class="hljs-keyword">case</span> <span class="hljs-string">'RockScissor'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'PaperRock'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'ScissorPaper'</span>: resultDisplay.innerHTML = <span class="hljs-string">`You chose <span class="hljs-subst">${ userChoice}</span> and Computer chose <span class="hljs-subst">${computerChoice}</span> and You Win!`</span> <span class="hljs-keyword">break</span> <span class="hljs-keyword">case</span> <span class="hljs-string">'RockRock'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'PaperPaper'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'ScissorScissor'</span>: resultDisplay.innerHTML = <span class="hljs-string">`You chose <span class="hljs-subst">${ userChoice}</span> and also the Computer chose <span class="hljs-subst">${computerChoice}</span> and Its a Draw!`</span> <span class="hljs-keyword">break</span> } </code></pre> </li> </ol> <h1 id="heading-css">css</h1> <p>If you want to give styling,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">body</span> { <span class="hljs-attribute">background-color</span>: aliceblue; <span class="hljs-attribute">text-align</span>: center; } <span class="hljs-selector-tag">div</span> { <span class="hljs-attribute">display</span>: inline-block; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15%</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">30px</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">15%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>; <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">1.5%</span>; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1.8%</span>; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#c6c6c6</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span> ease; <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">25px</span>) <span class="hljs-built_in">saturate</span>(<span class="hljs-number">180%</span>); } <span class="hljs-selector-tag">button</span> { <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">210</span>, <span class="hljs-number">105</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0.412</span>); <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0%</span>; <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">8%</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#c6c6c6</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span> ease; <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">25px</span>) <span class="hljs-built_in">saturate</span>(<span class="hljs-number">180%</span>); } <span class="hljs-selector-id">#result</span>{ <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">41.6%</span>; <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">3%</span>; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">30px</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">15%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#c6c6c6</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span> ease; <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">25px</span>) <span class="hljs-built_in">saturate</span>(<span class="hljs-number">180%</span>); } </code></pre> <h1 id="heading-finally"><strong>Finally,</strong></h1> <p>I completed Building Advanced level Rock Paper Scissor JavaScript Game Taught by ania_kubow.</p> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>querySelector()</p> </li> <li><p>arrow function</p> </li> <li><p>CSS text-align,display: inline-block,margin properties</p> </li> <li><p>Completed Building Advanced level 'Rock Paper Scissors' code project in JavaScript.</p> </li> </ol> <blockquote> <p>Thanks, Ania Kubw just completed all three Beginner to Intermediate to Advanced! level to code Rock Paper Scissors in JavaScript. I understood every line.</p> <p>It was fun. After completing this video I am pronouncing sci-ssors not scissors... Thanks for Teaching, Ania Kubw.</p> </blockquote> <h1 id="heading-code">Code</h1> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670731211879/6an2Rj-mT.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-ania-kubow-clickhttpswwwyoutubecomwatchvrwfeg0cezvq">Source: Code with Ania kubow <a target="_blank" href="https://www.youtube.com/watch?v=RwFeg0cEZvQ">[click]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day55</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day55</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sun, 11 Dec 2022 04:07:24 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1670688375189/OwgL0OUYy.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building - Rock Paper Scissors in JavaScript - Day54 ]]>
</title>
<description>
<![CDATA[ <p>Today #day54 of #100daysofcode, I am coding and explaining the Intermediate level 'Rock Paper Scissors' code project in JavaScript taught by @ania_kubow.</p> <h1 id="heading-html">HTML</h1> <ol> <li><p>create a div with id div#game</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"game"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </code></pre> </li> </ol> <h1 id="heading-javascript">JavaScript</h1> <p>Let's create and populate this id game with element's.</p> <ol> <li><p>Create an h1 element in JS</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> userChoiceDisplay = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'h1'</span>) <span class="hljs-keyword">const</span> computerChoiceDisplay = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'h1'</span>) <span class="hljs-keyword">const</span> resultDisplay = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'h1'</span>) </code></pre> </li> <li><p>get the element with the ID game and assign it to a gamegrid variable in this gamegrid variable you will store all the previously created elements,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> gameGrid = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'game'</span>) </code></pre> </li> <li><p>Now, To store the user choice display variable and computer choice display variable in the result display variable, use a method called append()</p> <pre><code class="lang-javascript">gameGrid.append(userChoiceDisplay,computerChoiceDisplay,resultDisplay) </code></pre> </li> <li><p>After that, make an choices variable array and insert rock paper scissor</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> choices = [<span class="hljs-string">'Rock'</span>,<span class="hljs-string">'Paper'</span>,<span class="hljs-string">'Scissor'</span>] </code></pre> </li> <li><p>Next, create a button for each choice so use can for loop or you can use for each() method</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> button = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'button'</span>) </code></pre> </li> <li><p>And then, add an id to this button using id property</p> <pre><code class="lang-javascript">button.id = i </code></pre> </li> <li><p>Then, Optionally(redundant) you add this choice to the buttons using innerHTML property</p> <pre><code class="lang-javascript">button.innerHTML = i </code></pre> </li> <li><p>Now, Lets add an addEventListener to this button,</p> <pre><code class="lang-javascript">button.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>)) </code></pre> <p>Note:</p> <ol> <li>Don't get confused, this addEventListener() adds this to button while the for...of loop and thereby listen's to a click after the for...of loop. Yes, This addEventListener() method is permanently attached to these buttons.</li> </ol> </li> <li><p>Once you have done that then, add this buttton with the id and inner HTML to our Div which is gameGrid as a child so use appendChild() method,</p> </li> </ol> <pre><code class="lang-javascript">gameGrid.appendChild(button) </code></pre> <pre><code class="lang-javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> choices){ <span class="hljs-keyword">const</span> button = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'button'</span>) button.id = i button.innerHTML = i button.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>) }) gameGrid.appendChild(button) } </code></pre> <p>So now, you can go to dev tools play around like ania_kubow exclaimed in her <a target="_blank" href="https://youtu.be/RwFeg0cEZvQ?t=1405">[video]</a></p> <blockquote> <p>Also if we click it, it will say</p> <p>🎵clicked clicked🎵</p> <p>🎵clicked clicked🎵</p> <p>🎵clicked clicked clicked clicked clicked clicked 🎵</p> <p>🎵clicked🎵</p> <p>- ania_kubow</p> </blockquote> <ol> <li>Moving on, let's display users choice whenever we click button instead of displaying 'clicked' in the console log, we need to display on the document,</li> </ol> <pre><code class="lang-javascript">button.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>{ userChoice = e.target.id userChoiceDisplay = userChoice }) </code></pre> <h2 id="heading-i-mathrandom-method">i. Math.random() method</h2> <pre><code class="lang-javascript">x = <span class="hljs-built_in">Math</span>.random() <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Math.random() = <span class="hljs-subst">${x}</span>`</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Math.floor(<span class="hljs-subst">${x}</span>) = <span class="hljs-subst">${<span class="hljs-built_in">Math</span>.floor(x)}</span>`</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Math.random(<span class="hljs-subst">${x}</span> * 3) = <span class="hljs-subst">${x*<span class="hljs-number">3</span>}</span>`</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Math.floor(<span class="hljs-subst">${x}</span> * 3) = <span class="hljs-subst">${<span class="hljs-built_in">Math</span>.floor(x*<span class="hljs-number">3</span>)}</span>`</span>) </code></pre> <p>Code: mathrandom <a target="_blank" href="https://www.sololearn.com/compiler-playground/Wg6D8q75F92U">[click]</a></p> <ol> <li>Next, Let's generate computer choice and add it to compuerChoiceDisplay inner HTML</li> </ol> <pre><code class="lang-javascript">randomChoice = choices[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * choices.length)] computerChoiceDisplay.innerHTML = <span class="hljs-string">`ComputerChoice: <span class="hljs-subst">${randomChoice}</span>`</span> </code></pre> <p>Sorry, I am Coding without functions, My instinct was to eliminate too many function calls.</p> <ol> <li>After that, Let's get result</li> </ol> <pre><code class="lang-javascript"><span class="hljs-keyword">switch</span> (userChoice + computerChoice) { <span class="hljs-keyword">case</span> <span class="hljs-string">'RockPaper'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'PaperScissor'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'ScissorRock'</span>: resultDisplay.innerHTML = <span class="hljs-string">'You Lost!'</span> <span class="hljs-keyword">break</span> <span class="hljs-keyword">case</span> <span class="hljs-string">'RockScissor'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'PaperRock'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'ScissorPaper'</span>: resultDisplay.innerHTML = <span class="hljs-string">'You Win!'</span> <span class="hljs-keyword">break</span> <span class="hljs-keyword">case</span> <span class="hljs-string">'RockRock'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'PaperPaper'</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">'ScissorScissor'</span>: resultDisplay.innerHTML = <span class="hljs-string">'Its a Draw!'</span> <span class="hljs-keyword">break</span> } </code></pre> <h1 id="heading-css">CSS</h1> <p>If you want to give styling,</p> <pre><code class="lang-css"><span class="hljs-selector-tag">body</span> { <span class="hljs-attribute">background-color</span>: aliceblue; <span class="hljs-attribute">text-align</span>: center; } <span class="hljs-selector-tag">div</span> { <span class="hljs-attribute">display</span>: inline-block; <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15%</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">30px</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">25%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>; <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">2%</span>; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">1%</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#c6c6c6</span>; <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span> ease; <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">25px</span>) <span class="hljs-built_in">saturate</span>(<span class="hljs-number">180%</span>); } <span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#Rock</span> { <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5%</span>; <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">5%</span>; } <span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#Paper</span> { <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5%</span>; } <span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#Scissor</span> { <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5%</span>; } </code></pre> <h1 id="heading-finally">Finally,</h1> <p>I completed Building Rock Paper Scissor JavaScript Game Taught by ania_kubow.</p> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>createElements</p> </li> <li><p>append() method</p> </li> <li><p>appendChild()</p> </li> <li><p>addEventListener</p> </li> <li><p>CSS text-align,display: inline-block,margin properties</p> </li> <li><p>Completed Building Intermediate level 'Rock Paper Scissors' code project in JavaScript.</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670672543293/ZF9lsqqdA.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-ania-kubow-clickhttpswwwyoutubecomwatchvrwfeg0cezvq">Source: Code with Ania kubow <a target="_blank" href="https://www.youtube.com/watch?v=RwFeg0cEZvQ">[click]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day54</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day54</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sat, 10 Dec 2022 11:46:40 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1670681542682/VSfZ9ylKt.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building - Rock Paper Scissors in JavaScript - Day53 ]]>
</title>
<description>
<![CDATA[ <p>Today #day53 of #100daysofcode, Completed coding and explaining the 'Rock Paper Scissors' code project in JavaScript taught by @ania_kubow.</p> <h1 id="heading-html">HTML</h1> <p>Give Class name to h2 tags</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"computerChoice"</span>&gt;</span>Computer Choice:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"computer-choice"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"userChoice"</span>&gt;</span>User Choice:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user-choice"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"result"</span>&gt;</span>Result: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"result"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> </code></pre> <h1 id="heading-javascript">JavaScript</h1> <ol> <li><p>Create a function to get the result</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>)</span>{ } </code></pre> <p>or you can use arrow function</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> getResult = <span class="hljs-function">()=&gt;</span>{ } </code></pre> </li> <li><p>Now, Write the if conditions when the userchoice and computer choices are equal and different</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">if</span>(computerChoice===userChoice){ result = <span class="hljs-string">'Its a Draw!'</span> } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(computerChoice===r&amp;&amp;userChoice===p){ result = <span class="hljs-string">'You Win!'</span> } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(computerChoice===r&amp;&amp;userChoice===s){ result = <span class="hljs-string">'You Lost!'</span> } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(computerChoice===p&amp;&amp;userChoice===r){ result = <span class="hljs-string">'You Lost!'</span> } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(computerChoice===p&amp;&amp;userChoice===s){ result = <span class="hljs-string">'You Win!'</span> } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(computerChoice===s&amp;&amp;userChoice===r){ result = <span class="hljs-string">'You Win!'</span> } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(computerChoice===s&amp;&amp;userChoice===p){ result = <span class="hljs-string">'You Lost!'</span> } resultDisplay.innerHTML = result } </code></pre> <p>@ania_kubow wrote in the last else if, result = <code>you lose</code> but on the other else if she wrote <code>you lost</code> - just an interesting observation.</p> </li> <li><p>Call the getResult() function in the addEventListener</p> <pre><code class="lang-javascript">possibleChoices.forEach(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> { userChoice = e.target.innerHTML userChoiceDisplay.innerHTML = userChoice generateComputerchoice() getResult() })) </code></pre> </li> </ol> <h1 id="heading-css">CSS</h1> <p>If you want to give style,</p> <ol> <li><p>Give Position property &amp; Margin &amp; box shadow</p> <pre><code class="lang-javascript">.computerChoice{ <span class="hljs-attr">position</span>: fixed; margin-top: <span class="hljs-number">15</span>%; margin-left: <span class="hljs-number">25</span>%; width: <span class="hljs-number">20</span>%; height: <span class="hljs-number">6</span>%; padding-left: <span class="hljs-number">0.8</span>%; padding-top: <span class="hljs-number">0.25</span>%; background-color: rgb(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); border-radius: <span class="hljs-number">10</span>px; backdrop-filter: blur(<span class="hljs-number">25</span>px) saturate(<span class="hljs-number">180</span>%); box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">30</span>px <span class="hljs-number">50</span>px #<span class="hljs-number">0000002</span>d; transition: <span class="hljs-number">0.5</span>s; } </code></pre> </li> </ol> <h1 id="heading-finally">Finally,</h1> <p>I completed Building Rock Paper Scissor JavaScript Game Taught by ania_kubow. [ Thanks ania for retweeting my day52 tweet ]</p> <h1 id="heading-conclusion">Conclusion</h1> <p>Completed Building 'Rock Paper Scissors' code project in JavaScript.</p> <h1 id="heading-code">Code</h1> <ol> <li><p>Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670574659783/cwtu5PJ78.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-ania-kubow-clickhttpswwwyoutubecomwatchvrwfeg0cezvq">Source: Code with Ania kubow <a target="_blank" href="https://www.youtube.com/watch?v=RwFeg0cEZvQ">[click]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day53</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day53</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Fri, 09 Dec 2022 08:40:53 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1670732755635/-cqU0ZUMv.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building - Rock Paper Scissors in JavaScript - Day52 ]]>
</title>
<description>
<![CDATA[ <p>Today #day52 of #100daysofcode, I am coding and explaining 'Rock Paper Scissors' code project in JavaScript taught by @ania_kubow.</p> <h1 id="heading-html">HTML</h1> <p>-</p> <h1 id="heading-javascript">JavaScript</h1> <h2 id="heading-i-target-event-property"><strong>i. Target Event property</strong></h2> <pre><code class="lang-javascript">but[<span class="hljs-number">0</span>].addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span><span class="hljs-built_in">document</span>.write(e.target.innerHTML)) </code></pre> <h3 id="heading-explanation">Explanation</h3> <ol> <li><p><mark>Use innerHTML</mark> or id to target. [ ania_kubow used id, but <em>I added my own idea</em> here to export the button inner HTML instead of id]</p> </li> <li><p>target.innerHTML</p> <pre><code class="lang-javascript">possibleChoices.forEach(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>{ userchoice = e.target.innerHTML userChoiceDisplay.innerHTML = userchoice })) </code></pre> </li> </ol> <p>Now,</p> <p>Let's generate a computer choice,</p> <ol> <li><p>Create a function generatecomputerchoice and call this function inside the EventListener,</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generatecomputerchoice</span>(<span class="hljs-params"></span>)</span>{ } </code></pre> </li> </ol> <h2 id="heading-ii-random-number">ii. Random number</h2> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> p = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-keyword">let</span> randomx = <span class="hljs-built_in">Math</span>.random() <span class="hljs-built_in">document</span>.write(randomx)<span class="hljs-comment">//</span> <span class="hljs-built_in">document</span>.write(<span class="hljs-string">`&lt;br&gt;`</span>) <span class="hljs-keyword">let</span> floorofx = <span class="hljs-built_in">Math</span>.floor(randomx) <span class="hljs-comment">//</span> <span class="hljs-built_in">document</span>.write(floorofx) <span class="hljs-built_in">document</span>.write(<span class="hljs-string">`&lt;br&gt;`</span>) <span class="hljs-keyword">let</span> y = randomx *<span class="hljs-number">3</span> <span class="hljs-built_in">document</span>.write(y) <span class="hljs-built_in">document</span>.write(<span class="hljs-string">`&lt;br&gt;`</span>) y = <span class="hljs-built_in">Math</span>.floor(randomx *<span class="hljs-number">3</span>) <span class="hljs-built_in">document</span>.write(y) </code></pre> <h3 id="heading-explanation-1">Explanation</h3> <ol> <li>Math.random() a random number generator will generate a number between zero and one which is a float type and to convert into an integer type use Math.floor method</li> </ol> <h3 id="heading-code-mathrandomclickhttpswwwsololearncomcompiler-playgroundwtis2edsjut6">Code: mathrandom<a target="_blank" href="https://www.sololearn.com/compiler-playground/WtIs2EDSjut6">[click]</a></h3> <ol> <li><p>Creating random number</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> randomNumber = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">3</span>)+<span class="hljs-number">1</span> <span class="hljs-comment">// or u can use possibleChoices.length</span> </code></pre> </li> </ol> <h3 id="heading-iii-map">iii. Map()</h3> <ul> <li><p>A Map holds key-value pairs where the keys can be any datatype.</p> </li> <li><p>A Map remembers the original insertion order of the keys.</p> </li> <li><p>A Map has a property that represents the size of the map.</p> </li> </ul> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> n = <span class="hljs-number">1</span> <span class="hljs-keyword">let</span> choice = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-number">1</span>,<span class="hljs-string">'Rock'</span>],[<span class="hljs-number">2</span>,<span class="hljs-string">'paper'</span>],[<span class="hljs-number">3</span>,<span class="hljs-string">'Scissor'</span>]]) <span class="hljs-keyword">let</span> res = choice.get(n) <span class="hljs-built_in">console</span>.log(res) <span class="hljs-comment">//Rock</span> </code></pre> <h3 id="heading-code-mapget-clickhttpswwwsololearncomcompiler-playgroundwjidym9afzjo">Code: mapget <a target="_blank" href="https://www.sololearn.com/compiler-playground/WJidyM9AFzJo">[click]</a></h3> <ol> <li><p>assign this random number, if 1 to rock.. using if the condition or advanced use map</p> <pre><code class="lang-javascript"><span class="hljs-keyword">if</span>(randomNumber===<span class="hljs-number">1</span>) computerChoice = <span class="hljs-string">'Rock'</span> or <span class="hljs-keyword">let</span> rps = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-number">1</span>,<span class="hljs-string">'Rock'</span>],[<span class="hljs-number">2</span>,<span class="hljs-string">'Paper'</span>],[<span class="hljs-number">3</span>,<span class="hljs-string">'Scissor'</span>]]) </code></pre> <p>or you can use <code>r = possibleChoices[0].innerHTML</code> to get rock ...</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> r = possibleChoices[<span class="hljs-number">0</span>].innerHTML <span class="hljs-keyword">let</span> p = possibleChoices[<span class="hljs-number">1</span>].innerHTML <span class="hljs-keyword">let</span> s = possibleChoices[<span class="hljs-number">2</span>].innerHTML <span class="hljs-keyword">let</span> rps = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-number">1</span>,r],[<span class="hljs-number">2</span>,p],[<span class="hljs-number">3</span>,s]]) <span class="hljs-comment">//let rps = new Map([[1,'Rock'],[2,'Paper'],[3,'Scissor']])</span> </code></pre> </li> <li><p>now, export this computerChoice to computerChoiceDisplay which is holding the id computer-choice</p> <pre><code class="lang-javascript">computerChoiceDisplay.innerHTML = rpc.get(randomNumber) </code></pre> </li> </ol> <p>Today, we have successfully taken user input and generated computer choices and displayed them.</p> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>Target Event property</p> </li> <li><p>Math.random()</p> </li> <li><p>Map()</p> </li> <li><p>Code</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>Code: mathrandom<a target="_blank" href="https://www.sololearn.com/compiler-playground/WtIs2EDSjut6">[click]</a></p> </li> <li><p>Code: mapget <a target="_blank" href="https://www.sololearn.com/compiler-playground/WJidyM9AFzJo">[click]</a></p> </li> <li><p>Rock Paper Scissor Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670475520830/QnZKH3LM9.png" alt class="image--center mx-auto" /></p> </li> </ol> <h1 id="heading-source-code-with-ania-kubow-clickhttpswwwyoutubecomwatchvrwfeg0cezvq">Source: Code with Ania kubow <a target="_blank" href="https://www.youtube.com/watch?v=RwFeg0cEZvQ">[click]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day52</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day52</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Thu, 08 Dec 2022 05:17:58 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1670477004818/tnvfd_9q4.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Building - Rock Paper Scissors in JavaScript - Day51 ]]>
</title>
<description>
<![CDATA[ <p>Today #day51 of #100daysofcode, I am coding and explaining 'Rock Paper Scissors' code project in JavaScript taught by @ania_kubow.</p> <h1 id="heading-1-html">1. HTML</h1> <ol> <li><p>Give <code>!</code> and press tab and give title name to get the following code,</p> <pre><code class="lang-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> Rock Paper Scissors<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> </code></pre> </li> <li><p>Add the app.js above the body tag at the bottom,</p> <pre><code class="lang-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/app.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </code></pre> </li> <li><p>Give h2 tag and span with an id as shown below</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Computer Choice:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"computer-choice"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> </code></pre> </li> <li><p>create a button with an ID as shown below</p> <pre><code class="lang-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"rock"</span>&gt;</span>Rock<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> </code></pre> </li> </ol> <h1 id="heading-2-javascript">2. JavaScript</h1> <p>let's create a logic where you click rock button, it will be imported to the ID user choice,</p> <ol> <li><p>Use document object &amp; get element by ID() method selector to pick elements with the ID,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> computerChoice = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'computer-choice'</span>) <span class="hljs-keyword">const</span> userchoice = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'user-choice'</span>) <span class="hljs-keyword">const</span> resultDisplay = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'result'</span>) </code></pre> </li> <li><p>Use document object querySelectorAll() method select to pick all button's</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> possibleChoices = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'button'</span>) </code></pre> </li> </ol> <h2 id="heading-i-js-foreach-method">i. JS forEach() Method</h2> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> y, a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>] a.forEach( <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> { <span class="hljs-keyword">if</span> (x === <span class="hljs-number">1</span>) { y = x } } ) <span class="hljs-built_in">console</span>.log(y) </code></pre> <h3 id="heading-explanation">Explanation:</h3> <ol> <li>the above code inserts each value of the array <code>a</code> into the parameter <code>x</code> of an arrow function and checks if the parameter is equal to one and then assign's it to the variable y.</li> </ol> <p>Code: foreach()method <a target="_blank" href="https://www.sololearn.com/compiler-playground/WkBZyIb62CUw">[click]</a></p> <h2 id="heading-ii-js-addeventlistener">ii. JS addEventListener</h2> <pre><code class="lang-javascript">&lt;button&gt; click &lt;/button&gt; <span class="hljs-keyword">let</span> but = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'button'</span>)[<span class="hljs-number">0</span>] but.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span>{<span class="hljs-built_in">document</span>.write(<span class="hljs-string">"hello"</span>)}) </code></pre> <h3 id="heading-explanation-1">Explanation</h3> <ol> <li>in the above code to the first button of index zero, add event listener method is added, when this button is clicked it'll export the 'hello' string.</li> </ol> <h3 id="heading-code-addeventlistner-clickhttpswwwsololearncomcompiler-playgroundwuah7ry1g7t4">Code: addeventlistner <a target="_blank" href="https://www.sololearn.com/compiler-playground/WUAH7rY1G7T4">[click]</a></h3> <p>Now,</p> <h2 id="heading-iii-foreach-method-andamp-addeventlistener-method">iii. forEach() method &amp; addEventListener() method</h2> <p>Let combine the forEach() method and addEventListener() method</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> but = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'button'</span>); <span class="hljs-comment">// Convert the NodeList to an array so we can use the forEach method</span> but = <span class="hljs-built_in">Array</span>.from(but); but.forEach(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">()=&gt;</span>{<span class="hljs-built_in">document</span>.write(<span class="hljs-string">"hello"</span>)})); </code></pre> <h3 id="heading-explanation-2">Explanation:</h3> <ol> <li><p>Got Error: but.forEach is not a function. But for @ania_kubow it worked well.</p> </li> <li><p>Fixed Error: The problem with the original code is that the <code>getElementsByTagName</code> method returns a <code>NodeList</code>, which is not an array and does not have the <code>forEach</code> method. To fix this, we can use the <code>Array.from</code> method to convert the <code>NodeList</code> to an array, which does have the <code>forEach</code> method. Then we can use the <code>forEach</code> method to attach the event listener to each button.</p> </li> </ol> <h2 id="heading-iv-target-event-property">iv. Target Event property</h2> <pre><code class="lang-javascript">but[<span class="hljs-number">0</span>].addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span><span class="hljs-built_in">document</span>.write(e.target.tagName)) </code></pre> <h3 id="heading-explanation-3">Explanation</h3> <ol> <li><p>The target property returns the element that triggered the event, and not necessarily the eventlistener's element.</p> </li> <li><p>The target can be <code>id</code> , <code>tagName</code> , <code>nodeName</code> .</p> </li> </ol> <h3 id="heading-code-addeventlistner-clickhttpswwwsololearncomcompiler-playgroundwuah7ry1g7t4-1">Code: addeventlistner <a target="_blank" href="https://www.sololearn.com/compiler-playground/WUAH7rY1G7T4">[click]</a></h3> <ol> <li><p>To each button using forEach method and add event listener method</p> <pre><code class="lang-javascript">possibleChoices.forEach(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>{ userchoice = e.target.id userChoiceDisplay.innerHTML = userchoice })) </code></pre> <p>In the above code for each button when a click is registered its ID is stored in user choice variable and then this ID is assigned to user choice display variable and it's displayed in the HTML document using the property inner HTML.</p> </li> </ol> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>JS forEach() Method</p> </li> <li><p>JS addEventListener</p> </li> <li><p>forEach() method &amp; addEventListener() method</p> </li> <li><p>Target Event property</p> </li> </ol> <h1 id="heading-code">Code</h1> <ol> <li><p>Rock Paper Scissor Code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670403650705/wyQDKAaJ6.png" alt /></p> </li> </ol> <h1 id="heading-source-code-with-ania-kubow-clickhttpswwwyoutubecomwatchvrwfeg0cezvq">Source: Code with Ania kubow <a target="_blank" href="https://www.youtube.com/watch?v=RwFeg0cEZvQ">[click]</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day51</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/building-rock-paper-scissors-in-javascript-day51</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Wed, 07 Dec 2022 09:03:44 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1670476908201/4SuVKCqYW.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day50 ]]>
</title>
<description>
<![CDATA[ <p>Today #day50 of #100daysofcode, I have completed 8.63 Lesson and 8.64 Module 8 Quiz and 8.65 "Words" code project in the JS course. @Sololearn</p> <h1 id="heading-863-more-on-es6">8.63 More on ES6</h1> <h1 id="heading-1-es6-promises"><strong>1. ES6 Promises</strong></h1> <p>A <strong>Promise</strong> is a better way for asynchronous programming when compared to the common way of using a <strong>setTimeout</strong>() type of method.</p> <p><strong>Consider this example:</strong></p> <pre><code class="lang-javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"hello"</span>); <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"how are you"</span>); }, <span class="hljs-number">1000</span>); }, <span class="hljs-number">1000</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"bye"</span>); </code></pre> <p>Asynchronously the output is printed. 'bye','hello','how are you'</p> <h3 id="heading-explanation">Explanation</h3> <ol> <li><p>The code starts by setting up a function that will print "Work 1" and then "Work 2" every second.</p> </li> <li><p>The code then calls the setTimeout function, which sets up a timer to call the console.log function after 1000 milliseconds (1 second).</p> </li> <li><p>After 1000 milliseconds, the code prints "End."</p> </li> <li><p>The first line of code creates a new function called work1() that will print out "Work 1".</p> </li> <li><p>The next line of code starts another new function called work2() that will also print out "Work 2".</p> </li> <li><p>Then in between these two functions, there is a setTimeout(function() {},1000) statement.</p> </li> <li><p>This statement tells JavaScript to run the console.log("Work 1") command after one second has passed since it was last executed (1000 milliseconds).</p> </li> <li><p>The code attempts to execute a set of console.log() statements in sequence, with the first statement being executed after 1 second and the last statement being executed at 3 seconds.</p> </li> </ol> <p>In ES6 a <strong>promise</strong> looks as shown below,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{ <span class="hljs-keyword">if</span> (success) resolve(result); <span class="hljs-keyword">else</span> reject(<span class="hljs-built_in">Error</span>(<span class="hljs-string">"failure"</span>)); }); </code></pre> <h3 id="heading-explanation-1">Explanation:</h3> <ol> <li><p>The code is a promise that will either resolve with the result of success or reject with an error.</p> </li> <li><p>The code is using the function Promise() which returns a new promise object.</p> </li> <li><p>The function takes two parameters, one for resolving and one for rejecting.</p> </li> <li><p>In this case, we are passing in a function called success which will be executed if the promise resolves successfully and another called failure which will be executed if it rejects.</p> </li> <li><p>In order to create our own custom resolution/rejection functions, we need to use <code>then()</code> method on our promises object like so:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">var</span> myPromise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{ <span class="hljs-comment">// Work </span> }); myPromise.then(successFunc); <span class="hljs-comment">// This is where you would write your custom resolution/rejection function</span> </code></pre> </li> <li><p>The code will create a promise that resolves with the result of success.</p> </li> <li><p>If the code fails, it will reject with an error message called failure.</p> </li> </ol> <p>The <code>Promise</code> constructor takes a function as an argument. This function, known as the executor function, is used to perform the asynchronous operation. The executor function takes two arguments, <code>resolve</code> and <code>reject</code>, which are callback functions that are used to signal the completion of the asynchronous operation.</p> <p>If the asynchronous operation is successful, the <code>resolve</code> callback should be called with the result of the operation. This will cause the <code>Promise</code> to be in a fulfilled state, and any code that is waiting for the <code>Promise</code> to be fulfilled will be able to access the result of the operation.</p> <p>If the asynchronous operation fails, the <code>reject</code> callback should be called with an error object. This will cause the <code>Promise</code> to be in a rejected state, and any code that is waiting for the <code>Promise</code> to be fulfilled will be notified that the operation failed.</p> <p>In this specific example, the executor function checks if the <code>success</code> variable is <code>true</code>. If <code>success</code> is <code>true</code>, the <code>resolve</code> callback is called with the <code>result</code> of the asynchronous operation. If <code>success</code> is <code>false</code>, the <code>reject</code> callback is called with an error object that indicates that the operation failed.</p> <p>Once the <code>Promise</code> is created, it can be used with the <code>then</code> method to specify what should happen when the <code>Promise</code> is fulfilled or rejected. For example, you could use the <code>then</code> method to log the result of the operation to the console if the operation is successful, or log an error message if the operation fails.</p> <p><strong>For Example:</strong></p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncFunc</span>(<span class="hljs-params">meet</span>) </span>{ <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>{ <span class="hljs-keyword">if</span> (meet === <span class="hljs-string">""</span>) reject(<span class="hljs-built_in">Error</span>(<span class="hljs-string">"Nothing"</span>)); <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ resolve(meet); }, <span class="hljs-number">1000</span>); }); } asyncFunc(<span class="hljs-string">"hello"</span>) <span class="hljs-comment">// Task 1</span> .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>{ <span class="hljs-built_in">console</span>.log(result); <span class="hljs-keyword">return</span> asyncFunc(<span class="hljs-string">"how are you"</span>); <span class="hljs-comment">// Task 2</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{ <span class="hljs-built_in">console</span>.log(error); }) .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>{ <span class="hljs-built_in">console</span>.log(result); }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{ <span class="hljs-built_in">console</span>.log(error); }); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"bye"</span>); </code></pre> <p>Asynchronously the output is printed. 'bye','hello','how are you'</p> <h3 id="heading-code-asynchronousclickhttpswwwsololearncomcompiler-playgroundwl9vbmyisb2s">Code: asynchronous<a target="_blank" href="https://www.sololearn.com/compiler-playground/Wl9vBmYisB2S">[click]</a></h3> <h3 id="heading-explanation-2">Explanation</h3> <ol> <li><p>The code starts by creating a new Promise object.</p> </li> <li><p>The function that is passed to the constructor of the promise will be called when the promise resolves or rejects.</p> </li> <li><p>In this case, it will resolve with "hello" and reject with an error if there is nothing else in meet.</p> </li> <li><p>Then, it sets up a timeout for 1000 milliseconds so that if anything happens before then, it will resolve immediately without waiting for anything else to happen first.</p> </li> <li><p>The next line calls asyncFunc("how are you") which creates another task and returns a new promise object.</p> </li> <li><p>This time, instead of resolving or rejecting based on whether there's something in meet, it waits until after 1000 milliseconds have passed and then resolves with "how are you".</p> </li> <li><p>The code will execute the function asyncFunc("hello") and then wait for 1000 milliseconds before executing the next task.</p> </li> </ol> <h3 id="heading-explanation-2-1">Explanation 2</h3> <ol> <li><p>The code starts by defining a function called asyncFunc.</p> </li> <li><p>This function takes one argument, meet, which is the string "hello".</p> </li> <li><p>The first line of code in the body of this function creates a new Promise object and sets its resolve and reject functions to call the setTimeout() method with an interval of 1000 milliseconds.</p> </li> <li><p>The next line calls asyncFunc("how are you") on another promise object that will be created later in this program.</p> </li> <li><p>The last line prints "bye" to console before exiting the program.</p> </li> <li><p>The code creates a function that takes in a string, and returns a promise.</p> </li> <li><p>The function will return the string if the meet variable is empty, or it will set up a timeout to resolve with the meet variable after 1 second.</p> </li> </ol> <h1 id="heading-2-iterators-amp-generators"><strong>2. Iterators &amp; Generators</strong></h1> <h2 id="heading-21-symboliterator"><strong>2.1 Symbol.iterator</strong></h2> <p>It is the default iterator for an object. The for...of loops are based on this type of iterator. </p> <p>In the example below, we will see how we should implement it and how <strong>generator functions</strong> are used.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> myIterableObj = { [<span class="hljs-built_in">Symbol</span>.iterator] : <span class="hljs-function"><span class="hljs-keyword">function</span>* (<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>; <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>; <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>; } }; <span class="hljs-built_in">console</span>.log([...myIterableObj]); <span class="hljs-comment">// [ 1, 2, 3 ]</span> </code></pre> <p>First, we create an object, and use the <strong>Symbol.iterator</strong> and <strong>generator function</strong> to fill it with some values. </p> <p>In the second line of the code, we use a <strong>*</strong> with the <strong>function</strong> keyword. It's called a <strong>generator function (or gen function)</strong>.</p> <h3 id="heading-explanation-3">Explanation:</h3> <ol> <li><p>The <code>myIterableObj</code> object is an iterable. It has a method called <code>Symbol.iterator</code>, which is a generator function. When this function is called, it yields the values 1, 2, and 3.</p> </li> <li><p>The spread operator (<code>...</code>) is used to spread the values of the iterable into an array. When we call <code>console.log([...myIterableObj])</code>, the <code>Symbol.iterator</code> method is called and its yielded values are spread into a new array, which is logged to the console as <code>[1, 2, 3]</code>.</p> </li> <li><p>This is a concise way to create an array from an iterable object.</p> </li> </ol> <h3 id="heading-note">Note:</h3> <ol> <li><strong>yield</strong> keyword is used to resume or pause a generator function asynchronously.</li> </ol> <p>For example, here is a simple case of how <strong>gen functions</strong> can be useful:</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">idMaker</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; <span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">5</span>) <span class="hljs-keyword">yield</span> index++; } <span class="hljs-keyword">var</span> gen = idMaker(); <span class="hljs-built_in">console</span>.log(gen.next().value); </code></pre> <p>We can exit and re-enter generator functions later. Their variable bindings (context) will be saved across re-entrances. They are a very powerful tool for asynchronous programming, especially when combined with Promises. They can also be useful for creating loops with special requirements.</p> <h3 id="heading-explanation-4">Explanation</h3> <ol> <li><p>The <code>idMaker</code> function is a generator function. It has a local variable called <code>index</code> that is initialized to 0. The function uses a <code>while</code> loop to yield the value of <code>index</code> as long as <code>index</code> is less than 5. After each iteration of the loop, <code>index</code> is incremented by 1.</p> </li> <li><p>When we call <code>idMaker</code> and assign the returned generator object to the <code>gen</code> variable, we can then call the <code>next()</code> method on <code>gen</code> to get the next value yielded by the generator. The <code>next</code> method returns an object with two properties: <code>value</code>, which is the yielded value, and <code>done</code>, which is a boolean that indicates whether the generator has finished executing.</p> </li> <li><p>When we call <code>console.log(gen.next().value)</code>, the generator starts executing and yields the first value, which is 0. This value is logged to the console. The generator then continues executing, incrementing <code>index</code> and yielding the next value, 1, on the next call to <code>next()</code>. This process continues until <code>index</code> is equal to 5, at which point the <code>while</code> loop terminates and the generator function finishes executing.</p> </li> </ol> <p>We can nest <strong>generator functions</strong> inside each other to create more complex structures and pass them arguments while we are calling them.<br />The example below will show a useful case of how we can use <strong>generator functions</strong> and <strong>Symbol.iterators</strong> together.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'16'</span>]; <span class="hljs-keyword">const</span> my_obj = { [<span class="hljs-built_in">Symbol</span>.iterator]: <span class="hljs-function"><span class="hljs-keyword">function</span>*(<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> index <span class="hljs-keyword">of</span> arr) { <span class="hljs-keyword">yield</span> <span class="hljs-string">`<span class="hljs-subst">${index}</span>`</span>; } } }; <span class="hljs-keyword">const</span> all = [...my_obj] <span class="hljs-comment">/* Here you can replace the '[...my_obj]' with 'arr'. */</span> .map(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> <span class="hljs-built_in">parseInt</span>(i, <span class="hljs-number">10</span>)) .map(<span class="hljs-built_in">Math</span>.sqrt) .filter(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i &lt; <span class="hljs-number">5</span>) <span class="hljs-comment">/* try changing the value of 5 to 4 see what happens.*/</span> .reduce(<span class="hljs-function">(<span class="hljs-params">i, d</span>) =&gt;</span> i + d); <span class="hljs-comment">/* comment this line while you are changing the value of the line above */</span> <span class="hljs-built_in">console</span>.log(all); </code></pre> <p>We create an object of 7 elements by using <strong>Symbol.iterator</strong> and <strong>generator functions</strong>. In the second part, we assign our object to a constant <strong>all</strong>. At the end, we print its value.</p> <h3 id="heading-explanation-5">Explanation</h3> <ol> <li><p>The code iterates over the array arr and prints out each number in that array.</p> </li> <li><p>The code then calls a function called Math.sqrt to calculate the square root of all numbers in the list, which is filtered so only those less than 5 are printed out.</p> </li> <li><p>The code iterates through my_obj and calculates how many times each symbol appears in it by using parseInt() on each item with 10 as its base value.</p> </li> <li><p>Then, it calculates the square root of all values from 0-9 by calling Math.sqrt().</p> </li> <li><p>Finally, it filters for any number less than 4 before adding them together with reduce().</p> </li> <li><p>The code will result in the following output: 0, 1, 4, a, 5</p> </li> </ol> <p>In this code, <code>my_obj</code> is an object that has a method called <code>Symbol.iterator</code> that is a generator function. This generator function loops over the elements in the array <code>arr</code> and yields each element as a string.</p> <p>In JavaScript, a generator function is a special type of function that can be used to create an iterator. When a generator function is called, it doesn't run the code inside the function right away. Instead, it returns a special type of iterator called a generator. This generator can be used to iterate over the values that are yielded by the generator function.</p> <p>The <code>Symbol.iterator</code> method is a special method that is called by the JavaScript runtime when an object needs to be iterated over, such as in a for-of loop. By defining this method, <code>my_obj</code> becomes an iterable object, which means that it can be used with a for-of loop or with other language constructs that expect an iterable.</p> <p>In this specific example, <code>my_obj</code> is being used to convert the elements of the <code>arr</code> array into strings. The generator function inside <code>my_obj</code> loops over the elements in <code>arr</code> and yields each element as a string. This allows the elements of the array to be iterated over and processed one at a time.</p> <h1 id="heading-3-built-in-methods"><strong>3. Built-in Methods</strong></h1> <p>ES6 also has new built-in method,</p> <h2 id="heading-31-array-element-finding">3.1 <strong>Array Element Finding</strong></h2> <p>Find the first element of an array by its value,</p> <p>Legacy way,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> num = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>].filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>{ <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">6</span>; })[<span class="hljs-number">0</span>]; <span class="hljs-built_in">console</span>.log(num);<span class="hljs-comment">//8</span> </code></pre> <p>In ES6,</p> <h3 id="heading-code-arrayfilter-clickhttpswwwsololearncomcompiler-playgroundwegk1g1x87un">Code: arrayfilter <a target="_blank" href="https://www.sololearn.com/compiler-playground/WEgk1g1x87un">[click]</a></h3> <h2 id="heading-32-repeating-strings"><strong>3.2 Repeating Strings</strong></h2> <p>Repeat a string multiple times,</p> <p>Legacy way,</p> <pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span> + <span class="hljs-number">0</span>).join(<span class="hljs-string">"hello"</span>));<span class="hljs-comment">//''</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span> + <span class="hljs-number">0</span>).join(<span class="hljs-string">"hello"</span>));<span class="hljs-comment">//''</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span> + <span class="hljs-number">1</span>).join(<span class="hljs-string">"hello"</span>));<span class="hljs-comment">//''</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>).join(<span class="hljs-string">"hello1"</span>));<span class="hljs-comment">//hello1</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span> + <span class="hljs-number">1</span>).join(<span class="hljs-string">"hello2"</span>));<span class="hljs-comment">//hello2hello2</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span> + <span class="hljs-number">2</span>).join(<span class="hljs-string">"hello2"</span>));<span class="hljs-comment">//hello2hello2</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span> + <span class="hljs-number">2</span>).join(<span class="hljs-string">"hello3"</span>));<span class="hljs-comment">//hello3hello3hello3 </span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span> + <span class="hljs-number">2</span>).join(<span class="hljs-string">"hello4"</span>));<span class="hljs-comment">//hello4hello4hello4hello4 </span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span> + <span class="hljs-number">3</span>).join(<span class="hljs-string">"hello4"</span>));<span class="hljs-comment">//hello4hello4hello4hello4 </span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span> + <span class="hljs-number">3</span>).join(<span class="hljs-string">"hello5"</span>));<span class="hljs-comment">//hello5hello5hello5hello5hello5 </span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span> + <span class="hljs-number">3</span>).join(<span class="hljs-string">"hello5"</span>));<span class="hljs-comment">//hello5hello5hello5hello5hello5 </span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">4</span> + <span class="hljs-number">3</span>).join(<span class="hljs-string">"hello6"</span>));<span class="hljs-comment">//hello6hello6hello6hello6hello6hello6 </span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span> + <span class="hljs-number">4</span>).join(<span class="hljs-string">"hello6"</span>));<span class="hljs-comment">//hello6hello6hello6hello6hello6hello6</span> </code></pre> <p>In ES6,</p> <h3 id="heading-code-stringrepeat-clickhttpswwwsololearncomcompiler-playgroundw0dr6zzi6or3">Code: stringrepeat <a target="_blank" href="https://www.sololearn.com/compiler-playground/W0Dr6ZZi6oR3">[click]</a></h3> <h2 id="heading-33-searching-strings"><strong>3.3 Searching Strings</strong></h2> <p>Find the position of the text in the string,</p> <p>Legacy way,</p> <pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"ironman"</span>.indexOf(<span class="hljs-string">"hulk"</span>,<span class="hljs-number">5</span>))<span class="hljs-comment">//-1</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"ironman"</span>.indexOf(<span class="hljs-string">"i"</span>,<span class="hljs-number">5</span>)) <span class="hljs-comment">//-1</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"ironman"</span>.indexOf(<span class="hljs-string">"i"</span>,<span class="hljs-number">0</span>)) <span class="hljs-comment">//0</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"ironman"</span>.indexOf(<span class="hljs-string">"i"</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">2</span>) <span class="hljs-comment">//false</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"ironman"</span>.indexOf(<span class="hljs-string">"i"</span>,<span class="hljs-number">0</span>)!==<span class="hljs-number">-1</span>) <span class="hljs-comment">//true</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"ironmanhasmarksuite"</span>.indexOf(<span class="hljs-string">"ui"</span>)==<span class="hljs-number">8</span>) <span class="hljs-comment">//false</span> </code></pre> <p>In ES6,</p> <h3 id="heading-code-findposofstring-clickhttpswwwsololearncomcompiler-playgroundw0dr6zzi6or3">Code: findposofstring <a target="_blank" href="https://www.sololearn.com/compiler-playground/W0Dr6ZZi6oR3">[click]</a></h3> <h1 id="heading-images">Images</h1> <ol> <li><p>JavaScript course completed</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670321711817/615a4BbME.png" alt /></p> </li> </ol> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>ES6 Promises</p> </li> <li><p>Symbol.iterator</p> </li> <li><p>Array Element Finding</p> </li> <li><p>Repeating Strings</p> </li> <li><p>Searching Strings</p> </li> <li><p>Quiz</p> </li> <li><p>4 Codepractice problems</p> </li> <li><p>"Words" code project</p> </li> </ol> <h1 id="heading-my-code">My Code:</h1> <ol> <li><p>Code: asynchronous <a target="_blank" href="https://www.sololearn.com/compiler-playground/Wl9vBmYisB2S">[click]</a></p> </li> <li><p>Code: arrayfilter <a target="_blank" href="https://www.sololearn.com/compiler-playground/WEgk1g1x87un">[click]</a></p> </li> <li><p>Code: stringrepeat <a target="_blank" href="https://www.sololearn.com/compiler-playground/W0Dr6ZZi6oR3">[click]</a></p> </li> <li><p>Code: findposofstring <a target="_blank" href="https://www.sololearn.com/compiler-playground/W0Dr6ZZi6oR3">[click]</a></p> </li> <li><p>"Words" code project</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670322644722/9HGzFeEdx.png" alt /></p> </li> </ol> <h1 id="heading-certificate-javascript-linkhttpswwwsololearncomcertificatesct-im0hh9ha">Certificate Javascript <a target="_blank" href="https://www.sololearn.com/certificates/CT-IM0HH9HA">[link]</a></h1> <ol> <li><p>My Javascript Course completion certificate from sololearn.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670322577888/HgCPqaLXi.png" alt /></p> </li> </ol> <h1 id="heading-references-sololearnhttpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day50</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day50</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Tue, 06 Dec 2022 10:38:28 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669363970480/JKWkrSfu3.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day49 ]]>
</title>
<description>
<![CDATA[ <p>Today #day49 of #100daysofcode, I have completed 61.1 &amp; 62.1 Lessons and 61.2 "Average exam score" &amp; 62.2 "Employee map" code project 4 code practice in the JS course. @Sololearn</p> <h3 id="heading-8-ecmascript-6">8. ECMAScript 6</h3> <h1 id="heading-1-es6-classes">1. ES6 Classes</h1> <h1 id="heading-11-classes-in-es6"><strong>1.1 Classes in ES6</strong></h1> <p>Create multiple objects of the same structure using class.</p> <p>Create a class using the keyboard class in JavaScript, this class contains a constructor method that is used for initializing new classes.</p> <p>For example</p> <pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">circle</span> </span>{ <span class="hljs-keyword">constructor</span>(radius, angle) { <span class="hljs-built_in">this</span>.radius = radius; <span class="hljs-built_in">this</span>.angle = angle; } } </code></pre> <p>Create a new object using the keyword new off and already declared class.<br />keyword <strong>new</strong>.</p> <p>For example:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> circle2 = <span class="hljs-keyword">new</span> circle (<span class="hljs-number">5</span>, <span class="hljs-number">0</span>); <span class="hljs-keyword">const</span> arc = <span class="hljs-keyword">new</span> circle (<span class="hljs-number">5</span>, <span class="hljs-number">50</span>); </code></pre> <h3 id="heading-note">Note:</h3> <ul> <li><p>function declarations are hosted i.e you can access it before declaring it.</p> </li> <li><p>Class declarations are not hosted i.e you can't access it before declaring it if you access it before declaring the class you will get a reference error.</p> </li> </ul> <p>A class can be named or unnamed when it is declared with the class expression, in named class looks like,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">var</span> circle = <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">circle</span> </span>{ <span class="hljs-keyword">constructor</span>(radius, angle) { <span class="hljs-built_in">this</span>.radius = radius; <span class="hljs-built_in">this</span>.angle = angle; } } </code></pre> <p>when you define an unnamed class expression, a variable is simply assign the class definition</p> <pre><code class="lang-javascript"><span class="hljs-keyword">var</span> circle = <span class="hljs-class"><span class="hljs-keyword">class</span> </span>{ <span class="hljs-keyword">constructor</span>(radius, angle) { <span class="hljs-built_in">this</span>.radius = radius; <span class="hljs-built_in">this</span>.angle = angle; } } </code></pre> <h3 id="heading-note-1">Note:</h3> <ul> <li><p>The <strong>constructor</strong> is a special method which is used for creating and initializing an object created with a class.</p> </li> <li><p>You cannot define more than one constructor per class.</p> </li> </ul> <h2 id="heading-12-class-methods-in-es6"><strong>1.2 Class Methods in ES6</strong></h2> <p>ES6 introduced a shorthand that does not require the keyword <strong>function</strong> for a function assigned to a method's name.</p> <p>One type of class method is the <strong>prototype method</strong>, which is available to objects of the class.<br /><strong>For Example:</strong></p> <pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">circle</span> </span>{ <span class="hljs-keyword">constructor</span>(radius, angle) { <span class="hljs-built_in">this</span>.radius = radius; <span class="hljs-built_in">this</span>.angle = angle; } <span class="hljs-keyword">get</span> <span class="hljs-title">area</span>() { <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.calcArea(); } calcArea() { <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.PI * <span class="hljs-built_in">this</span>.radius * <span class="hljs-built_in">this</span>.radius; } } <span class="hljs-keyword">const</span> circle2 = <span class="hljs-keyword">new</span> circle(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>); <span class="hljs-built_in">console</span>.log(circle2.area); <span class="hljs-comment">// 25</span> </code></pre> <p>In the code above, <strong>area</strong> is a getter, <strong>calcArea</strong> is a method.</p> <p>Static method is another type of method in which you cannot call it through the class instance</p> <p>In an application, we create utility functions using static methods.</p> <pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">point</span> </span>{ <span class="hljs-keyword">constructor</span>(x,y){ <span class="hljs-built_in">this</span>.x=x <span class="hljs-built_in">this</span>.y=y } <span class="hljs-keyword">static</span> equation(p1,p2){ <span class="hljs-keyword">let</span> m = (p1.y-p2.y)/(p1.x-p2.x), c = p1.y-p1.x <span class="hljs-keyword">return</span> <span class="hljs-string">`y=<span class="hljs-subst">${m}</span>x+<span class="hljs-subst">${c}</span>`</span> } } <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> point(<span class="hljs-number">2</span>,<span class="hljs-number">7</span>) <span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> point(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>) <span class="hljs-built_in">console</span>.log(point.equation(p1,p2)) </code></pre> <p>As you can see, the static <strong>distance</strong> method is called directly using the class name, without an object.</p> <h3 id="heading-code-equation-of-line-codeclickhttpswwwsololearncomcompiler-playgroundww79blr9pb4g">Code: Equation of line code<a target="_blank" href="https://www.sololearn.com/compiler-playground/Ww79blR9pb4G">[Click]</a></h3> <h2 id="heading-13-inheritance-in-es6">1.3 <strong>Inheritance in ES6</strong></h2> <p>Use the keyboard extend to create a child in the class declaration or class expression.</p> <pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">human</span> </span>{ <span class="hljs-keyword">constructor</span>(name) { <span class="hljs-built_in">this</span>.name = name; } vision () { <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">' can see.'</span>); } } <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">human</span> </span>{ vision() { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">this</span>.name}</span> always winks`</span>); } } <span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> man (<span class="hljs-string">'joey'</span>); student.vision(); <span class="hljs-comment">// joey winks</span> </code></pre> <h3 id="heading-code-inheritance-code-clickhttpswwwsololearncomcompiler-playgroundwca6kj1yj1qq">Code: Inheritance code <a target="_blank" href="https://www.sololearn.com/compiler-playground/WCa6kJ1Yj1QQ">[click]</a></h3> <p>In the above code man is a child of human inheriting human properties.</p> <p>If there is a constructor present in the subclass, it needs to first call <strong>super</strong>() before using <strong>this</strong>. Also, the <strong>super</strong> keyword is used to call parent's methods.</p> <h3 id="heading-code-inheritance-super-code-clickhttpswwwsololearncomcompiler-playgroundw0bf2pgziwrh">Code: Inheritance super code <a target="_blank" href="https://www.sololearn.com/compiler-playground/W0bF2pgZIWRH">[click]</a></h3> <p>In the above code the parents vision method is called using the Super keyword.</p> <h3 id="heading-2-es6-map-amp-set">2. ES6 Map &amp; Set</h3> <h2 id="heading-21-es6-map">2.1 <strong>ES6 Map</strong></h2> <p>A <strong>Map</strong> object can be used to hold <strong>key/value</strong> pairs. A key or value in a map can be anything (objects and primitive values).</p> <p>The syntax <strong>new Map([iterable])</strong> creates a Map object where <strong>iterable</strong> is an array or any other iterable object whose elements are arrays (with a key/value pair each). </p> <p>An <strong>Object</strong> is similar to <strong>Map</strong> but there are important differences that make using a Map preferable in certain cases:</p> <ol> <li><p>The keys can be any type including functions, objects, and any primitive.</p> </li> <li><p>You can get the size of a Map.</p> </li> <li><p>You can directly iterate over Map.</p> </li> <li><p>Performance of the Map is better in scenarios involving frequent addition and removal of key/value pairs. @sololearn</p> </li> </ol> <p><strong>Methods</strong></p> <ol> <li><p><strong>set(key, value)</strong> Adds a specified key/value pair to the map. If the specified key already exists, value corresponding to it is replaced with the specified value.</p> </li> <li><p><strong>get(key)</strong> Gets the value corresponding to a specified key in the map. If the specified key doesn't exist, undefined is returned.</p> </li> <li><p><strong>has(key)</strong> Returns true if a specified key exists in the map and false otherwise.</p> </li> <li><p><strong>delete(key)</strong> Deletes the key/value pair with a specified key from the map and returns true. Returns false if the element does not exist.</p> </li> <li><p><strong>clear()</strong> Removes all key/value pairs from map.</p> </li> <li><p><strong>keys()</strong> Returns an Iterator of keys in the map for each element.</p> </li> <li><p><strong>values()</strong> Returns an Iterator of values in the map for each element.</p> </li> <li><p><strong>entries()</strong> Returns an Iterator of array[key, value] in the map for each element. @sololearn</p> </li> </ol> <h3 id="heading-code-map-methodsclickhttpswwwsololearncomcompiler-playgroundwy3auoxko4kb">Code: Map Methods<a target="_blank" href="https://www.sololearn.com/compiler-playground/Wy3auoXKO4kb">[click]</a></h3> <p>Note:</p> <ol> <li><strong>Map</strong> supports different data types i.e. 1 and "1" are two different keys/values.</li> </ol> <h1 id="heading-22-es6-set"><strong>2.2 ES6 Set</strong></h1> <p>A <strong>Set</strong> object can be used to hold <strong>unique</strong> values (no repetitions are allowed).</p> <p>A value in a set can be anything (objects and primitive values).</p> <p>The syntax <strong>new Set([iterable])</strong> creates a Set object where <strong>iterable</strong> is an array or any other iterable object of values.</p> <p>The <strong>size</strong> property returns the number of distinct values in a set.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> square = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">16</span>]) <span class="hljs-built_in">console</span>.log(square.size) </code></pre> <p><strong>Methods</strong></p> <ol> <li><p><strong>add(value)</strong> Adds a new element with the given value to the Set.</p> </li> <li><p><strong>delete(value)</strong> Deletes a specified value from the set.</p> </li> <li><p><strong>has(value)</strong> Returns true if a specified value exists in the set and false otherwise.</p> </li> <li><p><strong>clear()</strong> Clears the set.</p> </li> <li><p><strong>values()</strong> Returns an Iterator of values in the set.</p> </li> </ol> <h3 id="heading-note-2"><strong>Note:</strong></h3> <p><strong>Set</strong> supports different data types i.e. <strong>1</strong> and <strong>"1"</strong> are two different values.<br />NaN and undefined can also be stored in Set.</p> <h3 id="heading-code-set-methods-clickhttpswwwsololearncomcompiler-playgroundwpgq8mhzx6r4">Code: set methods <a target="_blank" href="https://www.sololearn.com/compiler-playground/Wpgq8mHzx6R4">[click]</a></h3> <h1 id="heading-images">Images</h1> <ul> <li><p>8.61 8.62 completed</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670225206439/AaPmKhGGf.png" alt /></p> </li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>Classes in ES6</p> </li> <li><p>Class Methods in ES6</p> </li> <li><p>Inheritance in ES6</p> </li> <li><p>ES6 Map</p> </li> <li><p>ES6 Set</p> </li> <li><p>"Average exam score" code project</p> </li> <li><p>"Employee map" code project</p> </li> <li><p>Quiz</p> </li> <li><p>Code projects</p> </li> </ol> <h1 id="heading-my-code">My Code:</h1> <ol> <li><p>Code: Equation of line code<a target="_blank" href="https://www.sololearn.com/compiler-playground/Ww79blR9pb4G">[Click]</a></p> </li> <li><p>"Average exam score" code project</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670217470947/AnZjETcp1.png" alt /></p> </li> <li><p>Code: Inheritance super code <a target="_blank" href="https://www.sololearn.com/compiler-playground/W0bF2pgZIWRH">[click]</a></p> </li> <li><p>Code: Map Methods<a target="_blank" href="https://www.sololearn.com/compiler-playground/Wy3auoXKO4kb">[click]</a></p> </li> <li><p>"Employee map" code project</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670223507819/Ka6cAprtt.png" alt /></p> </li> <li><p>Code: set methods <a target="_blank" href="https://www.sololearn.com/compiler-playground/Wpgq8mHzx6R4">[click]</a></p> </li> </ol> <h1 id="heading-references-sololearnhttpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day49</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day49</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Mon, 05 Dec 2022 07:36:52 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669363910975/F4JMdHsZU.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day48 ]]>
</title>
<description>
<![CDATA[ <p>Today #day48 of #100daysofcode, I have completed 60.1 Lesson and 60.2 "Summary calculator" code practice problem in the JS course. @Sololearn</p> <h3 id="heading-ecmascript-6">ECMAScript 6</h3> <h1 id="heading-rest-amp-spread">Rest &amp; Spread</h1> <h2 id="heading-es6-rest-parameters"><strong>ES6 Rest Parameters</strong></h2> <p>Before 6 if you wanted to pass a variable number of arguments, you could use the argument object, an array-like object to access the parameters using the `index of()` method.<br />For example, the below function checks if an array contains all the arguments passed:</p> <p><code>arr.indexOf(num)</code> returns `-1` when the num is not present respective to the index.</p> <pre><code class="lang-css"><span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">containsAll</span>(<span class="hljs-selector-tag">arr</span>) { console.log(arguments[0]+'\n'); // to print the array x for (let k = 1; k &lt; arguments.length; k++) { let num = arguments[k]; if (arr.indexOf(num) === -1) { return false; } } <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">true</span>; } <span class="hljs-selector-tag">let</span> <span class="hljs-selector-tag">x</span> = <span class="hljs-selector-attr">[2, 4, 6, 7]</span>; <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">containsAll</span>(<span class="hljs-selector-tag">x</span>, 2, 4, 7)+'\<span class="hljs-selector-tag">n</span>'); <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">containsAll</span>(<span class="hljs-selector-tag">x</span>, 6, 4, 9)); </code></pre> <p>We can pass any number of arguments to the function and access it using the <strong>arguments</strong> object.<br />While this works, ES6 provides a more readable syntax for achieving a variable number of parameters through the use of a rest parameter:</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">containsAll</span>(<span class="hljs-params">arr, ...nums</span>) </span>{ <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> num <span class="hljs-keyword">of</span> nums) { <span class="hljs-keyword">if</span> (arr.indexOf(num) === <span class="hljs-number">-1</span>) { <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; } } <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; } </code></pre> <p>The <strong>...nums</strong> parameter is called a <strong>rest parameter</strong>. It takes all the "extra" arguments passed to the function. The three dots (...) are called the <strong>Spread operator</strong>.</p> <p>Note:</p> <ul> <li>Only the last parameter of a function may be marked as a rest parameter. If there are no extra arguments, the rest parameter will simply be an empty array; the rest parameter will never be <strong>undefined</strong>.</li> </ul> <h2 id="heading-the-spread-operator"><strong>The Spread Operator</strong></h2> <p>This operator is similar to the Rest Parameter, but it has another purpose when used in objects or arrays or function calls (arguments).</p> <h3 id="heading-spread-in-function-calls"><strong>Spread in function calls</strong></h3> <p>It is common to pass the elements of an array as arguments to a function.</p> <p>Before ES6, we used the following method:</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">w, x, y, z</span>) </span>{ <span class="hljs-built_in">console</span>.log(w + x + y + z); } <span class="hljs-keyword">var</span> args = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; myFunction.apply(<span class="hljs-literal">null</span>, args.concat(<span class="hljs-number">4</span>)); <span class="hljs-comment">// concat adds 4 to the args array</span> </code></pre> <p>args.concat(4) adds 4 to the args array.</p> <p>ES6 provides an easy way to do the example above with <strong>spread operators</strong></p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> myFunction = <span class="hljs-function">(<span class="hljs-params">w, x, y, z</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(w + x + y + z); }; <span class="hljs-keyword">let</span> args = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; myFunction(...args, <span class="hljs-number">4</span>); </code></pre> <p>Example:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">var</span> dateFields = [<span class="hljs-number">1970</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]; <span class="hljs-comment">// 1 Jan 1970 </span> <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(...dateFields); <span class="hljs-built_in">console</span>.log(date); </code></pre> <h2 id="heading-spread-in-array-literals"><strong>Spread in array literals</strong></h2> <p>Before ES6, we used the splice() method syntax to add an item at middle of an array:</p> <p>In splice() method takes two parameters, the first one is the index position and the second is the remove indexes. second parameter = <code>0</code> will add elements.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">"One"</span>, <span class="hljs-string">"Two"</span>, <span class="hljs-string">"Five"</span>]; arr.splice(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">"Three"</span>); arr.splice(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-string">"Four"</span>); arr.push(<span class="hljs-string">'Five'</span>) <span class="hljs-comment">// will add five</span> <span class="hljs-built_in">console</span>.log(arr); </code></pre> <h3 id="heading-code-splice-and-push-method-clickhttpswwwsololearncomcompiler-playgroundwvelsam1drm5">Code: splice and push method <a target="_blank" href="https://www.sololearn.com/compiler-playground/WvELSAm1dRM5">[click]</a></h3> <p>You can use methods such as push, splice, and concat, for example, to achieve this in different positions of the array.</p> <p>However, in ES6 the spread operator lets us do this more easily:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> newnum = [<span class="hljs-string">'Three'</span>, <span class="hljs-string">'Four'</span>]; <span class="hljs-keyword">let</span> allnum = [<span class="hljs-string">'One'</span>, <span class="hljs-string">'Two'</span>, ...newnum, <span class="hljs-string">'Five'</span>]; <span class="hljs-built_in">console</span>.log(allnum); </code></pre> <p>Simply use <code>...</code> called the spread operator followed ny the variable name.</p> <h2 id="heading-spread-in-object-literals"><strong>Spread in object literals</strong></h2> <p>In objects it copies the own enumerable properties from the provided object onto a new object.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> colours = { <span class="hljs-attr">c1</span>: <span class="hljs-string">'red'</span>, <span class="hljs-attr">c2</span>: <span class="hljs-string">'blue'</span> }; <span class="hljs-keyword">const</span> fruits = { <span class="hljs-attr">f1</span>: <span class="hljs-string">'apple'</span>, <span class="hljs-attr">f2</span>: <span class="hljs-string">'berry'</span> }; <span class="hljs-keyword">const</span> copyoffruits = { ...fruits }; <span class="hljs-keyword">const</span> fruitsandcolors = { ...fruits, ...colours }; <span class="hljs-built_in">console</span>.log(copyoffruits) <span class="hljs-built_in">console</span>.log(fruitsandcolors) <span class="hljs-comment">//{f1: "apple", f2: "berry", c1: "red", c2: "blue"}</span> </code></pre> <p>code: Spread operator in object code practice<a target="_blank" href="https://www.sololearn.com/compiler-playground/Wre0tz4kZDr3">[click]</a></p> <p>However, if you try to merge them you will not get the result you expected:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> obj1 = { <span class="hljs-attr">foo</span>: <span class="hljs-string">'bar'</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">42</span> }; <span class="hljs-keyword">const</span> obj2 = { <span class="hljs-attr">foo</span>: <span class="hljs-string">'baz'</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">5</span> }; <span class="hljs-keyword">const</span> merge = <span class="hljs-function">(<span class="hljs-params">...objects</span>) =&gt;</span> ({...objects}); + <span class="hljs-keyword">let</span> mergedObj = merge(obj1, obj2); <span class="hljs-comment">// { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 5 } } </span> <span class="hljs-keyword">let</span> mergedObj2 = merge({}, obj1, obj2); <span class="hljs-comment">// { 0: {}, 1: { foo: 'bar', x: 42 }, 2: { foo: 'baz', y: 5 } }</span> </code></pre> <p>Shallow cloning or merging objects is possible with another operator called <strong>Object.assign()</strong>.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> man = {<span class="hljs-attr">name</span>:<span class="hljs-string">'joey'</span>,<span class="hljs-attr">height</span>:<span class="hljs-number">6</span>}, emp = {<span class="hljs-attr">salary</span>:<span class="hljs-number">500</span>,<span class="hljs-attr">designation</span>:<span class="hljs-string">'cheiftwit'</span>} <span class="hljs-keyword">let</span> dashboard = <span class="hljs-built_in">Object</span>.assign({},man,emp) <span class="hljs-built_in">console</span>.log(dashboard) <span class="hljs-comment">// {name: "joey", height: 6, salary: 500, designation: "cheiftwit"}</span> </code></pre> <h3 id="heading-code-objectassign-code-practice-clickhttpswwwsololearncomcompiler-playgroundwpn0q8hkp7n9">code: Objectassign code practice <a target="_blank" href="https://www.sololearn.com/compiler-playground/WPn0Q8HKP7N9">[click]</a></h3> <h1 id="heading-images">Images</h1> <ol> <li><p>8.60 Lesson completed</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670133470334/1NuSsVDsU.png" alt /></p> </li> </ol> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>Rest &amp; Spread</p> </li> <li><p>ES6 Rest Parameters</p> </li> <li><p>The Spread Operator</p> </li> <li><p>Spread in function calls</p> </li> <li><p>Spread in array literals</p> </li> <li><p>Spread in object literals</p> </li> <li><p>Quiz</p> </li> <li><p>"Summary calculator" code</p> </li> </ol> <h1 id="heading-my-code">My Code:</h1> <ol> <li><p>splice and push method <a target="_blank" href="https://www.sololearn.com/compiler-playground/WvELSAm1dRM5">[click]</a></p> </li> <li><p>code: Spread operator in object code practice<a target="_blank" href="https://www.sololearn.com/compiler-playground/Wre0tz4kZDr3">[click]</a></p> </li> <li><p>code: Objectassign code practice <a target="_blank" href="https://www.sololearn.com/compiler-playground/WPn0Q8HKP7N9">[click]</a></p> </li> <li><p>"Summary calculator" code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670133696153/QARLaGikr.png" alt /></p> </li> </ol> <h1 id="heading-references-sololearnhttpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day48</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day48</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sun, 04 Dec 2022 06:11:46 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669363821972/2sJPPgxr9.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day47 ]]>
</title>
<description>
<![CDATA[ <p>Today #day47 of #100daysofcode, I have completed 8.58 &amp; 8.59 and 2 code practice problems and 8.58.2 "Workout harder!" code problem in the JS course. @Sololearn</p> <h3 id="heading-ecmascript-6">ECMAScript 6</h3> <h1 id="heading-1-es6-objects">1. ES6 Objects</h1> <ul> <li>In ES6 there is a new shorthand notation in which you can declare a property as a function definition called a method without the function keyword in an object.</li> </ul> <h3 id="heading-i-datatypes-in-javascript">i. DATATYPES in JavaScript</h3> <ul> <li>JavaScript has 2 types of DATATYPES</li> </ul> <ol> <li><p>Primitive data types</p> <ul> <li><p>string primitive data type,</p> </li> <li><p>number primitive data type, boolean primitive data type.</p> </li> <li><p>They are called primitive because they have no properties and method, I mean nothing is attached to them, it is just a plain number like 23 or a plain string like hello or a plain boolean like true or false.</p> </li> </ul> </li> <li><p>Objects datatypes</p> </li> </ol> <ul> <li><p>While objects datatypes are array, regex, math, objects( there are also under objects datatypes), and many more. They are called objects datatypes simply because they have properties and methods. Objects are kings in javascript.</p> <p>Example:</p> </li> </ul> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> man = {<span class="hljs-attr">height</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">colour</span>: <span class="hljs-string">'Brown'</span>, <span class="hljs-attr">hands</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">legs</span>: <span class="hljs-number">2</span>} </code></pre> <p>In the above example, Man is an object, this object man has properties called 'height', 'color'; 'hands', 'and legs'.</p> <p>Man is an object name, 'height', 'color', 'hands', 'and legs' are called property names of the object man.</p> <p>The 6, 'brown', 2' and 2 respectively of 'height', 'color', 'hands', 'and legs' are called property values.</p> <p>In JavaScript, we call these properties as keys and the property values as values in an object.</p> <pre><code class="lang-javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">` the keys of the object man are <span class="hljs-subst">${<span class="hljs-built_in">Object</span>.keys(man)}</span>`</span>) </code></pre> <pre><code class="lang-javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">` the key values of the object man are <span class="hljs-subst">${<span class="hljs-built_in">Object</span>.values(man)}</span>`</span>) </code></pre> <pre><code class="lang-javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">`1. data type of <span class="hljs-subst">${man.height}</span> = <span class="hljs-subst">${<span class="hljs-keyword">typeof</span>(man.height)}</span>`</span>); </code></pre> <pre><code class="lang-javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">`2. data type of <span class="hljs-subst">${man.colour}</span> = <span class="hljs-subst">${<span class="hljs-keyword">typeof</span>(man.colour)}</span>`</span>); </code></pre> <h3 id="heading-code-es6obj-clickhttpswwwsololearncomcompiler-playgroundwq3ybv0vregg">Code: ES6OBJ <a target="_blank" href="https://www.sololearn.com/compiler-playground/WQ3YBv0vregg">[click]</a></h3> <h3 id="heading-note">Note:</h3> <p>Duplicate property names generated a <strong>SyntaxError</strong> in ES5 when using strict mode. However, ES6 removed this limitation.</p> <h3 id="heading-ii-computed-property-names"><strong>ii. Computed Property Names</strong></h3> <p>With ES6, you can now use <strong>computed property</strong> names.</p> <p>Using the square bracket notation <code>[]</code>, we can use an expression for a property name, including concatenating strings.</p> <p>This can be useful in cases where we want to create certain objects based on user data (e.g. id, email, and so on).</p> <h3 id="heading-code-computedpropertyname-clickhttpswwwsololearncomcompiler-playgroundw24pu0umhdyq">Code: computedpropertyname <a target="_blank" href="https://www.sololearn.com/compiler-playground/W24PU0UMhdyq">[Click]</a></h3> <h2 id="heading-iii-objectassign-in-es6"><strong>iii. Object.assign() in ES6</strong></h2> <p>ES6 adds a new <strong>Object</strong> method <strong>assign()</strong> that allows us to combine multiple sources into one target to create a single new object.<br /><strong>Object.assign()</strong> is also useful for creating a duplicate of an existing object.</p> <p>Example:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> person = { <span class="hljs-attr">name</span>: <span class="hljs-string">'Jack'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">'male'</span> }; <span class="hljs-keyword">let</span> student = { <span class="hljs-attr">name</span>: <span class="hljs-string">'Bob'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">xp</span>: <span class="hljs-string">'2'</span> }; <span class="hljs-keyword">let</span> newStudent = <span class="hljs-built_in">Object</span>.assign({}, person, student); <span class="hljs-built_in">console</span>.log(newStudent.name); <span class="hljs-comment">// Bob</span> <span class="hljs-built_in">console</span>.log(newStudent.age); <span class="hljs-comment">// 20</span> <span class="hljs-built_in">console</span>.log(newStudent.sex); <span class="hljs-comment">// male</span> <span class="hljs-built_in">console</span>.log(newStudent.xp); <span class="hljs-comment">// 2</span> </code></pre> <p>In Object.assign(), where the first parameter is the target object <code>{}</code> to which you want to apply new properties.</p> <p>Each parameter following the first will be used as a source for the target. There are no restrictions on the number of source parameters that can be used.</p> <p>Order is important, though, because properties in the second parameter will be overridden by properties with the same name in the third parameter, and so on.</p> <p>In the preceding example, we used a new object as the target and two objects as sources.</p> <p>Now, let's create a duplicate of the object person called dupperson object.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> dupperson = <span class="hljs-built_in">Object</span>.assign({}, person); </code></pre> <p>Now, let's create a duplicate of the object person called dupperson object and then assigned a key value.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> dupperson = <span class="hljs-built_in">Object</span>.assign({}, person, {<span class="hljs-attr">name</span>:<span class="hljs-string">'joey'</span>}); </code></pre> <p>In the above example, the target object<code>{}</code> the key <code>name</code> will be joey because in the second parameter Key <code>name</code> and its value Bob is being overwritten or overridden by the 3rd parameter in the object.assign{} which is <code>name: 'joey'</code>.</p> <h1 id="heading-2-es6-destructuring">2. ES6 Destructuring</h1> <h2 id="heading-i-array-destructuring-in-es6"><strong>i. Array Destructuring in ES6</strong></h2> <p>The <strong>destructuring</strong> assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.<br />ES6 has added a shorthand syntax for destructuring an array.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-keyword">let</span> [one,two,three]=array <span class="hljs-built_in">console</span>.log(one) <span class="hljs-comment">//1</span> </code></pre> <p>In the above example, we have destructured the array value 1 and assigned it to the 'one' variable.</p> <p>Now, let's destructure an array returned by a function,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> array = <span class="hljs-function">() =&gt;</span>{ <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>] } <span class="hljs-keyword">let</span> [one,,three]= array() <span class="hljs-built_in">console</span>.log(three) <span class="hljs-comment">//7</span> </code></pre> <p>The destructuring assignment syntax will allow us to swap values simplified manner.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> x , y = <span class="hljs-number">4</span> , z = <span class="hljs-number">9</span>, u = <span class="hljs-number">32</span> [x,y=<span class="hljs-number">4</span>] = [<span class="hljs-number">78</span>] <span class="hljs-comment">// x = 78 , y = 4</span> [y,z] = [z,y] </code></pre> <h2 id="heading-ii-object-destructuring-in-es6">ii. Object Destructuring in ES6</h2> <p>In the same way as Array destructuring, <strong>Object destructuring</strong> unpacks properties into distinct variables.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> man = {<span class="hljs-attr">name</span>:joey,<span class="hljs-attr">height</span>:<span class="hljs-number">6</span>} <span class="hljs-keyword">let</span> {n,h} = man <span class="hljs-built_in">console</span>.log(n) <span class="hljs-comment">//joey</span> </code></pre> <p>Now, let's assign without declaring the object man,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> man = {<span class="hljs-attr">name</span>:joey,<span class="hljs-attr">height</span>:<span class="hljs-number">6</span>} <span class="hljs-keyword">let</span> n,h ( {n,h} = {<span class="hljs-attr">name</span>:<span class="hljs-string">'joey'</span>,<span class="hljs-attr">height</span>:<span class="hljs-number">6</span>} ) <span class="hljs-built_in">console</span>.log(n) <span class="hljs-comment">//joey</span> </code></pre> <p><code>()</code> and <code>;</code> are mandatory. Let's write a code where <code>()</code> is not required,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> {n,h} = {<span class="hljs-attr">n</span>:<span class="hljs-string">'joey'</span>,<span class="hljs-attr">h</span>:<span class="hljs-number">6</span>} </code></pre> <p>We can also assign the object to new variable names.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> man = {<span class="hljs-attr">name</span>:joey,<span class="hljs-attr">height</span>:<span class="hljs-number">6</span>} <span class="hljs-keyword">let</span> {<span class="hljs-attr">n</span>:nameofman,<span class="hljs-attr">h</span>:heightvalue} = man <span class="hljs-comment">//console.log(h); // Error, you cannot print the key</span> <span class="hljs-built_in">console</span>.log(nameofman); <span class="hljs-comment">//joey</span> </code></pre> <p>You can assign <strong>default values</strong> to variables, in case the value unpacked from the object is undefined. Order is not important.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> man = {<span class="hljs-attr">name</span>:joey,<span class="hljs-attr">height</span>:<span class="hljs-number">6</span>} <span class="hljs-keyword">let</span> {<span class="hljs-attr">name</span>:tony,<span class="hljs-attr">hobby</span>:playboy,<span class="hljs-attr">height</span>:<span class="hljs-number">5</span>} = man <span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">//tony</span> <span class="hljs-built_in">console</span>.log(hobby); <span class="hljs-comment">//playboy</span> </code></pre> <h1 id="heading-images">Images</h1> <ol> <li><p>8.58 &amp; 8.59 Lessons completed.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670055588855/7f2e70c0-75f2-4c7b-a124-84dd6a2d9c23.png" alt /></p> </li> </ol> <h1 id="heading-conclusion">Conclusion</h1> <ol> <li><p>ES6 Objects</p> </li> <li><p>DATATYPES in JavaScript</p> </li> <li><p>Computed Property Names</p> </li> <li><p>Object.assign() in ES6</p> </li> <li><p>ES6 Destructuring</p> </li> <li><p>Array Destructuring in ES6</p> </li> <li><p>Object Destructuring in ES6</p> </li> <li><p>Quiz</p> </li> <li><p>Workout harder! code project</p> </li> </ol> <h1 id="heading-my-code">My Code:</h1> <ol> <li><p>Code: ES6OBJ <a target="_blank" href="https://www.sololearn.com/compiler-playground/WQ3YBv0vregg">[click]</a></p> </li> <li><p>Code: computedpropertyname <a target="_blank" href="https://www.sololearn.com/compiler-playground/W24PU0UMhdyq">[Click]</a></p> </li> <li><p>Workout harder! code project</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1670052587626/8facb8e0-d16a-49c0-a4b9-182fd06ea578.png" alt /></p> </li> </ol> <h1 id="heading-references-sololearnhttpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day47</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day47</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sat, 03 Dec 2022 08:28:05 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669363414849/12V_XF8zr.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day46 ]]>
</title>
<description>
<![CDATA[ <p>Today #day46 of #100daysofcode, I have completed 8.57 lesson and 8.57.2 "Score 70 plus!" code practice problem in JS course. @Sololearn</p> <h3 id="heading-ecmascript-6">ECMAScript 6</h3> <h1 id="heading-loops-and-functions-in-es6">Loops and Functions in ES6</h1> <h1 id="heading-loops-in-ecmascript-6">Loops in ECMAScript 6</h1> <p>In JavaScript we commonly use the <strong>for</strong> loop to iterate over values in a list:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt; arr.length; k++) { <span class="hljs-built_in">console</span>.log(arr[k]); } </code></pre> <p>The <strong>for...in</strong> loop is intended for iterating over the enumerable keys of an object.For example:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>}; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">in</span> obj) { <span class="hljs-built_in">console</span>.log(v); } </code></pre> <p>Note:</p> <ul> <li>The <strong>for...in</strong> loop should <strong>NOT</strong> be used to iterate over arrays because, depending on the JavaScript engine, it could iterate in an arbitrary order. Also, the iterating variable is a <strong>string</strong>, not a number, so if you try to do any math with the variable, you'll be performing string concatenation instead of addition. As depicted in my code below.</li> </ul> <h2 id="heading-code-forin-loop-clickhttpswwwsololearncomcompiler-playgroundwtfctktvg8bl">Code: For...in loop <a target="_blank" href="https://www.sololearn.com/compiler-playground/WTfctKtVg8BL">[Click]</a></h2> <p>ES6 introduces the new <strong>for...of</strong> loop, which creates a loop iterating over iterable objects.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> list = [<span class="hljs-string">"x"</span>, <span class="hljs-string">"y"</span>, <span class="hljs-string">"z"</span>]; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> val <span class="hljs-keyword">of</span> list) { <span class="hljs-built_in">console</span>.log(val); } </code></pre> <p>During each iteration the <strong>val</strong> variable is assigned the corresponding element in the list.</p> <p>The <strong>for...of</strong> loop works for other iterable objects as well, including <strong>strings</strong></p> <pre><code class="lang-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> ch <span class="hljs-keyword">of</span> <span class="hljs-string">"Hello"</span>) { <span class="hljs-built_in">console</span>.log(ch); } </code></pre> <h2 id="heading-code-forof-clickhttpswwwsololearncomcompiler-playgroundwjdzeyask9n4">Code: for...of <a target="_blank" href="https://www.sololearn.com/compiler-playground/WJdzEYasK9n4">[click]</a></h2> <p>Note:</p> <ul> <li><p>The <strong>for...of</strong> loop also works on the newly introduced collections (<strong>Map</strong>, <strong>Set</strong>, <strong>WeakMap</strong>, and <strong>WeakSet</strong>).</p> </li> <li><p>Note that ES6 code will run only in browsers that support it. Older devices and browsers that do not support ES6 will return a syntax error.</p> </li> </ul> <h1 id="heading-summary">Summary:</h1> <ul> <li>For .. in --&gt; used to iterate through properties of an object For .. of --&gt; used to iterate through values of an object</li> </ul> <h1 id="heading-functions-in-ecmascript-6"><strong>Functions in ECMAScript 6</strong></h1> <p>Prior to ES6, a JavaScript function was defined like this:</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>{ <span class="hljs-keyword">var</span> sum = x+y; <span class="hljs-built_in">console</span>.log(sum); } </code></pre> <p>ES6 introduces a new syntax for writing functions. The same function from above can be written as:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> { <span class="hljs-keyword">let</span> sum = x + y; <span class="hljs-built_in">console</span>.log(sum); } </code></pre> <p>This new syntax is quite handy when you just need a simple function with one argument.<br />You can skip typing <strong>function</strong> and <strong>return</strong>, as well as some parentheses and braces.</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> greet = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-string">'welcome '</span>+x; </code></pre> <p>The code above defines a function named <strong>greet</strong> that has one argument and returns a message.</p> <p>If there are no parameters, an empty pair of parentheses should be used, as in</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> x = <span class="hljs-function">() =&gt;</span> alert(<span class="hljs-string">"Hi"</span>); </code></pre> <p>The syntax is very useful for inline functions. For example.</p> <ul> <li>let's say we have an array, and for each element of the array we need to execute a function. We use the <strong>forEach</strong> method of the array to call a function for each element:</li> </ul> <pre><code class="lang-javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]; arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el</span>) </span>{ <span class="hljs-built_in">console</span>.log(el * <span class="hljs-number">2</span>); }); </code></pre> <p>However, in ES6, the code above can be rewritten as following:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]; arr.forEach(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> { <span class="hljs-built_in">console</span>.log(v * <span class="hljs-number">2</span>); }); </code></pre> <h3 id="heading-code-es6funclickhttpswwwsololearncomcompiler-playgroundw1pqx1uona4t">Code: es6fun<a target="_blank" href="https://www.sololearn.com/compiler-playground/W1pQx1Uona4t">[click]</a></h3> <h3 id="heading-note">Note:</h3> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]; arr.forEach(<span class="hljs-function">(<span class="hljs-params">v,r</span>) =&gt;</span> { <span class="hljs-built_in">console</span>.log(v,r); }); <span class="hljs-comment">/*Output 2 0 3 1 7 2 8 3 */</span> </code></pre> <h2 id="heading-default-parameters-in-es6">Default Parameters in ES6</h2> <p>In ES6, we can put the default values right in the signature of the functions.For example:</p> <pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b = <span class="hljs-number">8</span>, c = <span class="hljs-number">50</span></span>) </span>{ <span class="hljs-keyword">return</span> a + b + c; } <span class="hljs-built_in">console</span>.log(test(<span class="hljs-number">5</span>)); <span class="hljs-comment">//67</span> </code></pre> <p>And here's an example of an arrow function with default parameters:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> test = <span class="hljs-function">(<span class="hljs-params">a, b = <span class="hljs-number">8</span>, c = <span class="hljs-number">50</span></span>) =&gt;</span> a + b + c; <span class="hljs-built_in">console</span>.log(test(<span class="hljs-number">9</span>)); <span class="hljs-comment">//67</span> </code></pre> <h3 id="heading-note-1">Note:</h3> <ul> <li>Default value expressions are evaluated at function call time from left to right. This also means that default expressions can use the values of previously-filled parameters.</li> </ul> <h1 id="heading-images">Images</h1> <ul> <li><p>8.57 completed</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669964516418/xI5jQTIBQ.png" alt /></p> </li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li><p>Loops in ECMAScript 6</p> </li> <li><p>Functions in ECMAScript 6</p> </li> <li><p>Default Parameters in ES6</p> </li> <li><p>Quiz</p> </li> <li><p>"Score 70 plus!" code</p> </li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li><p>day46 Score 70 plus! code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669964649236/zUM75LU9U.png" alt /></p> </li> <li><p>Code: For...in loop <a target="_blank" href="https://www.sololearn.com/compiler-playground/WTfctKtVg8BL">[Click]</a></p> </li> <li><p>Code: for...of <a target="_blank" href="https://www.sololearn.com/compiler-playground/WJdzEYasK9n4">[click]</a></p> </li> <li><p>Code: es6fun<a target="_blank" href="https://www.sololearn.com/compiler-playground/W1pQx1Uona4t">[click]</a></p> </li> </ul> <h1 id="heading-references-sololearnhttpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day46</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day46</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Fri, 02 Dec 2022 07:17:31 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669363334614/1Fa0mQWsjT.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day45 ]]>
</title>
<description>
<![CDATA[ <p>Today #day45 of #100daysofcode, I have completed 8.55 &amp; 8.56 lessons and a "London is the capital of GB" code practice problem in the JS course. @Sololearn</p> <h1 id="heading-ecmascript-6">ECMAScript 6</h1> <h1 id="heading-what-is-ecma">What is ECMA?</h1> <ul> <li><p>European Computer Manufacturers Association (ECMA).</p> </li> <li><p>ECMA is a standard, and Javascript and Jscript are an implementation of those standards.</p> </li> </ul> <h1 id="heading-intro-to-es6">Intro to ES6</h1> <ul> <li><p>ECMAScript (ES) is a scripting language specification created to standardize JavaScript.</p> </li> <li><p>ES6 - 2015</p> </li> <li><p>ES13 - June 2022</p> </li> </ul> <h1 id="heading-es6-variables-and-strings">ES6 variables and strings</h1> <h2 id="heading-3-ways-of-declaring-a-variable-in-es6">3 Ways of declaring a variable in ES6</h2> <pre><code class="lang-javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>; <span class="hljs-keyword">const</span> b = <span class="hljs-string">'hello'</span>; <span class="hljs-keyword">let</span> c = <span class="hljs-literal">true</span>; </code></pre> <ul> <li><p>The type of declaration used depends on the necessary <strong>scope</strong>.</p> </li> <li><p><strong>The scope</strong> is the fundamental concept in all programming languages that defines the visibility of a variable.</p> </li> </ul> <h3 id="heading-var-type-declaration">var type declaration</h3> <ul> <li><p><strong>var</strong> keyword, which defines a variable globally, or locally to an entire function regardless of block scope.</p> </li> <li><p>var -&gt; variable</p> </li> <li><p>you can reassign where type declare declaration.</p> </li> </ul> <h3 id="heading-let-type-declaration">let type declaration</h3> <ul> <li><p><strong>let</strong> allows you to declare variables that are limited in scope to the block, statement, or expression in which they are used.</p> </li> <li><p>The best use for let is in loops.</p> </li> <li><p><strong>let</strong> is not subject to <strong>Variable Hoisting</strong>, which means that <strong>let</strong> declarations do not move to the top of the current execution context.</p> </li> <li><p>You can reassign a let type declared declaration.</p> </li> </ul> <h3 id="heading-const-type-declaration">const type declaration</h3> <ul> <li><p><strong>const</strong> variables have the same scope as variables declared using <strong>let</strong>.</p> </li> <li><p>The difference is that const variables are <strong>immutable</strong> i.e they are not allowed to be reassigned.</p> </li> <li><p><strong>const</strong> is not subject to <strong>Variable Hoisting</strong> too, which means that <strong>const</strong> declarations do not move to the top of the current execution context.</p> </li> </ul> <h3 id="heading-note">Note:</h3> <ul> <li>Also, note that ES6 code will run only in browsers that support it. Older devices and browsers that do not support ES6 will return a syntax error.</li> </ul> <h3 id="heading-summary">Summary:</h3> <ul> <li><p>"var" is for globlal scope.</p> </li> <li><p>"let" is for block scope.</p> </li> <li><p>"const" is for block scope and value of it unchangeable</p> </li> </ul> <h1 id="heading-template-literals-in-es6"><strong>Template Literals in ES6</strong></h1> <ul> <li><strong>Template literals</strong> are a way to output variables in the string.</li> </ul> <p>Before ES6 we had to break the string. For example,</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> name=<span class="hljs-string">'spiderman'</span> <span class="hljs-keyword">let</span> log = <span class="hljs-string">'friendly neighbourhood'</span> + name + <span class="hljs-string">'!'</span> <span class="hljs-built_in">console</span>.log(log) </code></pre> <ul> <li>ES6 introduces a new way of outputting variable values in strings.</li> </ul> <p>The same code above can be rewritten as:</p> <pre><code class="lang-javascript"><span class="hljs-keyword">let</span> name=<span class="hljs-string">'spiderman'</span> <span class="hljs-keyword">let</span> log = <span class="hljs-string">`friendly neighbourhood' <span class="hljs-subst">${name}</span> '!'`</span> <span class="hljs-built_in">console</span>.log(log) </code></pre> <ul> <li><p>Observe, that template literals are encapsulated by the <strong>backtick</strong> (` `) character instead of double or single quotes(like in ES5).</p> </li> <li><p>The <strong>${expression}</strong> is a placeholder, and can include any expression, which will get evaluated and inserted into the template literal.</p> </li> </ul> <h3 id="heading-note-1">Note:</h3> <ul> <li>To escape a backtick in a template literal, put a backslash <code>\</code> before the backtick.</li> </ul> <h1 id="heading-images">Images</h1> <ul> <li><p>8.55 &amp; 8.56 completed</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669875018922/2S2hITw37.png" alt /></p> </li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li><p>ECMAScript 6</p> </li> <li><p>What is ECMA?</p> </li> <li><p>Intro to ES6</p> </li> <li><p>ES6 variables and strings</p> </li> <li><p>3 Ways of declaring a variable in ES6</p> </li> <li><p>Template Literals in ES6</p> </li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li><p>London is the capital of GB</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669875008281/S1H0N5PYL.png" alt /></p> </li> </ul> <h1 id="heading-references-sololearnhttpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day45</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day45</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Thu, 01 Dec 2022 06:25:06 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669362637609/aTf3tE6T1.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day44 ]]>
</title>
<description>
<![CDATA[ <p>Today #day44 of #100daysofcode, I have completed 7.53 lesson and 7.54 module 7 quiz and Form and display input code project, this ends module 7 and the next module 8 will be the last in JS course. @Sololearn</p> <h1 id="heading-1-form-validation">1. Form validation</h1> <ul> <li>HTML5 includes attributes that enable form validation. </li> <li>The required attribute, for example, can be added to an input field to make it mandatory to fill out.</li> <li>JavaScript can be used to perform more complex form validation.</li> </ul> <h2 id="heading-11-code">1.1 Code:</h2> <ul> <li>Form and display input [<a target="_blank" href="https://www.sololearn.com/compiler-playground/Wbbqv0Ffg03G">click</a>]</li> </ul> <p>Note:</p> <ul> <li>The form will not get submitted if its onsubmit event returns false.</li> </ul> <h1 id="heading-images">Images</h1> <ul> <li>module 7 completed <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669787116180/noo9dPth6.png" alt="9. day44 module 7 completed.png" /></li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>form validation</li> <li>quiz</li> <li>"Form and display input" code project</li> </ul> <h1 id="heading-my-code">my code</h1> <ul> <li>"Form and display input" code <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669787160558/qm812-vex.png" alt="1. day44 code prog prob form disp.png" /></li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day44</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day44</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Wed, 30 Nov 2022 05:54:12 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669361135713/jVagXmDR3.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day43 ]]>
</title>
<description>
<![CDATA[ <p>Today #day43 of #100daysofcode, I have completed 7.51 and 7.52 lessons and 'image slider' project code project in JS course. @Sololearn</p> <h1 id="heading-752-event-propagation">7.52. event propagation</h1> <ul> <li><p>The HTML DOM supports two methods of event propagation: bubbling and capturing.</p> </li> <li><p>When an event occurs, the element order can be defined using event propagation. Which element's "click" event should be handled first if you have a <code>&lt;p&gt;</code> element inside a <code>&lt;div&gt;</code> element and the user clicks on the <code>&lt;p&gt;</code>element?</p> </li> <li><p>In bubbling, the event of the innermost element is handled first, followed by the event of the outermost element. The click event of the <code>&lt;p&gt;</code> element is handled first, followed by the click event of the <code>&lt;div&gt;</code> element.</p> </li> <li><p>When capturing, the event of the outermost element is handled first, followed by the event of the innermost element. The click event of the <code>&lt;div&gt;</code> element is handled first, followed by the click event of the <code>&lt;p&gt;</code> element.</p> </li> </ul> <h3 id="heading-note">Note:</h3> <ul> <li>Capturing goes down the DOM.</li> <li>Bubbling goes up the DOM.</li> </ul> <h2 id="heading-1-capturing-vs-bubbling">1. Capturing vs. Bubbling</h2> <ul> <li><p>The addEventListener() method allows you to specify the propagation type with the "useCapture" parameter. Example: <code>addEventListener(event, function, useCapture)</code></p> </li> <li><p>The default value is false, which means the bubbling propagation is used; when the value is set to true, the event uses the capturing propagation.</p> </li> </ul> <p>Example: </p> <ul> <li><p><code>//Capturing propagation elem1.addEventListener("click", myFunction, true);</code></p> </li> <li><p><code>//Bubbling propagation elem2.addEventListener("click", myFunction, false);</code></p> </li> <li><p>This is particularly useful when you have the same event handled for multiple elements in the DOM hierarchy.</p> </li> </ul> <h1 id="heading-753-creating-an-image-slider">7.53. creating an image slider</h1> <h2 id="heading-1-image-slider">1. Image Slider</h2> <ul> <li>Now we can create a sample image slider project. The images will be changed using "Next" and "Prev" buttons. Now, lets create our HTML, which includes an image and the two navigation buttons:</li> </ul> <h2 id="heading-2-code">2. code</h2> <ul> <li>Image slider with title [<a target="_blank" href="https://www.sololearn.com/compiler-playground/WyYbqopJNSKj">click</a>]</li> </ul> <h1 id="heading-images">Images</h1> <ul> <li>7.51 &amp; 7.52 completed <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669707695502/Wy1igjMq2.png" alt="6. day43 7.51 &amp; 7.52 completed.png" /></li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>event propagation</li> <li>Capturing vs. Bubbling</li> <li>Image Slider</li> <li>quiz</li> <li>Image slider code project</li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li>image slider project myowncode <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669707723907/Z-X5fig3P.png" alt="4. day43 image slider project myowncode.png" /></li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day43</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day43</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Tue, 29 Nov 2022 07:48:47 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669361088951/yG6LEE-XL.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day42 ]]>
</title>
<description>
<![CDATA[ <p>Today #day42 of #100daysofcode, I have completed 7.49 and 7.50 lessons and practice code in JS course. @Sololearn</p> <h1 id="heading-creating-animations">creating animations</h1> <ul> <li><p>Now that we know how to select and change DOM elements, we can create a simple animation.</p> </li> <li><p>To create an animation, we need to change the properties of an element at small intervals of time.</p> </li> <li><p>We can achieve this by using the setInterval() method, which allows us to create a timer and call a function to change properties repeatedly at defined intervals (in milliseconds).</p> </li> </ul> <p>Example:</p> <ul> <li><p><code>var t = setInterval(function, 500);</code></p> </li> <li><p>the apple code will call the function set an interval of 0.5 seconds</p> </li> <li><p>write a function that will increment and add it to the CSS position left property attribute.</p> <p>code: Moving box animation code project<a target="_blank" href="https://www.sololearn.com/compiler-playground/WVBU91MAo1TT">[click]</a></p> </li> </ul> <h1 id="heading-handling-events">handling events</h1> <ul> <li><p>JavaScript code can be written to execute when an event occurs, such as when a user clicks an HTML element, moves the mouse, or submits a form.</p> </li> <li><p>A handler function is called when an event occurs on a target element.</p> </li> </ul> <p>Typical HTML events include:</p> <ul> <li><p>onclick - occurs when the user clicks an element</p> </li> <li><p>on load - occurs when an object is loaded</p> </li> <li><p>Corresponding events can be added to HTML elements as attributes.</p> </li> </ul> <p>For example: <code>&lt;p onclick="someFunc()"&gt;some text&lt;/p&gt;</code></p> <p>Code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/WPLRrnNx7rvv">click</a></p> <p>Code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/W5t2199yRm22">click</a></p> <h2 id="heading-event-onload">Event onload</h2> <ul> <li><p>The onload and onunload events are triggered when the user enters or leaves the page. These can be useful when performing actions after the page is loaded.</p> <ul> <li><code>&lt;body onload="doSomething()"&gt;</code></li> </ul> </li> <li><p>Similarly, the window.onload event can be used to run code after the whole page is loaded.</p> <ul> <li><code>window.onload = function() {// code}</code></li> </ul> </li> </ul> <h2 id="heading-event-onchange">Event onchange</h2> <ul> <li>The onchange event is mostly used on textboxes. The event handler gets called when the text inside the textbox changes and focus is lost from the element. -Its important to understand events, because they are an essential part of dynamic web pages.</li> </ul> <h2 id="heading-event-listeners">Event Listeners</h2> <ul> <li><p>The addEventListener() method adds an event listener to an element without replacing any existing event listeners. - One element can have multiple event handlers.</p> </li> <li><p>You can also add multiple event handlers of the same type to a single element, for example, two "click" events.</p> <ul> <li><p><code>element.addEventListener(event, function, useCapture);</code></p> </li> <li><p>The first parameter is the event's type (like "click" or "mousedown").</p> </li> <li><p>The second parameter is the function we want to call when the event occurs.</p> </li> <li><p>The third parameter is a Boolean value specifying whether to use event bubbling or event capturing.</p> </li> <li><p>This parameter is optional, and will be described in the next lesson.</p> </li> </ul> </li> </ul> <p>Note:</p> <ul> <li>you don't use the "on" prefix for this event; use "click" instead of "onclick".</li> </ul> <h1 id="heading-images">Images</h1> <ul> <li><p>7.50 completed</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669622776112/ouwrBRdix.png" alt="11. day42 7.50 completed.png" /></p> </li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li><p>creating animations</p> </li> <li><p>handling events</p> </li> <li><p>Event onload</p> </li> <li><p>Event onchange</p> </li> <li><p>Event Listeners</p> </li> <li><p>quiz</p> </li> <li><p>code</p> </li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li><p>pending code</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669622760515/r75xXsTS7.png" alt="3. day42 pending code.png" /></p> </li> <li><p>Updated code: 'Moving Box Animation' Code project</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669808333525/7hKZqRDa9.png" alt="Moving Box Animation" /></p> </li> </ul> <h1 id="heading-references-sololearnhttpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn</a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><p><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></p> </li> <li><p><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></p> </li> <li><p><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></p> </li> <li><p><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></p> </li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day42</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day42</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Mon, 28 Nov 2022 08:11:11 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669361048727/JYuVtf5Pb.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day41 ]]>
</title>
<description>
<![CDATA[ <p>Today #day41 of #100daysofcode, I have completed 7.47 and 7.48 lessons and code practice problems in JS course. @Sololearn</p> <h1 id="heading-changing-elements">changing elements</h1> <h2 id="heading-changing-attributes">Changing Attributes</h2> <ul> <li>After you've decided which element(s) to work with, you can change their attributes.</li> <li>we can change the text content of an element using the innerHTML property.</li> <li>Practically all attributes of an element can be changed using JavaScript.</li> </ul> <p>Code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/WAixBWKQP36t">click</a></p> <h2 id="heading-changing-style">Changing Style</h2> <ul> <li>The style of HTML elements can also be changed using JavaScript.</li> <li>All style attributes can be accessed using the style object of the element.</li> <li>All CSS properties can be set and modified using JavaScript. Just remember, that you cannot use dashes (-) in the property names: these are replaced with camelCase versions, where the compound words begin with a capital letter. For example: the background-color property should be referred to as backgroundColor.</li> </ul> <p>Code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/WUfz4H5CvOa3">click</a></p> <h1 id="heading-adding-and-removing-elements">Adding and removing elements</h1> <h2 id="heading-creating-elements">Creating Elements</h2> <ul> <li>element.cloneNode() clones an element and returns the resulting node.</li> <li>document.createElement(element) creates a new element node.</li> <li>document.createTextNode(text) creates a new text node.</li> </ul> <p>Example: <code>var node = document.createTextNode("Some new text");</code></p> <ul> <li>This will create a new text node, but it will not appear in the document until you append it to an existing element with one of the following methods:</li> <li>element.appendChild(newNode) adds a new child node to an element as the last child node.</li> <li>element.insertBefore(node1, node2) inserts node1 as a child before node2.</li> </ul> <p>code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/WgsxB9zdZslP">click</a></p> <h2 id="heading-removing-elements">Removing Elements</h2> <ul> <li>To remove an HTML element, you must select the parent of the element and use the removeChild(node) method.</li> </ul> <p>code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/Wq4pRT9nkp0N">click</a></p> <ul> <li>the parentNode property to get the parent of the element we want to remove: <code>var child = document.getElementById("p1"); child.parentNode.removeChild(child);</code></li> </ul> <h2 id="heading-replacing-elements">Replacing Elements</h2> <ul> <li>To replace an HTML element, the element.replaceChild(newNode, oldNode) method is used.</li> </ul> <p>code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/WIRyWLXf7vXv">click</a></p> <h1 id="heading-images">Images</h1> <ul> <li>7.47 &amp; 7.48 completed <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669532659054/XD-5cwryi.png" alt="11. day41 7.47&amp;7.48 completed.png" /></li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>changing elements</li> <li>Changing Attributes</li> <li>Changing Style</li> <li>Creating Elements</li> <li>Removing Elements</li> <li>Replacing Elements</li> <li>quiz</li> <li>code</li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li>code <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669532816543/x5Zkq84Vl.png" alt="9. day41 prac prob call.png" /></li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day41</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day41</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sun, 27 Nov 2022 07:10:08 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669361008202/MNaNcW4Yj.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day40 ]]>
</title>
<description>
<![CDATA[ <p>Today #day40 of #100daysofcode, I have completed 7.45 and 7.46 lessons in JS course. @Sololearn</p> <h1 id="heading-what-is-dom">What is DOM?</h1> <ul> <li>When you open a webpage in a browser, the HTML of the page is loaded and visually rendered on the screen.</li> <li>To accomplish this, the browser creates the page's Document Object Model, which is an object-oriented model of its logical structure.</li> <li><p>The DOM of an HTML document can be represented as a nested set of boxes:</p> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669439268085/WpquW9irH.png" alt="DOM of an HTML document day40.png" class="image--center mx-auto" /></p> </li> <li><p>JavaScript can be used to dynamically add, delete, and modify elements in a page's DOM.</p> </li> </ul> <h1 id="heading-dom-tree">DOM Tree</h1> <ul> <li>A document is represented by the DOM as a tree structure.</li> <li>HTML elements are transformed into interconnected nodes in the tree.</li> <li>All of the nodes in the tree are related to one another in some way.</li> <li>Child nodes are possible for nodes. Siblings are nodes on the same tree level.</li> <li>Understanding the relationships between elements in an HTML document is essential for manipulating them with JavaScript.</li> </ul> <h1 id="heading-the-document-object">The document Object</h1> <ul> <li>DOM elements can be accessed using a predefined document object in JavaScript.</li> <li>All objects on your webpage are owned (or rooted) by the document object.</li> <li>syntax: <code>document.body.innerHTML = "Some text";</code></li> <li>Because body is a DOM element, we can change the content of the innerHTML property using the document object.</li> </ul> <h1 id="heading-selecting-elements">Selecting elements</h1> <ul> <li>HTML elements are all objects. Every object, as we know, has properties and methods.</li> <li>The document object contains methods for selecting the desired HTML element.</li> <li>Most used three methods used for selecting html elements:</li> </ul> <pre><code> <span class="hljs-comment">//finds element by id</span> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id'</span>) <span class="hljs-comment">//finds elements by class name</span> <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">"name"</span>) <span class="hljs-comment">//finds elements by tag name</span> <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"name"</span>) </code></pre><h1 id="heading-working-with-dom">Working with DOM</h1> <ul> <li><p>Each element in the DOM has a set of properties and methods that provide information about their relationships in the DOM:</p> <blockquote> <p>element.childNodes returns an array of an element's child nodes. element.firstChild returns the first child node of an element. element.lastChild returns the last child node of an element. element.hasChildNodes returns true if an element has any child nodes, otherwise false. element.nextSibling returns the next node at the same tree level. element.previousSibling returns the previous node at the same tree level. element.parentNode returns the parent node of an element.</p> </blockquote> </li> </ul> <h1 id="heading-images">Images</h1> <ul> <li><p>7.45 lesson completed <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669440408902/Azgg-HN9M.png" alt="4. day40 7.45 lesson completed.png" /></p> </li> <li><p>7.46 completed <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669441402681/T5vb6kMBX.png" alt="9. day40 7.46 completed.png" /></p> </li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>DOM is document object model.</li> <li>DOM Tree</li> <li>The document Object</li> <li>Selecting elements </li> <li>Working with DOM</li> <li>quiz</li> <li>practice code</li> </ul> <h1 id="heading-code">Code:</h1> <ul> <li>practice code <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669441325925/-HPak1DBp.png" alt="7. day40 prac prob.png" /></li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day40</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day40</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Sat, 26 Nov 2022 05:51:34 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1669360954897/eZ6O3X94J.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day39 ]]>
</title>
<description>
<![CDATA[ <p>Today #day39 of #100daysofcode, I have completed 6.42 lesson and 6.43 module 6 quiz and a "Monday to Sunday" code practice problems and 6.44 "store manager" code project in JS course. @Sololearn</p> <h3 id="heading-core-objects">core objects</h3> <h1 id="heading-1-setinterval">1. setInterval</h1> <ul> <li>At specified intervals, the setInterval() method calls a function or evaluates an expression (in milliseconds). It will call the function again and again until clearInterval() is called or the window is closed.</li> <li>When passing the function name into the setInterval method, leave out the parentheses. -Write the name of the function without parentheses when passing it into the setInterval method.</li> </ul> <h3 id="heading-code-clickhttpswwwsololearncomcompiler-playgroundw7f2svxbde38">Code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/W7F2svxBDE38">click</a></h3> <h1 id="heading-2-the-date-object">2. The date object</h1> <ul> <li>We can work with dates thanks to the Date object. </li> <li>A date is made up of the following elements: a year, a month, a day, an hour, a minute, a second, and milliseconds.</li> <li>Create a new date object with the current date and time by calling new Date().</li> <li>syntax: <code>var d = new Date(); //d stores the current date and time</code></li> <li><p>The other methods for initialising dates enable the creation of new date objects based on the specified date and time.</p> <pre><code> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(milliseconds) <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(dateString) <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(year, month, day, hours, minutes, seconds, milliseconds) </code></pre></li> <li>JavaScript dates are calculated in milliseconds from 01 January, 1970 00:00:00 Universal Time (UTC). One day contains 86,400,000 millisecond.</li> </ul> <h3 id="heading-example">Example:</h3> <pre><code><span class="hljs-string">``</span><span class="hljs-string">` //Fri Jan 02 1970 00:00:00 var d1 = new Date(86400000); //Fri Jan 02 2015 10:42:00 var d2 = new Date("January 2, 2015 10:42:00"); //Sat Jun 11 1988 11:42:00 var d3 = new Date(88,5,11,11,42,0,0); `</span><span class="hljs-string">``</span> </code></pre><ul> <li>JavaScript counts months from 0 to 11. January is 0, and December is 11. Date objects are static, rather than dynamic. The computer time is ticking, but date objects don't change, once created.</li> </ul> <h2 id="heading-i-date-methods">i. Date Methods</h2> <ul> <li>When a Date object is created, a number of methods make it possible to perform operations on it.</li> <li>getFullYear() -&gt; gets the year</li> <li>getMonth() -&gt; gets the month</li> <li>getDate() -&gt; gets the day of the month</li> <li>getDay() -&gt; gets the day of the week</li> <li>getHours() -&gt; gets the hour</li> <li>getMinutes() -&gt; gets the minutes</li> <li>getSeconds() -&gt; gets the seconds</li> <li>getMilliseconds() -&gt; gets the milliseconds </li> </ul> <h3 id="heading-example-1">Example :</h3> <ul> <li>Code: get_hours_am_pm<a target="_blank" href="https://www.sololearn.com/compiler-playground/WzpYznmzk8EJ"> click</a></li> <li>Code: completedate<a target="_blank" href="https://www.sololearn.com/compiler-playground/Wcu5AosTMiFz"> click</a></li> </ul> <h1 id="heading-images">Images</h1> <ul> <li><p>6.42 completed <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669358490663/O21wTGXPT.png" alt="8. day39 6.42 completed.png" /></p> </li> <li><p>Module 6 completed <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669358514724/Yja5Y2oig.png" alt="15. day 39 module 6 completed.png" /></p> </li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>setInterval()</li> <li>the date object</li> <li>Date Methods</li> <li>3 code practice problems </li> <li>Module 6 quiz</li> <li>"Monday to Sunday" code practice problems</li> <li>"Store manager" code project</li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li><p>"Monday to Sunday" code practice problems <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669358986460/aYKn3KEJ0.png" alt="6. day39 mondaytosynday prog prob.png" /></p> </li> <li><p>"Store manager" code project <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669358995663/yTMhq3L7n.png" alt="14. day39 storemanager code proj.png" /></p> </li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day39</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day39</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Fri, 25 Nov 2022 06:56:48 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1668927934640/HfS7Oy59U.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day38 ]]>
</title>
<description>
<![CDATA[ <p>Today #day38 of #100daysofcode, I have completed 6.41 lesson and a code practice problem in JS course. @Sololearn</p> <h3 id="heading-core-objects">core objects</h3> <h1 id="heading-the-math-object">The math object</h1> <ul> <li>The Math object allows you to perform mathematical tasks, and includes several properties.</li> <li>Math.E -&gt; euler's constant</li> <li>Math.LN2 -&gt; natural log of value 2</li> <li>Math.Log2E -&gt; base 2 log of euler's constant</li> <li>Math.PI -&gt; returns the constant Pi</li> <li>Math has no constructor. There's no need to create a Math object first.</li> </ul> <h1 id="heading-math-object-methods">Math Object Methods</h1> <ul> <li>The Math object contains a number of methods that are used for calculations:<ul> <li>Math.abs(x) -&gt; returns the absolute value of x.</li> <li>Math.pow(x,y) -&gt; returns the value of X to the power of y.</li> <li>Math.sqrt(x) -&gt; returns the value of square root of x.</li> </ul> </li> </ul> <h2 id="heading-code-clickhttpswwwsololearncomcompiler-playgroundwx6nyhdhlgcx">Code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/Wx6NyhdHlgCx">click</a></h2> <ul> <li>it is annoying to get another prompt or alert after clicking the cancel first prompt , so I have modified the code do not ask if user click cancel,</li> </ul> <h2 id="heading-code-clickhttpswwwsololearncomcompiler-playgroundwsvr5i59xwuq">Code: <a target="_blank" href="https://www.sololearn.com/compiler-playground/WSVR5i59xwUq">click</a></h2> <ul> <li>Math is a handy object</li> </ul> <h1 id="heading-images">Images</h1> <ul> <li>6.41 completed <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669267761957/Yt_pKWcwQ.png" alt="6. day38 6.41 completed.png" /></li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>The math object</li> <li>Math Object Methods</li> <li>Quiz</li> <li>code</li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li>Century program problem <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669267744705/qeWLr5BzK.png" alt="2. day38 prog prob century.png" /></li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day38</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day38</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Thu, 24 Nov 2022 05:37:03 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1668928375538/wW8umzcJI.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day37 ]]>
</title>
<description>
<![CDATA[ <p>Today #day37 of #100daysofcode, I have completed 6.39 and 6.40 lessons and a code practice problem in JS course. @Sololearn</p> <h3 id="heading-core-objects">core objects</h3> <h1 id="heading-array-properties-and-methods">array properties and methods</h1> <h2 id="heading-the-length-property">The length Property</h2> <ul> <li>JavaScript arrays have useful built-in properties and methods.</li> <li>an array length property returns number of its elements.</li> <li>the length property returns the number which is always higher than the array indexes.</li> <li>If the array is empty, the length property returns 0.</li> </ul> <h2 id="heading-combining-arrays">Combining Arrays</h2> <ul> <li>The concat() method in JavaScript allows you to join arrays and create an entirely new array.</li> </ul> <h1 id="heading-associative-arrays">associative arrays</h1> <ul> <li>While many programming languages support arrays with named indexes (text instead of numbers), JavaScript does not support associative arrays. However, you can still use the named array syntax to generate an object.</li> <li>Arrays with named indexes are not supported by JavaScript. Arrays in JavaScript always use numbered indexes.</li> <li>When you want the index to be a string, it is preferable to use an object. When you want the index to be a number, use an array.</li> </ul> <h1 id="heading-images">Images</h1> <ul> <li>6.39 and 6.40 lessons completed. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669180544546/cTfsIntuE.png" alt="7. day37 6.40 completed.png" /></li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>array properties and methods</li> <li>The length Property</li> <li>Combining Arrays</li> <li>associative arrays</li> <li>quiz</li> <li>code problem </li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li>Code problem <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669180626524/KPfYeyH4t.png" alt="2. day37 prog prob.png" /></li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day37</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day37</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Wed, 23 Nov 2022 05:22:56 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1668927902812/JFprL8WZP.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day36 ]]>
</title>
<description>
<![CDATA[ <p>Today #day36 of #100daysofcode, I have completed 6.37 and 6.38 lessons and a code practice problems in JS course. @Sololearn</p> <h3 id="heading-core-objects">core objects</h3> <h3 id="heading-arrays">arrays</h3> <h1 id="heading-javascript-arrays">JavaScript Arrays</h1> <ul> <li>Arrays store multiple values in a single variable.</li> <li>syntax: <code>var courses = new Array("HTML", "CSS", "JS");</code></li> <li>to access an array use the following syntax: <code>arrayname[arrayindex]</code> Note:</li> <li>[0] is the first element in an array. [1] is the second. Array indexes start with 0.</li> <li>1st element is 0th index. 10th element is 9th index.</li> <li>undefined value is returned when you access an index outside of the array.</li> </ul> <h1 id="heading-other-ways-to-create-arrays">other ways to create arrays</h1> <ul> <li>you can first create an array and then you can add the elements by later the referencing the index number.</li> <li>An array is a special type of object. An array uses numbers to access its elements, and an object uses names to access its members. Note:</li> <li>JavaScript arrays are dynamic you can declare an array without an argument inside the <code>()</code>, you can add any number of elements dynamically later.</li> </ul> <h1 id="heading-images-of-lesson-completed">Images of lesson completed</h1> <ul> <li><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669092996689/H3_Nz5c4q.png" alt="5. day36 6.37 completed.png" /></li> <li><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669092980922/U-LDCHAqI.png" alt="8. day36 6.38 completed.png" /></li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>JavaScript Arrays</li> <li>creating arrays</li> <li>quiz</li> <li>code</li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669093012865/bsCt3BzMP.png" alt="3. day36 prog prob Fluffy Pancakes.png" /></li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day36</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day36</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Tue, 22 Nov 2022 05:03:16 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1668927388299/CTsUy2Lpq.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Learning JS Course @Sololearn - Day35 ]]>
</title>
<description>
<![CDATA[ <p>Today #day35 of #100daysofcode, I have completed 5.34 and one code practice problems and 5.35 module 5 quiz and 5.36 "contact manager" code project in JS course. @Sololearn</p> <p> Objects</p> <h1 id="heading-adding-methods">adding methods</h1> <h2 id="heading-methods">Methods</h2> <ul> <li>Methods are functions that are stored as object properties.</li> <li>syntax: <code>methodName = function() { code lines }</code></li> <li>syntax to access method: <code>objectName.methodName()</code></li> <li>A method is a function, belonging to an object. It can be referenced using the this keyword.</li> <li>You can also define the function outside of the constructor function and associate it with the object.</li> <li>Note that it's not necessary to write the function's parentheses when assigning it to an object.</li> </ul> <p>Code: <a target="_blank" href="https://www.sololearn.com/learning/1024/1154/1466/1">click</a></p> <h1 id="heading-images-of-lesson-completed">Images of lesson completed</h1> <ul> <li><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669009775982/feFm0cBS8.png" alt="10. day35 module 5 completed.png" /></li> </ul> <h1 id="heading-conclusion">Conclusion</h1> <ul> <li>Methods</li> <li>method functions</li> <li>quiz</li> <li>contact manager code project</li> </ul> <h1 id="heading-my-code">My Code:</h1> <ul> <li><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669007817597/ieHbF6Ma4.png" alt="1. day35 prog prob.png" /></li> <li><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1669009817060/DvzAYP_T9.png" alt="9. day35 contact manager code project.png" /></li> </ul> <h1 id="heading-references-sololearn-httpswwwsololearncomlearning1024">References <a target="_blank" href="https://www.sololearn.com/learning/1024">Sololearn </a></h1> <h1 id="heading-author-dheerajy">Author: Dheeraj.y</h1> <h1 id="heading-connect-with-me">Connect with me:</h1> <ul> <li><a target="_blank" href="https://twitter.com/yssdheeraj">My Twitter</a></li> <li><a target="_blank" href="https://www.linkedin.com/in/dheerajy1/">My LinkedIn</a></li> <li><a target="_blank" href="https://github.com/dheerajy1">My GitHub</a></li> <li><a target="_blank" href="https://dheerajy1.hashnode.dev/">My Hashnode</a></li> </ul> ]]>
</description>
<link>https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day35</link>
<guid isPermaLink="true">https://dheerajy1.hashnode.dev/learning-js-course-sololearn-day35</guid>
<dc:creator>
<![CDATA[ dheerajy ]]>
</dc:creator>
<pubDate>Mon, 21 Nov 2022 06:00:25 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1668926799614/t9-bu3vVJ.png</cover_image>
</item>
</channel>
</rss>